{"repo": "scrapy/scrapy", "pull_number": 6388, "instance_id": "scrapy__scrapy-6388", "issue_numbers": ["6383"], "base_commit": "2b9e32f1ca491340148e6a1918d1df70443823e6", "patch": "diff --git a/scrapy/contracts/__init__.py b/scrapy/contracts/__init__.py\nindex b300b8457fc..27bc2fcbaf9 100644\n--- a/scrapy/contracts/__init__.py\n+++ b/scrapy/contracts/__init__.py\n@@ -120,7 +120,8 @@ def extract_contracts(self, method: Callable) -> List[Contract]:\n \n             if line.startswith(\"@\"):\n                 m = re.match(r\"@(\\w+)\\s*(.*)\", line)\n-                assert m is not None\n+                if m is None:\n+                    continue\n                 name, args = m.groups()\n                 args = re.split(r\"\\s+\", args)\n \n", "test_patch": "diff --git a/tests/test_contracts.py b/tests/test_contracts.py\nindex 1459e0b5fd5..c9c12f0d804 100644\n--- a/tests/test_contracts.py\n+++ b/tests/test_contracts.py\n@@ -182,6 +182,19 @@ def custom_form(self, response):\n         \"\"\"\n         pass\n \n+    def invalid_regex(self, response):\n+        \"\"\"method with invalid regex\n+        @ Scrapy is awsome\n+        \"\"\"\n+        pass\n+\n+    def invalid_regex_with_valid_contract(self, response):\n+        \"\"\"method with invalid regex\n+        @ scrapy is awsome\n+        @url http://scrapy.org\n+        \"\"\"\n+        pass\n+\n \n class CustomContractSuccessSpider(Spider):\n     name = \"custom_contract_success_spider\"\n@@ -385,6 +398,21 @@ def test_scrapes(self):\n         message = \"ContractFail: Missing fields: name, url\"\n         assert message in self.results.failures[-1][-1]\n \n+    def test_regex(self):\n+        spider = TestSpider()\n+        response = ResponseMock()\n+\n+        # invalid regex\n+        request = self.conman.from_method(spider.invalid_regex, self.results)\n+        self.should_succeed()\n+\n+        # invalid regex with valid contract\n+        request = self.conman.from_method(\n+            spider.invalid_regex_with_valid_contract, self.results\n+        )\n+        self.should_succeed()\n+        request.callback(response)\n+\n     def test_custom_contracts(self):\n         self.conman.from_spider(CustomContractSuccessSpider(), self.results)\n         self.should_succeed()\n", "problem_statement": "Error handling in contract parsing\nWe found that there is no proper handling for unmatched regexes in `\u200escrapy.contracts.ContractsManager.extract_contracts()`, so e.g. calling `from_method()` on a method with `@ foo` in the docstring produces an unhandled exception. I think we should just skip lines that don't match.\n", "hints_text": "@wRAR May I work on this issue?\nOf course", "created_at": "2024-06-03T12:47:28Z"}