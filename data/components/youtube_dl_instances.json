[
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 32987,
        "instance_id": "ytdl-org__youtube-dl-32987",
        "issue_numbers": [
            "32986"
        ],
        "base_commit": "c5098961b04ce83f4615f2a846c84f803b072639",
        "patch": "diff --git a/youtube_dl/extractor/common.py b/youtube_dl/extractor/common.py\nindex 9b0016d07ec..78704b55718 100644\n--- a/youtube_dl/extractor/common.py\n+++ b/youtube_dl/extractor/common.py\n@@ -3170,7 +3170,7 @@ def _parse_jwplayer_formats(self, jwplayer_sources_data, video_id=None,\n                     # See com/longtailvideo/jwplayer/media/RTMPMediaProvider.as\n                     # of jwplayer.flash.swf\n                     rtmp_url_parts = re.split(\n-                        r'((?:mp4|mp3|flv):)', source_url, 1)\n+                        r'((?:mp4|mp3|flv):)', source_url, maxsplit=1)\n                     if len(rtmp_url_parts) == 3:\n                         rtmp_url, prefix, play_path = rtmp_url_parts\n                         a_format.update({\ndiff --git a/youtube_dl/extractor/youtube.py b/youtube_dl/extractor/youtube.py\nindex 6fe520e9a44..1f83acf7cbf 100644\n--- a/youtube_dl/extractor/youtube.py\n+++ b/youtube_dl/extractor/youtube.py\n@@ -3,11 +3,13 @@\n from __future__ import unicode_literals\n \n import collections\n+import hashlib\n import itertools\n import json\n import os.path\n import random\n import re\n+import time\n import traceback\n \n from .common import InfoExtractor, SearchInfoExtractor\n@@ -290,6 +292,33 @@ def _real_initialize(self):\n     _YT_INITIAL_PLAYER_RESPONSE_RE = r'ytInitialPlayerResponse\\s*=\\s*({.+?})\\s*;'\n     _YT_INITIAL_BOUNDARY_RE = r'(?:var\\s+meta|</script|\\n)'\n \n+    _SAPISID = None\n+\n+    def _generate_sapisidhash_header(self, origin='https://www.youtube.com'):\n+        time_now = round(time.time())\n+        if self._SAPISID is None:\n+            yt_cookies = self._get_cookies('https://www.youtube.com')\n+            # Sometimes SAPISID cookie isn't present but __Secure-3PAPISID is.\n+            # See: https://github.com/yt-dlp/yt-dlp/issues/393\n+            sapisid_cookie = dict_get(\n+                yt_cookies, ('__Secure-3PAPISID', 'SAPISID'))\n+            if sapisid_cookie and sapisid_cookie.value:\n+                self._SAPISID = sapisid_cookie.value\n+                self.write_debug('Extracted SAPISID cookie')\n+                # SAPISID cookie is required if not already present\n+                if not yt_cookies.get('SAPISID'):\n+                    self.write_debug('Copying __Secure-3PAPISID cookie to SAPISID cookie')\n+                    self._set_cookie(\n+                        '.youtube.com', 'SAPISID', self._SAPISID, secure=True, expire_time=time_now + 3600)\n+            else:\n+                self._SAPISID = False\n+        if not self._SAPISID:\n+            return None\n+        # SAPISIDHASH algorithm from https://stackoverflow.com/a/32065323\n+        sapisidhash = hashlib.sha1(\n+            '{0} {1} {2}'.format(time_now, self._SAPISID, origin).encode('utf-8')).hexdigest()\n+        return 'SAPISIDHASH {0}_{1}'.format(time_now, sapisidhash)\n+\n     def _call_api(self, ep, query, video_id, fatal=True, headers=None):\n         data = self._DEFAULT_API_DATA.copy()\n         data.update(query)\n@@ -1579,20 +1608,27 @@ def _genslice(start, end, step):\n         self.to_screen('Extracted signature function:\\n' + code)\n \n     def _parse_sig_js(self, jscode):\n+        # Examples where `sig` is funcname:\n+        # sig=function(a){a=a.split(\"\"); ... ;return a.join(\"\")};\n+        # ;c&&(c=sig(decodeURIComponent(c)),a.set(b,encodeURIComponent(c)));return a};\n+        # {var l=f,m=h.sp,n=sig(decodeURIComponent(h.s));l.set(m,encodeURIComponent(n))}\n+        # sig=function(J){J=J.split(\"\"); ... ;return J.join(\"\")};\n+        # ;N&&(N=sig(decodeURIComponent(N)),J.set(R,encodeURIComponent(N)));return J};\n+        # {var H=u,k=f.sp,v=sig(decodeURIComponent(f.s));H.set(k,encodeURIComponent(v))}\n         funcname = self._search_regex(\n-            (r'\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n-             r'\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n-             r'\\bm=(?P<sig>[a-zA-Z0-9$]{2,})\\(decodeURIComponent\\(h\\.s\\)\\)',\n-             r'\\bc&&\\(c=(?P<sig>[a-zA-Z0-9$]{2,})\\(decodeURIComponent\\(c\\)\\)',\n-             r'(?:\\b|[^a-zA-Z0-9$])(?P<sig>[a-zA-Z0-9$]{2,})\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\)(?:;[a-zA-Z0-9$]{2}\\.[a-zA-Z0-9$]{2}\\(a,\\d+\\))?',\n-             r'(?P<sig>[a-zA-Z0-9$]+)\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\)',\n+            (r'\\b(?P<var>[\\w$]+)&&\\((?P=var)=(?P<sig>[\\w$]{2,})\\(decodeURIComponent\\((?P=var)\\)\\)',\n+             r'(?P<sig>[\\w$]+)\\s*=\\s*function\\(\\s*(?P<arg>[\\w$]+)\\s*\\)\\s*{\\s*(?P=arg)\\s*=\\s*(?P=arg)\\.split\\(\\s*\"\"\\s*\\)\\s*;\\s*[^}]+;\\s*return\\s+(?P=arg)\\.join\\(\\s*\"\"\\s*\\)',\n+             r'(?:\\b|[^\\w$])(?P<sig>[\\w$]{2,})\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\)(?:;[\\w$]{2}\\.[\\w$]{2}\\(a,\\d+\\))?',\n+             # Old patterns\n+             r'\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[\\w$]+)\\(',\n+             r'\\b[\\w]+\\s*&&\\s*[\\w]+\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[\\w$]+)\\(',\n+             r'\\bm=(?P<sig>[\\w$]{2,})\\(decodeURIComponent\\(h\\.s\\)\\)',\n              # Obsolete patterns\n-             r'(\"|\\')signature\\1\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n-             r'\\.sig\\|\\|(?P<sig>[a-zA-Z0-9$]+)\\(',\n-             r'yt\\.akamaized\\.net/\\)\\s*\\|\\|\\s*.*?\\s*[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?:encodeURIComponent\\s*\\()?\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n-             r'\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n-             r'\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n-             r'\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\('),\n+             r'(\"|\\')signature\\1\\s*,\\s*(?P<sig>[\\w$]+)\\(',\n+             r'\\.sig\\|\\|(?P<sig>[\\w$]+)\\(',\n+             r'yt\\.akamaized\\.net/\\)\\s*\\|\\|\\s*.*?\\s*[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?:encodeURIComponent\\s*\\()?\\s*(?P<sig>[\\w$]+)\\(',\n+             r'\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?P<sig>[\\w$]+)\\(',\n+             r'\\bc\\s*&&\\s*[\\w]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[\\w$]+)\\('),\n             jscode, 'Initial JS player signature function name', group='sig')\n \n         jsi = JSInterpreter(jscode)\n@@ -1658,36 +1694,29 @@ def _decrypt_nsig(self, n, video_id, player_url):\n \n     def _extract_n_function_name(self, jscode):\n         func_name, idx = self._search_regex(\n-            # new: (b=String.fromCharCode(110),c=a.get(b))&&c=nfunc[idx](c)\n-            # or:  (b=\"nn\"[+a.D],c=a.get(b))&&(c=nfunc[idx](c)\n-            # or:  (PL(a),b=a.j.n||null)&&(b=nfunc[idx](b)\n+            # (y=NuD(),Mw(k),q=k.Z[y]||null)&&(q=narray[idx](q),k.set(y,q),k.V||NuD(''))}};\n+            # (R=\"nn\"[+J.Z],mW(J),N=J.K[R]||null)&&(N=narray[idx](N),J.set(R,N))}};\n+            # or:  (b=String.fromCharCode(110),c=a.get(b))&&c=narray[idx](c)\n+            # or:  (b=\"nn\"[+a.D],c=a.get(b))&&(c=narray[idx](c)\n+            # or:  (PL(a),b=a.j.n||null)&&(b=narray[idx](b)\n             # or:  (b=\"nn\"[+a.D],vL(a),c=a.j[b]||null)&&(c=narray[idx](c),a.set(b,c),narray.length||nfunc(\"\")\n-            # old: (b=a.get(\"n\"))&&(b=nfunc[idx](b)(?P<c>[a-z])\\s*=\\s*[a-z]\\s*\n+            # old: (b=a.get(\"n\"))&&(b=narray[idx](b)(?P<c>[a-z])\\s*=\\s*[a-z]\\s*\n             # older: (b=a.get(\"n\"))&&(b=nfunc(b)\n             r'''(?x)\n-                \\((?:[\\w$()\\s]+,)*?\\s*      # (\n-                (?P<b>[a-z])\\s*=\\s*         # b=\n-                (?:\n-                    (?:                     # expect ,c=a.get(b) (etc)\n-                        String\\s*\\.\\s*fromCharCode\\s*\\(\\s*110\\s*\\)|\n-                        \"n+\"\\[\\s*\\+?s*[\\w$.]+\\s*]\n-                    )\\s*(?:,[\\w$()\\s]+(?=,))*|\n-                       (?P<old>[\\w$]+)      # a (old[er])\n-                   )\\s*\n-                   (?(old)\n-                                            # b.get(\"n\")\n-                       (?:\\.\\s*[\\w$]+\\s*|\\[\\s*[\\w$]+\\s*]\\s*)*?\n-                       (?:\\.\\s*n|\\[\\s*\"n\"\\s*]|\\.\\s*get\\s*\\(\\s*\"n\"\\s*\\))\n-                       |                    # ,c=a.get(b)\n-                       ,\\s*(?P<c>[a-z])\\s*=\\s*[a-z]\\s*\n-                       (?:\\.\\s*[\\w$]+\\s*|\\[\\s*[\\w$]+\\s*]\\s*)*?\n-                       (?:\\[\\s*(?P=b)\\s*]|\\.\\s*get\\s*\\(\\s*(?P=b)\\s*\\))\n-                   )\n-                                            # interstitial junk\n-                   \\s*(?:\\|\\|\\s*null\\s*)?(?:\\)\\s*)?&&\\s*(?:\\(\\s*)?\n-               (?(c)(?P=c)|(?P=b))\\s*=\\s*   # [c|b]=\n-                                            # nfunc|nfunc[idx]\n-                   (?P<nfunc>[a-zA-Z_$][\\w$]*)(?:\\s*\\[(?P<idx>\\d+)\\])?\\s*\\(\\s*[\\w$]+\\s*\\)\n+                # (expr, ...,\n+                \\((?:(?:\\s*[\\w$]+\\s*=)?(?:[\\w$\"+\\.\\s(\\[]+(?:[)\\]]\\s*)?),)*\n+                  # b=...\n+                  (?P<b>[\\w$]+)\\s*=\\s*(?!(?P=b)[^\\w$])[\\w$]+\\s*(?:(?:\n+                    \\.\\s*[\\w$]+ |\n+                    \\[\\s*[\\w$]+\\s*\\] |\n+                    \\.\\s*get\\s*\\(\\s*[\\w$\"]+\\s*\\)\n+                  )\\s*){,2}(?:\\s*\\|\\|\\s*null(?=\\s*\\)))?\\s*\n+                \\)\\s*&&\\s*\\(        # ...)&&(\n+                # b = nfunc, b = narray[idx]\n+                (?P=b)\\s*=\\s*(?P<nfunc>[\\w$]+)\\s*\n+                    (?:\\[\\s*(?P<idx>[\\w$]+)\\s*\\]\\s*)?\n+                    # (...)\n+                    \\(\\s*[\\w$]+\\s*\\)\n             ''', jscode, 'Initial JS player n function name', group=('nfunc', 'idx'),\n             default=(None, None))\n         # thx bashonly: yt-dlp/yt-dlp/pull/10611\n@@ -1697,15 +1726,19 @@ def _extract_n_function_name(self, jscode):\n                 r'''(?xs)\n                     (?:(?<=[^\\w$])|^)       # instead of \\b, which ignores $\n                     (?P<name>(?!\\d)[a-zA-Z\\d_$]+)\\s*=\\s*function\\((?!\\d)[a-zA-Z\\d_$]+\\)\n-                    \\s*\\{(?:(?!};).)+?[\"']enhanced_except_\n+                    \\s*\\{(?:(?!};).)+?(?:\n+                        [\"']enhanced_except_ |\n+                        return\\s*(?P<q>\"|')[a-zA-Z\\d-]+_w8_(?P=q)\\s*\\+\\s*[\\w$]+\n+                    )\n                 ''', jscode, 'Initial JS player n function name', group='name')\n         if not idx:\n             return func_name\n \n-        return self._parse_json(self._search_regex(\n-            r'var\\s+{0}\\s*=\\s*(\\[.+?\\])\\s*[,;]'.format(re.escape(func_name)), jscode,\n-            'Initial JS player n function list ({0}.{1})'.format(func_name, idx)),\n-            func_name, transform_source=js_to_json)[int(idx)]\n+        return self._search_json(\n+            r'var\\s+{0}\\s*='.format(re.escape(func_name)), jscode,\n+            'Initial JS player n function list ({0}.{1})'.format(func_name, idx),\n+            func_name, contains_pattern=r'\\[[\\s\\S]+\\]', end_pattern='[,;]',\n+            transform_source=js_to_json)[int(idx)]\n \n     def _extract_n_function_code(self, video_id, player_url):\n         player_id = self._extract_player_info(player_url)\n@@ -1728,13 +1761,13 @@ def _extract_n_function_from_code(self, jsi, func_code):\n \n         def extract_nsig(s):\n             try:\n-                ret = func([s])\n+                ret = func([s], kwargs={'_ytdl_do_not_return': s})\n             except JSInterpreter.Exception:\n                 raise\n             except Exception as e:\n                 raise JSInterpreter.Exception(traceback.format_exc(), cause=e)\n \n-            if ret.startswith('enhanced_except_'):\n+            if ret.startswith('enhanced_except_') or ret.endswith(s):\n                 raise JSInterpreter.Exception('Signature function returned an exception')\n             return ret\n \n@@ -1910,9 +1943,50 @@ def _real_extract(self, url):\n             player_response = self._extract_yt_initial_variable(\n                 webpage, self._YT_INITIAL_PLAYER_RESPONSE_RE,\n                 video_id, 'initial player response')\n-        if not player_response:\n+        if False and not player_response:\n             player_response = self._call_api(\n                 'player', {'videoId': video_id}, video_id)\n+        if True or not player_response:\n+            origin = 'https://www.youtube.com'\n+            pb_context = {'html5Preference': 'HTML5_PREF_WANTS'}\n+\n+            player_url = self._extract_player_url(webpage)\n+            ytcfg = self._extract_ytcfg(video_id, webpage)\n+            sts = self._extract_signature_timestamp(video_id, player_url, ytcfg)\n+            if sts:\n+                pb_context['signatureTimestamp'] = sts\n+\n+            query = {\n+                'playbackContext': {\n+                    'contentPlaybackContext': pb_context,\n+                    'contentCheckOk': True,\n+                    'racyCheckOk': True,\n+                },\n+                'context': {\n+                    'client': {\n+                        'clientName': 'MWEB',\n+                        'clientVersion': '2.20241202.07.00',\n+                        'hl': 'en',\n+                        'userAgent': 'Mozilla/5.0 (iPad; CPU OS 16_7_10 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1,gzip(gfe)',\n+                        'timeZone': 'UTC',\n+                        'utcOffsetMinutes': 0,\n+                    },\n+                },\n+                'videoId': video_id,\n+            }\n+            headers = {\n+                'X-YouTube-Client-Name': '2',\n+                'X-YouTube-Client-Version': '2.20241202.07.00',\n+                'Origin': origin,\n+                'Sec-Fetch-Mode': 'navigate',\n+                'User-Agent': query['context']['client']['userAgent'],\n+            }\n+            auth = self._generate_sapisidhash_header(origin)\n+            if auth is not None:\n+                headers['Authorization'] = auth\n+                headers['X-Origin'] = origin\n+\n+            player_response = self._call_api('player', query, video_id, fatal=False, headers=headers)\n \n         def is_agegated(playability):\n             if not isinstance(playability, dict):\n@@ -2219,12 +2293,12 @@ def process_manifest_format(f, proto, client_name, itag, all_formats=False):\n                         formats.append(f)\n \n         playable_formats = [f for f in formats if not f.get('has_drm')]\n-        if formats and not playable_formats:\n-            # If there are no formats that definitely don't have DRM, all have DRM\n-            self.report_drm(video_id)\n-        formats[:] = playable_formats\n-\n-        if not formats:\n+        if formats:\n+            if not playable_formats:\n+                # If there are no formats that definitely don't have DRM, all have DRM\n+                self.report_drm(video_id)\n+            formats[:] = playable_formats\n+        else:\n             if streaming_data.get('licenseInfos'):\n                 raise ExtractorError(\n                     'This video is DRM protected.', expected=True)\ndiff --git a/youtube_dl/jsinterp.py b/youtube_dl/jsinterp.py\nindex a616ad070b2..7835187f5fa 100644\n--- a/youtube_dl/jsinterp.py\n+++ b/youtube_dl/jsinterp.py\n@@ -1,3 +1,4 @@\n+# coding: utf-8\n from __future__ import unicode_literals\n \n import itertools\n@@ -5,11 +6,12 @@\n import operator\n import re\n \n-from functools import update_wrapper\n+from functools import update_wrapper, wraps\n \n from .utils import (\n     error_to_compat_str,\n     ExtractorError,\n+    float_or_none,\n     js_to_json,\n     remove_quotes,\n     unified_timestamp,\n@@ -20,9 +22,11 @@\n     compat_basestring,\n     compat_chr,\n     compat_collections_chain_map as ChainMap,\n+    compat_contextlib_suppress,\n     compat_filter as filter,\n     compat_itertools_zip_longest as zip_longest,\n     compat_map as map,\n+    compat_numeric_types,\n     compat_str,\n )\n \n@@ -62,6 +66,10 @@ def update_and_rename_wrapper(w):\n _Infinity = float('inf')\n \n \n+class JS_Undefined(object):\n+    pass\n+\n+\n def _js_bit_op(op):\n \n     def zeroise(x):\n@@ -74,43 +82,114 @@ def wrapped(a, b):\n     return wrapped\n \n \n-def _js_arith_op(op):\n+def _js_arith_op(op, div=False):\n \n     @wraps_op(op)\n     def wrapped(a, b):\n         if JS_Undefined in (a, b):\n             return _NaN\n-        return op(a or 0, b or 0)\n+        # null, \"\" --> 0\n+        a, b = (float_or_none(\n+            (x.strip() if isinstance(x, compat_basestring) else x) or 0,\n+            default=_NaN) for x in (a, b))\n+        if _NaN in (a, b):\n+            return _NaN\n+        try:\n+            return op(a, b)\n+        except ZeroDivisionError:\n+            return _NaN if not (div and (a or b)) else _Infinity\n \n     return wrapped\n \n \n-def _js_div(a, b):\n-    if JS_Undefined in (a, b) or not (a or b):\n-        return _NaN\n-    return operator.truediv(a or 0, b) if b else _Infinity\n+_js_arith_add = _js_arith_op(operator.add)\n+\n+\n+def _js_add(a, b):\n+    if not (isinstance(a, compat_basestring) or isinstance(b, compat_basestring)):\n+        return _js_arith_add(a, b)\n+    if not isinstance(a, compat_basestring):\n+        a = _js_toString(a)\n+    elif not isinstance(b, compat_basestring):\n+        b = _js_toString(b)\n+    return operator.concat(a, b)\n \n \n-def _js_mod(a, b):\n-    if JS_Undefined in (a, b) or not b:\n-        return _NaN\n-    return (a or 0) % b\n+_js_mod = _js_arith_op(operator.mod)\n+__js_exp = _js_arith_op(operator.pow)\n \n \n def _js_exp(a, b):\n     if not b:\n         return 1  # even 0 ** 0 !!\n-    elif JS_Undefined in (a, b):\n-        return _NaN\n-    return (a or 0) ** b\n-\n-\n-def _js_eq_op(op):\n+    return __js_exp(a, b)\n+\n+\n+def _js_to_primitive(v):\n+    return (\n+        ','.join(map(_js_toString, v)) if isinstance(v, list)\n+        else '[object Object]' if isinstance(v, dict)\n+        else compat_str(v) if not isinstance(v, (\n+            compat_numeric_types, compat_basestring))\n+        else v\n+    )\n+\n+\n+def _js_toString(v):\n+    return (\n+        'undefined' if v is JS_Undefined\n+        else 'Infinity' if v == _Infinity\n+        else 'NaN' if v is _NaN\n+        else 'null' if v is None\n+        # bool <= int: do this first\n+        else ('false', 'true')[v] if isinstance(v, bool)\n+        else '{0:.7f}'.format(v).rstrip('.0') if isinstance(v, compat_numeric_types)\n+        else _js_to_primitive(v))\n+\n+\n+_nullish = frozenset((None, JS_Undefined))\n+\n+\n+def _js_eq(a, b):\n+    # NaN != any\n+    if _NaN in (a, b):\n+        return False\n+    # Object is Object\n+    if isinstance(a, type(b)) and isinstance(b, (dict, list)):\n+        return operator.is_(a, b)\n+    # general case\n+    if a == b:\n+        return True\n+    # null == undefined\n+    a_b = set((a, b))\n+    if a_b & _nullish:\n+        return a_b <= _nullish\n+    a, b = _js_to_primitive(a), _js_to_primitive(b)\n+    if not isinstance(a, compat_basestring):\n+        a, b = b, a\n+    # Number to String: convert the string to a number\n+    # Conversion failure results in ... false\n+    if isinstance(a, compat_basestring):\n+        return float_or_none(a) == b\n+    return a == b\n+\n+\n+def _js_neq(a, b):\n+    return not _js_eq(a, b)\n+\n+\n+def _js_id_op(op):\n \n     @wraps_op(op)\n     def wrapped(a, b):\n-        if set((a, b)) <= set((None, JS_Undefined)):\n-            return op(a, a)\n+        if _NaN in (a, b):\n+            return op(_NaN, None)\n+        if not isinstance(a, (compat_basestring, compat_numeric_types)):\n+            a, b = b, a\n+        # strings are === if ==\n+        # why 'a' is not 'a': https://stackoverflow.com/a/1504848\n+        if isinstance(a, (compat_basestring, compat_numeric_types)):\n+            return a == b if op(0, 0) else a != b\n         return op(a, b)\n \n     return wrapped\n@@ -138,25 +217,57 @@ def _js_ternary(cndn, if_true=True, if_false=False):\n     return if_true\n \n \n+def _js_unary_op(op):\n+\n+    @wraps_op(op)\n+    def wrapped(_, a):\n+        return op(a)\n+\n+    return wrapped\n+\n+\n+# https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n+def _js_typeof(expr):\n+    with compat_contextlib_suppress(TypeError, KeyError):\n+        return {\n+            JS_Undefined: 'undefined',\n+            _NaN: 'number',\n+            _Infinity: 'number',\n+            True: 'boolean',\n+            False: 'boolean',\n+            None: 'object',\n+        }[expr]\n+    for t, n in (\n+        (compat_basestring, 'string'),\n+        (compat_numeric_types, 'number'),\n+    ):\n+        if isinstance(expr, t):\n+            return n\n+    if callable(expr):\n+        return 'function'\n+    # TODO: Symbol, BigInt\n+    return 'object'\n+\n+\n # (op, definition) in order of binding priority, tightest first\n # avoid dict to maintain order\n # definition None => Defined in JSInterpreter._operator\n _OPERATORS = (\n     ('>>', _js_bit_op(operator.rshift)),\n     ('<<', _js_bit_op(operator.lshift)),\n-    ('+', _js_arith_op(operator.add)),\n+    ('+', _js_add),\n     ('-', _js_arith_op(operator.sub)),\n     ('*', _js_arith_op(operator.mul)),\n     ('%', _js_mod),\n-    ('/', _js_div),\n+    ('/', _js_arith_op(operator.truediv, div=True)),\n     ('**', _js_exp),\n )\n \n _COMP_OPERATORS = (\n-    ('===', operator.is_),\n-    ('!==', operator.is_not),\n-    ('==', _js_eq_op(operator.eq)),\n-    ('!=', _js_eq_op(operator.ne)),\n+    ('===', _js_id_op(operator.is_)),\n+    ('!==', _js_id_op(operator.is_not)),\n+    ('==', _js_eq),\n+    ('!=', _js_neq),\n     ('<=', _js_comp_op(operator.le)),\n     ('>=', _js_comp_op(operator.ge)),\n     ('<', _js_comp_op(operator.lt)),\n@@ -176,6 +287,11 @@ def _js_ternary(cndn, if_true=True, if_false=False):\n     ('&&', None),\n )\n \n+_UNARY_OPERATORS_X = (\n+    ('void', _js_unary_op(lambda _: JS_Undefined)),\n+    ('typeof', _js_unary_op(_js_typeof)),\n+)\n+\n _OPERATOR_RE = '|'.join(map(lambda x: re.escape(x[0]), _OPERATORS + _LOG_OPERATORS))\n \n _NAME_RE = r'[a-zA-Z_$][\\w$]*'\n@@ -183,10 +299,6 @@ def _js_ternary(cndn, if_true=True, if_false=False):\n _QUOTES = '\\'\"/'\n \n \n-class JS_Undefined(object):\n-    pass\n-\n-\n class JS_Break(ExtractorError):\n     def __init__(self):\n         ExtractorError.__init__(self, 'Invalid break')\n@@ -242,6 +354,7 @@ def truncate_string(s, left, right=0):\n \n     @classmethod\n     def wrap_interpreter(cls, f):\n+        @wraps(f)\n         def interpret_statement(self, stmt, local_vars, allow_recursion, *args, **kwargs):\n             if cls.ENABLED and stmt.strip():\n                 cls.write(stmt, level=allow_recursion)\n@@ -255,7 +368,7 @@ def interpret_statement(self, stmt, local_vars, allow_recursion, *args, **kwargs\n                 raise\n             if cls.ENABLED and stmt.strip():\n                 if should_ret or repr(ret) != stmt:\n-                    cls.write(['->', '=>'][should_ret], repr(ret), '<-|', stmt, level=allow_recursion)\n+                    cls.write(['->', '=>'][bool(should_ret)], repr(ret), '<-|', stmt, level=allow_recursion)\n             return ret, should_ret\n         return interpret_statement\n \n@@ -284,6 +397,9 @@ class JS_RegExp(object):\n         RE_FLAGS = {\n             # special knowledge: Python's re flags are bitmask values, current max 128\n             # invent new bitmask values well above that for literal parsing\n+            # JS 'u' flag is effectively always set (surrogate pairs aren't seen),\n+            # but \\u{...} and \\p{...} escapes aren't handled); no additional JS 'v'\n+            # features are supported\n             # TODO: execute matches with these flags (remaining: d, y)\n             'd': 1024,  # Generate indices for substring matches\n             'g': 2048,  # Global search\n@@ -291,6 +407,7 @@ class JS_RegExp(object):\n             'm': re.M,  # Multi-line search\n             's': re.S,  # Allows . to match newline characters\n             'u': re.U,  # Treat a pattern as a sequence of unicode code points\n+            'v': re.U,  # Like 'u' with extended character class and \\p{} syntax\n             'y': 4096,  # Perform a \"sticky\" search that matches starting at the current position in the target string\n         }\n \n@@ -347,6 +464,8 @@ def regex_flags(cls, expr):\n     def __op_chars(cls):\n         op_chars = set(';,[')\n         for op in cls._all_operators():\n+            if op[0].isalpha():\n+                continue\n             op_chars.update(op[0])\n         return op_chars\n \n@@ -369,9 +488,18 @@ def _separate(cls, expr, delim=',', max_split=None, skip_delims=None):\n         skipping = 0\n         if skip_delims:\n             skip_delims = variadic(skip_delims)\n+        skip_txt = None\n         for idx, char in enumerate(expr):\n+            if skip_txt and idx <= skip_txt[1]:\n+                continue\n             paren_delta = 0\n             if not in_quote:\n+                if char == '/' and expr[idx:idx + 2] == '/*':\n+                    # skip a comment\n+                    skip_txt = expr[idx:].find('*/', 2)\n+                    skip_txt = [idx, idx + skip_txt + 1] if skip_txt >= 2 else None\n+                    if skip_txt:\n+                        continue\n                 if char in _MATCHING_PARENS:\n                     counters[_MATCHING_PARENS[char]] += 1\n                     paren_delta = 1\n@@ -404,12 +532,19 @@ def _separate(cls, expr, delim=',', max_split=None, skip_delims=None):\n             if pos < delim_len:\n                 pos += 1\n                 continue\n-            yield expr[start: idx - delim_len]\n+            if skip_txt and skip_txt[0] >= start and skip_txt[1] <= idx - delim_len:\n+                yield expr[start:skip_txt[0]] + expr[skip_txt[1] + 1: idx - delim_len]\n+            else:\n+                yield expr[start: idx - delim_len]\n+            skip_txt = None\n             start, pos = idx + 1, 0\n             splits += 1\n             if max_split and splits >= max_split:\n                 break\n-        yield expr[start:]\n+        if skip_txt and skip_txt[0] >= start:\n+            yield expr[start:skip_txt[0]] + expr[skip_txt[1] + 1:]\n+        else:\n+            yield expr[start:]\n \n     @classmethod\n     def _separate_at_paren(cls, expr, delim=None):\n@@ -425,7 +560,7 @@ def _all_operators(_cached=[]):\n         if not _cached:\n             _cached.extend(itertools.chain(\n                 # Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n-                _SC_OPERATORS, _LOG_OPERATORS, _COMP_OPERATORS, _OPERATORS))\n+                _SC_OPERATORS, _LOG_OPERATORS, _COMP_OPERATORS, _OPERATORS, _UNARY_OPERATORS_X))\n         return _cached\n \n     def _operator(self, op, left_val, right_expr, expr, local_vars, allow_recursion):\n@@ -449,13 +584,14 @@ def _operator(self, op, left_val, right_expr, expr, local_vars, allow_recursion)\n         except Exception as e:\n             raise self.Exception('Failed to evaluate {left_val!r:.50} {op} {right_val!r:.50}'.format(**locals()), expr, cause=e)\n \n-    def _index(self, obj, idx, allow_undefined=False):\n-        if idx == 'length':\n+    def _index(self, obj, idx, allow_undefined=True):\n+        if idx == 'length' and isinstance(obj, list):\n             return len(obj)\n         try:\n-            return obj[int(idx)] if isinstance(obj, list) else obj[idx]\n-        except Exception as e:\n+            return obj[int(idx)] if isinstance(obj, list) else obj[compat_str(idx)]\n+        except (TypeError, KeyError, IndexError) as e:\n             if allow_undefined:\n+                # when is not allowed?\n                 return JS_Undefined\n             raise self.Exception('Cannot get index {idx!r:.100}'.format(**locals()), expr=repr(obj), cause=e)\n \n@@ -467,7 +603,7 @@ def _dump(self, obj, namespace):\n \n     # used below\n     _VAR_RET_THROW_RE = re.compile(r'''(?x)\n-        (?P<var>(?:var|const|let)\\s)|return(?:\\s+|(?=[\"'])|$)|(?P<throw>throw\\s+)\n+        (?:(?P<var>var|const|let)\\s+|(?P<ret>return)(?:\\s+|(?=[\"'])|$)|(?P<throw>throw)\\s+)\n         ''')\n     _COMPOUND_RE = re.compile(r'''(?x)\n         (?P<try>try)\\s*\\{|\n@@ -479,6 +615,52 @@ def _dump(self, obj, namespace):\n     _FINALLY_RE = re.compile(r'finally\\s*\\{')\n     _SWITCH_RE = re.compile(r'switch\\s*\\(')\n \n+    def handle_operators(self, expr, local_vars, allow_recursion):\n+\n+        for op, _ in self._all_operators():\n+            # hackety: </> have higher priority than <</>>, but don't confuse them\n+            skip_delim = (op + op) if op in '<>*?' else None\n+            if op == '?':\n+                skip_delim = (skip_delim, '?.')\n+            separated = list(self._separate(expr, op, skip_delims=skip_delim))\n+            if len(separated) < 2:\n+                continue\n+\n+            right_expr = separated.pop()\n+            # handle operators that are both unary and binary, minimal BODMAS\n+            if op in ('+', '-'):\n+                # simplify/adjust consecutive instances of these operators\n+                undone = 0\n+                separated = [s.strip() for s in separated]\n+                while len(separated) > 1 and not separated[-1]:\n+                    undone += 1\n+                    separated.pop()\n+                if op == '-' and undone % 2 != 0:\n+                    right_expr = op + right_expr\n+                elif op == '+':\n+                    while len(separated) > 1 and set(separated[-1]) <= self.OP_CHARS:\n+                        right_expr = separated.pop() + right_expr\n+                    if separated[-1][-1:] in self.OP_CHARS:\n+                        right_expr = separated.pop() + right_expr\n+                # hanging op at end of left => unary + (strip) or - (push right)\n+                left_val = separated[-1] if separated else ''\n+                for dm_op in ('*', '%', '/', '**'):\n+                    bodmas = tuple(self._separate(left_val, dm_op, skip_delims=skip_delim))\n+                    if len(bodmas) > 1 and not bodmas[-1].strip():\n+                        expr = op.join(separated) + op + right_expr\n+                        if len(separated) > 1:\n+                            separated.pop()\n+                            right_expr = op.join((left_val, right_expr))\n+                        else:\n+                            separated = [op.join((left_val, right_expr))]\n+                            right_expr = None\n+                        break\n+                if right_expr is None:\n+                    continue\n+\n+            left_val = self.interpret_expression(op.join(separated), local_vars, allow_recursion)\n+            return self._operator(op, left_val, right_expr, expr, local_vars, allow_recursion), True\n+\n     @Debugger.wrap_interpreter\n     def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n         if allow_recursion < 0:\n@@ -501,7 +683,7 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n             expr = stmt[len(m.group(0)):].strip()\n             if m.group('throw'):\n                 raise JS_Throw(self.interpret_expression(expr, local_vars, allow_recursion))\n-            should_return = not m.group('var')\n+            should_return = 'return' if m.group('ret') else False\n         if not expr:\n             return None, should_return\n \n@@ -533,9 +715,15 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n             else:\n                 raise self.Exception('Unsupported object {obj:.100}'.format(**locals()), expr=expr)\n \n-        if expr.startswith('void '):\n-            left = self.interpret_expression(expr[5:], local_vars, allow_recursion)\n-            return None, should_return\n+        for op, _ in _UNARY_OPERATORS_X:\n+            if not expr.startswith(op):\n+                continue\n+            operand = expr[len(op):]\n+            if not operand or operand[0] != ' ':\n+                continue\n+            op_result = self.handle_operators(expr, local_vars, allow_recursion)\n+            if op_result:\n+                return op_result[0], should_return\n \n         if expr.startswith('{'):\n             inner, outer = self._separate_at_paren(expr)\n@@ -582,7 +770,7 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n                 if_expr, expr = self._separate_at_paren(expr)\n             else:\n                 # may lose ... else ... because of ll.368-374\n-                if_expr, expr = self._separate_at_paren(expr, delim=';')\n+                if_expr, expr = self._separate_at_paren(' %s;' % (expr,), delim=';')\n             else_expr = None\n             m = re.match(r'else\\s*(?P<block>\\{)?', expr)\n             if m:\n@@ -720,7 +908,7 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n             start, end = m.span()\n             sign = m.group('pre_sign') or m.group('post_sign')\n             ret = local_vars[var]\n-            local_vars[var] += 1 if sign[0] == '+' else -1\n+            local_vars[var] = _js_add(ret, 1 if sign[0] == '+' else -1)\n             if m.group('pre_sign'):\n                 ret = local_vars[var]\n             expr = expr[:start] + self._dump(ret, local_vars) + expr[end:]\n@@ -730,13 +918,13 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n \n         m = re.match(r'''(?x)\n             (?P<assign>\n-                (?P<out>{_NAME_RE})(?:\\[(?P<index>[^\\]]+?)\\])?\\s*\n+                (?P<out>{_NAME_RE})(?:\\[(?P<out_idx>(?:.+?\\]\\s*\\[)*.+?)\\])?\\s*\n                 (?P<op>{_OPERATOR_RE})?\n                 =(?!=)(?P<expr>.*)$\n             )|(?P<return>\n                 (?!if|return|true|false|null|undefined|NaN|Infinity)(?P<name>{_NAME_RE})$\n             )|(?P<indexing>\n-                (?P<in>{_NAME_RE})\\[(?P<idx>.+)\\]$\n+                (?P<in>{_NAME_RE})\\[(?P<in_idx>(?:.+?\\]\\s*\\[)*.+?)\\]$\n             )|(?P<attribute>\n                 (?P<var>{_NAME_RE})(?:(?P<nullish>\\?)?\\.(?P<member>[^(]+)|\\[(?P<member2>[^\\]]+)\\])\\s*\n             )|(?P<function>\n@@ -746,19 +934,23 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n         if md.get('assign'):\n             left_val = local_vars.get(m.group('out'))\n \n-            if not m.group('index'):\n+            if not m.group('out_idx'):\n                 local_vars[m.group('out')] = self._operator(\n                     m.group('op'), left_val, m.group('expr'), expr, local_vars, allow_recursion)\n                 return local_vars[m.group('out')], should_return\n             elif left_val in (None, JS_Undefined):\n                 raise self.Exception('Cannot index undefined variable ' + m.group('out'), expr=expr)\n \n-            idx = self.interpret_expression(m.group('index'), local_vars, allow_recursion)\n-            if not isinstance(idx, (int, float)):\n-                raise self.Exception('List index %s must be integer' % (idx, ), expr=expr)\n-            idx = int(idx)\n+            indexes = re.split(r'\\]\\s*\\[', m.group('out_idx'))\n+            for i, idx in enumerate(indexes, 1):\n+                idx = self.interpret_expression(idx, local_vars, allow_recursion)\n+                if i < len(indexes):\n+                    left_val = self._index(left_val, idx)\n+            if isinstance(idx, float):\n+                idx = int(idx)\n             left_val[idx] = self._operator(\n-                m.group('op'), self._index(left_val, idx), m.group('expr'), expr, local_vars, allow_recursion)\n+                m.group('op'), self._index(left_val, idx) if m.group('op') else None,\n+                m.group('expr'), expr, local_vars, allow_recursion)\n             return left_val[idx], should_return\n \n         elif expr.isdigit():\n@@ -776,63 +968,31 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n             return _Infinity, should_return\n \n         elif md.get('return'):\n-            return local_vars[m.group('name')], should_return\n+            ret = local_vars[m.group('name')]\n+            # challenge may try to force returning the original value\n+            # use an optional internal var to block this\n+            if should_return == 'return':\n+                if '_ytdl_do_not_return' not in local_vars:\n+                    return ret, True\n+                return (ret, True) if ret != local_vars['_ytdl_do_not_return'] else (ret, False)\n+            else:\n+                return ret, should_return\n \n-        try:\n+        with compat_contextlib_suppress(ValueError):\n             ret = json.loads(js_to_json(expr))  # strict=True)\n             if not md.get('attribute'):\n                 return ret, should_return\n-        except ValueError:\n-            pass\n \n         if md.get('indexing'):\n             val = local_vars[m.group('in')]\n-            idx = self.interpret_expression(m.group('idx'), local_vars, allow_recursion)\n-            return self._index(val, idx), should_return\n+            for idx in re.split(r'\\]\\s*\\[', m.group('in_idx')):\n+                idx = self.interpret_expression(idx, local_vars, allow_recursion)\n+                val = self._index(val, idx)\n+            return val, should_return\n \n-        for op, _ in self._all_operators():\n-            # hackety: </> have higher priority than <</>>, but don't confuse them\n-            skip_delim = (op + op) if op in '<>*?' else None\n-            if op == '?':\n-                skip_delim = (skip_delim, '?.')\n-            separated = list(self._separate(expr, op, skip_delims=skip_delim))\n-            if len(separated) < 2:\n-                continue\n-\n-            right_expr = separated.pop()\n-            # handle operators that are both unary and binary, minimal BODMAS\n-            if op in ('+', '-'):\n-                # simplify/adjust consecutive instances of these operators\n-                undone = 0\n-                separated = [s.strip() for s in separated]\n-                while len(separated) > 1 and not separated[-1]:\n-                    undone += 1\n-                    separated.pop()\n-                if op == '-' and undone % 2 != 0:\n-                    right_expr = op + right_expr\n-                elif op == '+':\n-                    while len(separated) > 1 and set(separated[-1]) <= self.OP_CHARS:\n-                        right_expr = separated.pop() + right_expr\n-                    if separated[-1][-1:] in self.OP_CHARS:\n-                        right_expr = separated.pop() + right_expr\n-                # hanging op at end of left => unary + (strip) or - (push right)\n-                left_val = separated[-1] if separated else ''\n-                for dm_op in ('*', '%', '/', '**'):\n-                    bodmas = tuple(self._separate(left_val, dm_op, skip_delims=skip_delim))\n-                    if len(bodmas) > 1 and not bodmas[-1].strip():\n-                        expr = op.join(separated) + op + right_expr\n-                        if len(separated) > 1:\n-                            separated.pop()\n-                            right_expr = op.join((left_val, right_expr))\n-                        else:\n-                            separated = [op.join((left_val, right_expr))]\n-                            right_expr = None\n-                        break\n-                if right_expr is None:\n-                    continue\n-\n-            left_val = self.interpret_expression(op.join(separated), local_vars, allow_recursion)\n-            return self._operator(op, left_val, right_expr, expr, local_vars, allow_recursion), should_return\n+        op_result = self.handle_operators(expr, local_vars, allow_recursion)\n+        if op_result:\n+            return op_result[0], should_return\n \n         if md.get('attribute'):\n             variable, member, nullish = m.group('var', 'member', 'nullish')\n@@ -877,7 +1037,7 @@ def eval_method(variable, member):\n \n                 # Member access\n                 if arg_str is None:\n-                    return self._index(obj, member, nullish)\n+                    return self._index(obj, member)\n \n                 # Function call\n                 argvals = [\n@@ -904,7 +1064,7 @@ def eval_method(variable, member):\n                 if obj is compat_str:\n                     if member == 'fromCharCode':\n                         assertion(argvals, 'takes one or more arguments')\n-                        return ''.join(map(compat_chr, argvals))\n+                        return ''.join(compat_chr(int(n)) for n in argvals)\n                     raise self.Exception('Unsupported string method ' + member, expr=expr)\n                 elif obj is float:\n                     if member == 'pow':\n@@ -913,13 +1073,47 @@ def eval_method(variable, member):\n                     raise self.Exception('Unsupported Math method ' + member, expr=expr)\n \n                 if member == 'split':\n-                    assertion(argvals, 'takes one or more arguments')\n-                    assertion(len(argvals) == 1, 'with limit argument is not implemented')\n-                    return obj.split(argvals[0]) if argvals[0] else list(obj)\n+                    assertion(len(argvals) <= 2, 'takes at most two arguments')\n+                    if len(argvals) > 1:\n+                        limit = argvals[1]\n+                        assertion(isinstance(limit, int) and limit >= 0, 'integer limit >= 0')\n+                        if limit == 0:\n+                            return []\n+                    else:\n+                        limit = 0\n+                    if len(argvals) == 0:\n+                        argvals = [JS_Undefined]\n+                    elif isinstance(argvals[0], self.JS_RegExp):\n+                        # avoid re.split(), similar but not enough\n+\n+                        def where():\n+                            for m in argvals[0].finditer(obj):\n+                                yield m.span(0)\n+                            yield (None, None)\n+\n+                        def splits(limit=limit):\n+                            i = 0\n+                            for j, jj in where():\n+                                if j == jj == 0:\n+                                    continue\n+                                if j is None and i >= len(obj):\n+                                    break\n+                                yield obj[i:j]\n+                                if jj is None or limit == 1:\n+                                    break\n+                                limit -= 1\n+                                i = jj\n+\n+                        return list(splits())\n+                    return (\n+                        obj.split(argvals[0], limit - 1) if argvals[0] and argvals[0] != JS_Undefined\n+                        else list(obj)[:limit or None])\n                 elif member == 'join':\n                     assertion(isinstance(obj, list), 'must be applied on a list')\n-                    assertion(len(argvals) == 1, 'takes exactly one argument')\n-                    return argvals[0].join(obj)\n+                    assertion(len(argvals) <= 1, 'takes at most one argument')\n+                    return (',' if len(argvals) == 0 else argvals[0]).join(\n+                        ('' if x in (None, JS_Undefined) else _js_toString(x))\n+                        for x in obj)\n                 elif member == 'reverse':\n                     assertion(not argvals, 'does not take any arguments')\n                     obj.reverse()\n@@ -941,37 +1135,31 @@ def eval_method(variable, member):\n                     index, how_many = map(int, (argvals + [len(obj)])[:2])\n                     if index < 0:\n                         index += len(obj)\n-                    add_items = argvals[2:]\n-                    res = []\n-                    for _ in range(index, min(index + how_many, len(obj))):\n-                        res.append(obj.pop(index))\n-                    for i, item in enumerate(add_items):\n-                        obj.insert(index + i, item)\n+                    res = [obj.pop(index)\n+                           for _ in range(index, min(index + how_many, len(obj)))]\n+                    obj[index:index] = argvals[2:]\n                     return res\n-                elif member == 'unshift':\n-                    assertion(isinstance(obj, list), 'must be applied on a list')\n-                    assertion(argvals, 'takes one or more arguments')\n-                    for item in reversed(argvals):\n-                        obj.insert(0, item)\n-                    return obj\n-                elif member == 'pop':\n+                elif member in ('shift', 'pop'):\n                     assertion(isinstance(obj, list), 'must be applied on a list')\n                     assertion(not argvals, 'does not take any arguments')\n-                    if not obj:\n-                        return\n-                    return obj.pop()\n+                    return obj.pop(0 if member == 'shift' else -1) if len(obj) > 0 else JS_Undefined\n+                elif member == 'unshift':\n+                    assertion(isinstance(obj, list), 'must be applied on a list')\n+                    # not enforced: assertion(argvals, 'takes one or more arguments')\n+                    obj[0:0] = argvals\n+                    return len(obj)\n                 elif member == 'push':\n-                    assertion(argvals, 'takes one or more arguments')\n+                    # not enforced: assertion(argvals, 'takes one or more arguments')\n                     obj.extend(argvals)\n-                    return obj\n+                    return len(obj)\n                 elif member == 'forEach':\n                     assertion(argvals, 'takes one or more arguments')\n-                    assertion(len(argvals) <= 2, 'takes at-most 2 arguments')\n+                    assertion(len(argvals) <= 2, 'takes at most 2 arguments')\n                     f, this = (argvals + [''])[:2]\n                     return [f((item, idx, obj), {'this': this}, allow_recursion) for idx, item in enumerate(obj)]\n                 elif member == 'indexOf':\n                     assertion(argvals, 'takes one or more arguments')\n-                    assertion(len(argvals) <= 2, 'takes at-most 2 arguments')\n+                    assertion(len(argvals) <= 2, 'takes at most 2 arguments')\n                     idx, start = (argvals + [0])[:2]\n                     try:\n                         return obj.index(idx, start)\n@@ -980,7 +1168,7 @@ def eval_method(variable, member):\n                 elif member == 'charCodeAt':\n                     assertion(isinstance(obj, compat_str), 'must be applied on a string')\n                     # assertion(len(argvals) == 1, 'takes exactly one argument') # but not enforced\n-                    idx = argvals[0] if isinstance(argvals[0], int) else 0\n+                    idx = argvals[0] if len(argvals) > 0 and isinstance(argvals[0], int) else 0\n                     if idx >= len(obj):\n                         return None\n                     return ord(obj[idx])\n@@ -1031,7 +1219,7 @@ def interpret_iter(self, list_txt, local_vars, allow_recursion):\n             yield self.interpret_expression(v, local_vars, allow_recursion)\n \n     def extract_object(self, objname):\n-        _FUNC_NAME_RE = r'''(?:[a-zA-Z$0-9]+|\"[a-zA-Z$0-9]+\"|'[a-zA-Z$0-9]+')'''\n+        _FUNC_NAME_RE = r'''(?:{n}|\"{n}\"|'{n}')'''.format(n=_NAME_RE)\n         obj = {}\n         fields = next(filter(None, (\n             obj_m.group('fields') for obj_m in re.finditer(\n@@ -1090,6 +1278,7 @@ def extract_function(self, funcname):\n \n     def extract_function_from_code(self, argnames, code, *global_stack):\n         local_vars = {}\n+\n         while True:\n             mobj = re.search(r'function\\((?P<args>[^)]*)\\)\\s*{', code)\n             if mobj is None:\n@@ -1100,10 +1289,11 @@ def extract_function_from_code(self, argnames, code, *global_stack):\n                 [x.strip() for x in mobj.group('args').split(',')],\n                 body, local_vars, *global_stack))\n             code = code[:start] + name + remaining\n+\n         return self.build_function(argnames, code, local_vars, *global_stack)\n \n-    def call_function(self, funcname, *args):\n-        return self.extract_function(funcname)(args)\n+    def call_function(self, funcname, *args, **kw_global_vars):\n+        return self.extract_function(funcname)(args, kw_global_vars)\n \n     @classmethod\n     def build_arglist(cls, arg_text):\n@@ -1122,8 +1312,9 @@ def build_function(self, argnames, code, *global_stack):\n         global_stack = list(global_stack) or [{}]\n         argnames = tuple(argnames)\n \n-        def resf(args, kwargs={}, allow_recursion=100):\n-            global_stack[0].update(zip_longest(argnames, args, fillvalue=None))\n+        def resf(args, kwargs=None, allow_recursion=100):\n+            kwargs = kwargs or {}\n+            global_stack[0].update(zip_longest(argnames, args, fillvalue=JS_Undefined))\n             global_stack[0].update(kwargs)\n             var_stack = LocalNameSpace(*global_stack)\n             ret, should_abort = self.interpret_statement(code.replace('\\n', ' '), var_stack, allow_recursion - 1)\n",
        "test_patch": "diff --git a/test/test_jsinterp.py b/test/test_jsinterp.py\nindex c7a4f2cbf23..12e7b9b9485 100644\n--- a/test/test_jsinterp.py\n+++ b/test/test_jsinterp.py\n@@ -1,4 +1,5 @@\n #!/usr/bin/env python\n+# coding: utf-8\n \n from __future__ import unicode_literals\n \n@@ -11,7 +12,7 @@\n import math\n import re\n \n-from youtube_dl.compat import compat_str\n+from youtube_dl.compat import compat_str as str\n from youtube_dl.jsinterp import JS_Undefined, JSInterpreter\n \n NaN = object()\n@@ -19,7 +20,7 @@\n \n class TestJSInterpreter(unittest.TestCase):\n     def _test(self, jsi_or_code, expected, func='f', args=()):\n-        if isinstance(jsi_or_code, compat_str):\n+        if isinstance(jsi_or_code, str):\n             jsi_or_code = JSInterpreter(jsi_or_code)\n         got = jsi_or_code.call_function(func, *args)\n         if expected is NaN:\n@@ -40,16 +41,27 @@ def test_add(self):\n         self._test('function f(){return 42 + 7;}', 49)\n         self._test('function f(){return 42 + undefined;}', NaN)\n         self._test('function f(){return 42 + null;}', 42)\n+        self._test('function f(){return 1 + \"\";}', '1')\n+        self._test('function f(){return 42 + \"7\";}', '427')\n+        self._test('function f(){return false + true;}', 1)\n+        self._test('function f(){return \"false\" + true;}', 'falsetrue')\n+        self._test('function f(){return '\n+                   '1 + \"2\" + [3,4] + {k: 56} + null + undefined + Infinity;}',\n+                   '123,4[object Object]nullundefinedInfinity')\n \n     def test_sub(self):\n         self._test('function f(){return 42 - 7;}', 35)\n         self._test('function f(){return 42 - undefined;}', NaN)\n         self._test('function f(){return 42 - null;}', 42)\n+        self._test('function f(){return 42 - \"7\";}', 35)\n+        self._test('function f(){return 42 - \"spam\";}', NaN)\n \n     def test_mul(self):\n         self._test('function f(){return 42 * 7;}', 294)\n         self._test('function f(){return 42 * undefined;}', NaN)\n         self._test('function f(){return 42 * null;}', 0)\n+        self._test('function f(){return 42 * \"7\";}', 294)\n+        self._test('function f(){return 42 * \"eggs\";}', NaN)\n \n     def test_div(self):\n         jsi = JSInterpreter('function f(a, b){return a / b;}')\n@@ -57,17 +69,26 @@ def test_div(self):\n         self._test(jsi, NaN, args=(JS_Undefined, 1))\n         self._test(jsi, float('inf'), args=(2, 0))\n         self._test(jsi, 0, args=(0, 3))\n+        self._test(jsi, 6, args=(42, 7))\n+        self._test(jsi, 0, args=(42, float('inf')))\n+        self._test(jsi, 6, args=(\"42\", 7))\n+        self._test(jsi, NaN, args=(\"spam\", 7))\n \n     def test_mod(self):\n         self._test('function f(){return 42 % 7;}', 0)\n         self._test('function f(){return 42 % 0;}', NaN)\n         self._test('function f(){return 42 % undefined;}', NaN)\n+        self._test('function f(){return 42 % \"7\";}', 0)\n+        self._test('function f(){return 42 % \"beans\";}', NaN)\n \n     def test_exp(self):\n         self._test('function f(){return 42 ** 2;}', 1764)\n         self._test('function f(){return 42 ** undefined;}', NaN)\n         self._test('function f(){return 42 ** null;}', 1)\n+        self._test('function f(){return undefined ** 0;}', 1)\n         self._test('function f(){return undefined ** 42;}', NaN)\n+        self._test('function f(){return 42 ** \"2\";}', 1764)\n+        self._test('function f(){return 42 ** \"spam\";}', NaN)\n \n     def test_calc(self):\n         self._test('function f(a){return 2*a+1;}', 7, args=[3])\n@@ -89,7 +110,35 @@ def test_operators(self):\n         self._test('function f(){return 19 & 21;}', 17)\n         self._test('function f(){return 11 >> 2;}', 2)\n         self._test('function f(){return []? 2+3: 4;}', 5)\n+        # equality\n+        self._test('function f(){return 1 == 1}', True)\n+        self._test('function f(){return 1 == 1.0}', True)\n+        self._test('function f(){return 1 == \"1\"}', True)\n         self._test('function f(){return 1 == 2}', False)\n+        self._test('function f(){return 1 != \"1\"}', False)\n+        self._test('function f(){return 1 != 2}', True)\n+        self._test('function f(){var x = {a: 1}; var y = x; return x == y}', True)\n+        self._test('function f(){var x = {a: 1}; return x == {a: 1}}', False)\n+        self._test('function f(){return NaN == NaN}', False)\n+        self._test('function f(){return null == undefined}', True)\n+        self._test('function f(){return \"spam, eggs\" == \"spam, eggs\"}', True)\n+        # strict equality\n+        self._test('function f(){return 1 === 1}', True)\n+        self._test('function f(){return 1 === 1.0}', True)\n+        self._test('function f(){return 1 === \"1\"}', False)\n+        self._test('function f(){return 1 === 2}', False)\n+        self._test('function f(){var x = {a: 1}; var y = x; return x === y}', True)\n+        self._test('function f(){var x = {a: 1}; return x === {a: 1}}', False)\n+        self._test('function f(){return NaN === NaN}', False)\n+        self._test('function f(){return null === undefined}', False)\n+        self._test('function f(){return null === null}', True)\n+        self._test('function f(){return undefined === undefined}', True)\n+        self._test('function f(){return \"uninterned\" === \"uninterned\"}', True)\n+        self._test('function f(){return 1 === 1}', True)\n+        self._test('function f(){return 1 === \"1\"}', False)\n+        self._test('function f(){return 1 !== 1}', False)\n+        self._test('function f(){return 1 !== \"1\"}', True)\n+        # expressions\n         self._test('function f(){return 0 && 1 || 2;}', 2)\n         self._test('function f(){return 0 ?? 42;}', 0)\n         self._test('function f(){return \"life, the universe and everything\" < 42;}', False)\n@@ -111,7 +160,6 @@ def test_assignments(self):\n         self._test('function f(){var x = 20; x += 30 + 1; return x;}', 51)\n         self._test('function f(){var x = 20; x -= 30 + 1; return x;}', -11)\n \n-    @unittest.skip('Not yet fully implemented')\n     def test_comments(self):\n         self._test('''\n             function f() {\n@@ -130,6 +178,15 @@ def test_comments(self):\n             }\n         ''', 3)\n \n+        self._test('''\n+            function f() {\n+                var x = ( /* 1 + */ 2 +\n+                          /* 30 * 40 */\n+                          50);\n+                return x;\n+            }\n+        ''', 52)\n+\n     def test_precedence(self):\n         self._test('''\n             function f() {\n@@ -266,7 +323,20 @@ def test_comma(self):\n         self._test('function f() { return (l=[0,1,2,3], function(a, b){return a+b})((l[1], l[2]), l[3]) }', 5)\n \n     def test_void(self):\n-        self._test('function f() { return void 42; }', None)\n+        self._test('function f() { return void 42; }', JS_Undefined)\n+\n+    def test_typeof(self):\n+        self._test('function f() { return typeof undefined; }', 'undefined')\n+        self._test('function f() { return typeof NaN; }', 'number')\n+        self._test('function f() { return typeof Infinity; }', 'number')\n+        self._test('function f() { return typeof true; }', 'boolean')\n+        self._test('function f() { return typeof null; }', 'object')\n+        self._test('function f() { return typeof \"a string\"; }', 'string')\n+        self._test('function f() { return typeof 42; }', 'number')\n+        self._test('function f() { return typeof 42.42; }', 'number')\n+        self._test('function f() { var g = function(){}; return typeof g; }', 'function')\n+        self._test('function f() { return typeof {key: \"value\"}; }', 'object')\n+        # not yet implemented: Symbol, BigInt\n \n     def test_return_function(self):\n         jsi = JSInterpreter('''\n@@ -283,7 +353,7 @@ def test_null(self):\n     def test_undefined(self):\n         self._test('function f() { return undefined === undefined; }', True)\n         self._test('function f() { return undefined; }', JS_Undefined)\n-        self._test('function f() {return undefined ?? 42; }', 42)\n+        self._test('function f() { return undefined ?? 42; }', 42)\n         self._test('function f() { let v; return v; }', JS_Undefined)\n         self._test('function f() { let v; return v**0; }', 1)\n         self._test('function f() { let v; return [v>42, v<=42, v&&42, 42&&v]; }',\n@@ -324,6 +394,16 @@ def test_object(self):\n         self._test('function f() { let a; return a?.qq; }', JS_Undefined)\n         self._test('function f() { let a = {m1: 42, m2: 0 }; return a?.qq; }', JS_Undefined)\n \n+    def test_indexing(self):\n+        self._test('function f() { return [1, 2, 3, 4][3]}', 4)\n+        self._test('function f() { return [1, [2, [3, [4]]]][1][1][1][0]}', 4)\n+        self._test('function f() { var o = {1: 2, 3: 4}; return o[3]}', 4)\n+        self._test('function f() { var o = {1: 2, 3: 4}; return o[\"3\"]}', 4)\n+        self._test('function f() { return [1, [2, {3: [4]}]][1][1][\"3\"][0]}', 4)\n+        self._test('function f() { return [1, 2, 3, 4].length}', 4)\n+        self._test('function f() { var o = {1: 2, 3: 4}; return o.length}', JS_Undefined)\n+        self._test('function f() { var o = {1: 2, 3: 4}; o[\"length\"] = 42; return o.length}', 42)\n+\n     def test_regex(self):\n         self._test('function f() { let a=/,,[/,913,/](,)}/; }', None)\n \n@@ -411,6 +491,13 @@ def test_join(self):\n             self._test(jsi, 't-e-s-t', args=[test_input, '-'])\n             self._test(jsi, '', args=[[], '-'])\n \n+        self._test('function f(){return '\n+                   '[1, 1.0, \"abc\", {a: 1}, null, undefined, Infinity, NaN].join()}',\n+                   '1,1,abc,[object Object],,,Infinity,NaN')\n+        self._test('function f(){return '\n+                   '[1, 1.0, \"abc\", {a: 1}, null, undefined, Infinity, NaN].join(\"~\")}',\n+                   '1~1~abc~[object Object]~~~Infinity~NaN')\n+\n     def test_split(self):\n         test_result = list('test')\n         tests = [\n@@ -424,6 +511,18 @@ def test_split(self):\n             self._test(jsi, test_result, args=['t-e-s-t', '-'])\n             self._test(jsi, [''], args=['', '-'])\n             self._test(jsi, [], args=['', ''])\n+        # RegExp split\n+        self._test('function f(){return \"test\".split(/(?:)/)}',\n+                   ['t', 'e', 's', 't'])\n+        self._test('function f(){return \"t-e-s-t\".split(/[es-]+/)}',\n+                   ['t', 't'])\n+        # from MDN: surrogate pairs aren't handled: case 1 fails\n+        # self._test('function f(){return \"\ud83d\ude04\ud83d\ude04\".split(/(?:)/)}',\n+        #            ['\\ud83d', '\\ude04', '\\ud83d', '\\ude04'])\n+        # case 2 beats Py3.2: it gets the case 1 result\n+        if sys.version_info >= (2, 6) and not ((3, 0) <= sys.version_info < (3, 3)):\n+            self._test('function f(){return \"\ud83d\ude04\ud83d\ude04\".split(/(?:)/u)}',\n+                       ['\ud83d\ude04', '\ud83d\ude04'])\n \n     def test_slice(self):\n         self._test('function f(){return [0, 1, 2, 3, 4, 5, 6, 7, 8].slice()}', [0, 1, 2, 3, 4, 5, 6, 7, 8])\n@@ -453,6 +552,40 @@ def test_slice(self):\n         self._test('function f(){return \"012345678\".slice(-1, 1)}', '')\n         self._test('function f(){return \"012345678\".slice(-3, -1)}', '67')\n \n+    def test_pop(self):\n+        # pop\n+        self._test('function f(){var a = [0, 1, 2, 3, 4, 5, 6, 7, 8]; return [a.pop(), a]}',\n+                   [8, [0, 1, 2, 3, 4, 5, 6, 7]])\n+        self._test('function f(){return [].pop()}', JS_Undefined)\n+        # push\n+        self._test('function f(){var a = [0, 1, 2]; return [a.push(3, 4), a]}',\n+                   [5, [0, 1, 2, 3, 4]])\n+        self._test('function f(){var a = [0, 1, 2]; return [a.push(), a]}',\n+                   [3, [0, 1, 2]])\n+\n+    def test_shift(self):\n+        # shift\n+        self._test('function f(){var a = [0, 1, 2, 3, 4, 5, 6, 7, 8]; return [a.shift(), a]}',\n+                   [0, [1, 2, 3, 4, 5, 6, 7, 8]])\n+        self._test('function f(){return [].shift()}', JS_Undefined)\n+        # unshift\n+        self._test('function f(){var a = [0, 1, 2]; return [a.unshift(3, 4), a]}',\n+                   [5, [3, 4, 0, 1, 2]])\n+        self._test('function f(){var a = [0, 1, 2]; return [a.unshift(), a]}',\n+                   [3, [0, 1, 2]])\n+\n+    def test_forEach(self):\n+        self._test('function f(){var ret = []; var l = [4, 2]; '\n+                   'var log = function(e,i,a){ret.push([e,i,a]);}; '\n+                   'l.forEach(log); '\n+                   'return [ret.length, ret[0][0], ret[1][1], ret[0][2]]}',\n+                   [2, 4, 1, [4, 2]])\n+        self._test('function f(){var ret = []; var l = [4, 2]; '\n+                   'var log = function(e,i,a){this.push([e,i,a]);}; '\n+                   'l.forEach(log, ret); '\n+                   'return [ret.length, ret[0][0], ret[1][1], ret[0][2]]}',\n+                   [2, 4, 1, [4, 2]])\n+\n \n if __name__ == '__main__':\n     unittest.main()\ndiff --git a/test/test_youtube_signature.py b/test/test_youtube_signature.py\nindex 56e92fac5df..fcbc9d7a813 100644\n--- a/test/test_youtube_signature.py\n+++ b/test/test_youtube_signature.py\n@@ -1,4 +1,5 @@\n #!/usr/bin/env python\n+# coding: utf-8\n \n from __future__ import unicode_literals\n \n@@ -12,6 +13,7 @@\n import string\n \n from youtube_dl.compat import (\n+    compat_contextlib_suppress,\n     compat_open as open,\n     compat_str,\n     compat_urlretrieve,\n@@ -50,23 +52,38 @@\n     (\n         'https://s.ytimg.com/yts/jsbin/html5player-en_US-vflBb0OQx.js',\n         84,\n-        '123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQ0STUVWXYZ!\"#$%&\\'()*+,@./:;<=>'\n+        '123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQ0STUVWXYZ!\"#$%&\\'()*+,@./:;<=>',\n     ),\n     (\n         'https://s.ytimg.com/yts/jsbin/html5player-en_US-vfl9FYC6l.js',\n         83,\n-        '123456789abcdefghijklmnopqr0tuvwxyzABCDETGHIJKLMNOPQRS>UVWXYZ!\"#$%&\\'()*+,-./:;<=F'\n+        '123456789abcdefghijklmnopqr0tuvwxyzABCDETGHIJKLMNOPQRS>UVWXYZ!\"#$%&\\'()*+,-./:;<=F',\n     ),\n     (\n         'https://s.ytimg.com/yts/jsbin/html5player-en_US-vflCGk6yw/html5player.js',\n         '4646B5181C6C3020DF1D9C7FCFEA.AD80ABF70C39BD369CCCAE780AFBB98FA6B6CB42766249D9488C288',\n-        '82C8849D94266724DC6B6AF89BBFA087EACCD963.B93C07FBA084ACAEFCF7C9D1FD0203C6C1815B6B'\n+        '82C8849D94266724DC6B6AF89BBFA087EACCD963.B93C07FBA084ACAEFCF7C9D1FD0203C6C1815B6B',\n     ),\n     (\n         'https://s.ytimg.com/yts/jsbin/html5player-en_US-vflKjOTVq/html5player.js',\n         '312AA52209E3623129A412D56A40F11CB0AF14AE.3EE09501CB14E3BCDC3B2AE808BF3F1D14E7FBF12',\n         '112AA5220913623229A412D56A40F11CB0AF14AE.3EE0950FCB14EEBCDC3B2AE808BF331D14E7FBF3',\n-    )\n+    ),\n+    (\n+        'https://www.youtube.com/s/player/6ed0d907/player_ias.vflset/en_US/base.js',\n+        '2aq0aqSyOoJXtK73m-uME_jv7-pT15gOFC02RFkGMqWpzEICs69VdbwQ0LDp1v7j8xx92efCJlYFYb1sUkkBSPOlPmXgIARw8JQ0qOAOAA',\n+        'AOq0QJ8wRAIgXmPlOPSBkkUs1bYFYlJCfe29xx8j7v1pDL2QwbdV96sCIEzpWqMGkFR20CFOg51Tp-7vj_EMu-m37KtXJoOySqa0',\n+    ),\n+    (\n+        'https://www.youtube.com/s/player/3bb1f723/player_ias.vflset/en_US/base.js',\n+        '2aq0aqSyOoJXtK73m-uME_jv7-pT15gOFC02RFkGMqWpzEICs69VdbwQ0LDp1v7j8xx92efCJlYFYb1sUkkBSPOlPmXgIARw8JQ0qOAOAA',\n+        'MyOSJXtKI3m-uME_jv7-pT12gOFC02RFkGoqWpzE0Cs69VdbwQ0LDp1v7j8xx92efCJlYFYb1sUkkBSPOlPmXgIARw8JQ0qOAOAA',\n+    ),\n+    (\n+        'https://www.youtube.com/s/player/2f1832d2/player_ias.vflset/en_US/base.js',\n+        '2aq0aqSyOoJXtK73m-uME_jv7-pT15gOFC02RFkGMqWpzEICs69VdbwQ0LDp1v7j8xx92efCJlYFYb1sUkkBSPOlPmXgIARw8JQ0qOAOAA',\n+        '0QJ8wRAIgXmPlOPSBkkUs1bYFYlJCfe29xxAj7v1pDL0QwbdV96sCIEzpWqMGkFR20CFOg51Tp-7vj_EMu-m37KtXJ2OySqa0q',\n+    ),\n ]\n \n _NSIG_TESTS = [\n@@ -142,6 +159,10 @@\n         'https://www.youtube.com/s/player/5a3b6271/player_ias.vflset/en_US/base.js',\n         'B2j7f_UPT4rfje85Lu_e', 'm5DmNymaGQ5RdQ',\n     ),\n+    (\n+        'https://www.youtube.com/s/player/7a062b77/player_ias.vflset/en_US/base.js',\n+        'NRcE3y3mVtm_cV-W', 'VbsCYUATvqlt5w',\n+    ),\n     (\n         'https://www.youtube.com/s/player/dac945fd/player_ias.vflset/en_US/base.js',\n         'o8BkRxXhuYsBCWi6RplPdP', '3Lx32v_hmzTm6A',\n@@ -154,6 +175,10 @@\n         'https://www.youtube.com/s/player/cfa9e7cb/player_ias.vflset/en_US/base.js',\n         'qO0NiMtYQ7TeJnfFG2', 'k9cuJDHNS5O7kQ',\n     ),\n+    (\n+        'https://www.youtube.com/s/player/8c7583ff/player_ias.vflset/en_US/base.js',\n+        '1wWCVpRR96eAmMI87L', 'KSkWAVv1ZQxC3A',\n+    ),\n     (\n         'https://www.youtube.com/s/player/b7910ca8/player_ias.vflset/en_US/base.js',\n         '_hXMCwMt9qE310D', 'LoZMgkkofRMCZQ',\n@@ -182,6 +207,18 @@\n         'https://www.youtube.com/s/player/b12cc44b/player_ias.vflset/en_US/base.js',\n         'keLa5R2U00sR9SQK', 'N1OGyujjEwMnLw',\n     ),\n+    (\n+        'https://www.youtube.com/s/player/3bb1f723/player_ias.vflset/en_US/base.js',\n+        'gK15nzVyaXE9RsMP3z', 'ZFFWFLPWx9DEgQ',\n+    ),\n+    (\n+        'https://www.youtube.com/s/player/f8f53e1a/player_ias.vflset/en_US/base.js',\n+        'VTQOUOv0mCIeJ7i8kZB', 'kcfD8wy0sNLyNQ',\n+    ),\n+    (\n+        'https://www.youtube.com/s/player/2f1832d2/player_ias.vflset/en_US/base.js',\n+        'YWt1qdbe8SAfkoPHW5d', 'RrRjWQOJmBiP',\n+    ),\n ]\n \n \n@@ -216,11 +253,9 @@ def setUp(self):\n             os.mkdir(self.TESTDATA_DIR)\n \n     def tearDown(self):\n-        try:\n+        with compat_contextlib_suppress(OSError):\n             for f in os.listdir(self.TESTDATA_DIR):\n                 os.remove(f)\n-        except OSError:\n-            pass\n \n \n def t_factory(name, sig_func, url_pattern):\n@@ -254,11 +289,12 @@ def signature(jscode, sig_input):\n \n def n_sig(jscode, sig_input):\n     funcname = YoutubeIE(FakeYDL())._extract_n_function_name(jscode)\n-    return JSInterpreter(jscode).call_function(funcname, sig_input)\n+    return JSInterpreter(jscode).call_function(\n+        funcname, sig_input, _ytdl_do_not_return=sig_input)\n \n \n make_sig_test = t_factory(\n-    'signature', signature, re.compile(r'.*-(?P<id>[a-zA-Z0-9_-]+)(?:/watch_as3|/html5player)?\\.[a-z]+$'))\n+    'signature', signature, re.compile(r'.*(?:-|/player/)(?P<id>[a-zA-Z0-9_-]+)(?:/.+\\.js|(?:/watch_as3|/html5player)?\\.[a-z]+)$'))\n for test_spec in _SIG_TESTS:\n     make_sig_test(*test_spec)\n \n",
        "problem_statement": "[YOUTUBE] ERROR: Unable to extract nsig function code (caused by RegexNotFoundError('Unable to extract Initial JS player n function name... \n<!--\r\n\r\n######################################################################\r\n  WARNING!\r\n  IGNORING THE FOLLOWING TEMPLATE WILL RESULT IN ISSUE CLOSED AS INCOMPLETE\r\n######################################################################\r\n\r\n-->\r\n\r\n\r\n## Checklist\r\n\r\n<!--\r\nCarefully read and work through this check list in order to prevent the most common mistakes and misuse of youtube-dl:\r\n- First of, make sure you are using the latest version of youtube-dl. Run `youtube-dl --version` and ensure your version is 2021.12.17. If it's not, see https://yt-dl.org/update on how to update. Issues with outdated version will be REJECTED.\r\n- Make sure that all provided video/audio/playlist URLs (if any) are alive and playable in a browser.\r\n- Make sure that all URLs and arguments with special characters are properly quoted or escaped as explained in http://yt-dl.org/escape.\r\n- Search the bugtracker for similar issues: http://yt-dl.org/search-issues. DO NOT post duplicates.\r\n- Finally, put x into all relevant boxes (like this [x])\r\n-->\r\n\r\n- [x] I'm reporting a broken site support\r\n- [x] I've verified that I'm running youtube-dl version **2021.12.17**\r\n- [x] I've checked that all provided URLs are alive and playable in a browser\r\n- [x] I've checked that all URLs and arguments with special characters are properly quoted or escaped\r\n- [x] I've searched the bugtracker for similar issues including closed ones\r\n\r\n\r\n## Verbose log\r\n\r\n<!--\r\nProvide the complete verbose output of youtube-dl that clearly demonstrates the problem.\r\nAdd the `-v` flag to your command line you run youtube-dl with (`youtube-dl -v <your command line>`), copy the WHOLE output and insert it below. It should look similar to this:\r\n [debug] System config: []\r\n [debug] User config: []\r\n [debug] Command-line args: [u'-v', u'http://www.youtube.com/watch?v=BaW_jenozKcj']\r\n [debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251\r\n [debug] youtube-dl version 2021.12.17\r\n [debug] Python version 2.7.11 - Windows-2003Server-5.2.3790-SP2\r\n [debug] exe versions: ffmpeg N-75573-g1d0487f, ffprobe N-75573-g1d0487f, rtmpdump 2.4\r\n [debug] Proxy map: {}\r\n <more lines>\r\n-->\r\n\r\n```\r\n==========================\r\nTESTING NORMAL YOUTUBE-DL:\r\n==========================\r\n\r\n\r\n[debug] System config: []\r\n[debug] User config: ['--no-mtime', '--match-filter', '!is_live', '--retries', 'infinite', '--fragment-retries', '3', '--skip-unavailable-fragments', '--restrict-filenames', '-i', '-o', '/home/gregorius/home/pending/videos/%(title)s___%(id)s.webm', '-f', '(bestvideo[height<=360]+worstaudio/best[height<=360])[protocol!=http_dash_segments][container!^=dash]', '--console-title', '--hls-prefer-native', '--no-cache-dir', '--cookies', '/home/gregorius/home/scripts/video/youtube-dl-cookies']\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['https://www.youtube.com/watch?v=eMNXpZZBWFE', '-vf', '(242+249/242+250/242+171/242+251)/(243+249/243+250/243+171/243+251)/18', '--no-playlist', '-o', '/home/gregorius/home/scripts/video/TEST_NORMAL_%(title)s___%(id)s.webm']\r\n[debug] Encodings: locale UTF-8, fs utf-8, out utf-8, pref UTF-8\r\n[debug] youtube-dl version 2021.12.17\r\n[debug] Single file build\r\n[debug] Python 3.10.12 (CPython x86_64 64bit) - Linux-5.15.0-124-generic-x86_64-with-glibc2.35 - OpenSSL 3.0.2 15 Mar 2022 - glibc 2.35\r\n[debug] exe versions: ffmpeg 4.4.2, ffprobe 4.4.2, rtmpdump 2.4\r\n[debug] Proxy map: {}\r\n[youtube] eMNXpZZBWFE: Downloading webpage\r\n[youtube] Downloading just video eMNXpZZBWFE because of --no-playlist\r\n[youtube] eMNXpZZBWFE: Downloading player 3bb1f723\r\nWARNING: [youtube] Falling back to generic n function search\r\nERROR: Unable to extract nsig function code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1637, in _decrypt_nsig\r\n    jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1719, in _extract_n_function_code\r\n    func_name = self._extract_n_function_name(jscode)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1696, in _extract_n_function_name\r\n    return self._search_regex(\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n    raise RegexNotFoundError('Unable to extract %s' % _name)\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1637, in _decrypt_nsig\r\n    jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1719, in _extract_n_function_code\r\n    func_name = self._extract_n_function_name(jscode)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1696, in _extract_n_function_name\r\n    return self._search_regex(\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n    raise RegexNotFoundError('Unable to extract %s' % _name)\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/YoutubeDL.py\", line 875, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/YoutubeDL.py\", line 971, in __extract_info\r\n    ie_result = ie.extract(url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/common.py\", line 571, in extract\r\n    ie_result = self._real_extract(url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 2137, in _real_extract\r\n    self._unthrottle_format_urls(video_id, player_url, dct)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1754, in _unthrottle_format_urls\r\n    n_response = decrypt_nsig(n_param)(n_param, video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1614, in inner\r\n    raise ret\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1606, in inner\r\n    self._player_cache[cache_id] = func(*args, **kwargs)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1639, in _decrypt_nsig\r\n    raise ExtractorError('Unable to extract nsig function code', cause=e)\r\nyoutube_dl.utils.ExtractorError: Unable to extract nsig function code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n\r\n\r\n===========================\r\nTESTING NIGHTLY YOUTUBE-DL:\r\n===========================\r\n\r\n\r\n[debug] System config: []\r\n[debug] User config: ['--no-mtime', '--match-filter', '!is_live', '--retries', 'infinite', '--fragment-retries', '3', '--skip-unavailable-fragments', '--restrict-filenames', '-i', '-o', '/home/gregorius/home/pending/videos/%(title)s___%(id)s.webm', '-f', '(bestvideo[height<=360]+worstaudio/best[height<=360])[protocol!=http_dash_segments][container!^=dash]', '--console-title', '--hls-prefer-native', '--no-cache-dir', '--cookies', '/home/gregorius/home/scripts/video/youtube-dl-cookies']\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['https://www.youtube.com/watch?v=eMNXpZZBWFE', '-vf', '(242+249/242+250/242+171/242+251)/(243+249/243+250/243+171/243+251)/18', '--no-playlist', '-o', '/home/gregorius/home/scripts/video/TEST_NIGHTLY_%(title)s___%(id)s.webm']\r\n[debug] Encodings: locale UTF-8, fs utf-8, out utf-8, pref UTF-8\r\n[debug] youtube-dl version 2024.08.07 [c5098961b] (single file build)\r\n[debug] ** This version was built from the latest master code at https://github.com/ytdl-org/youtube-dl.\r\n[debug] ** For support, visit the main site.\r\n[debug] Python 3.10.12 (CPython x86_64 64bit) - Linux-5.15.0-124-generic-x86_64-with-glibc2.35 - OpenSSL 3.0.2 15 Mar 2022 - glibc 2.35\r\n[debug] exe versions: ffmpeg 4.4.2, ffprobe 4.4.2, rtmpdump 2.4\r\n[debug] Proxy map: {}\r\n[youtube] eMNXpZZBWFE: Downloading webpage\r\n[youtube] Downloading just video eMNXpZZBWFE because of --no-playlist\r\n[youtube] eMNXpZZBWFE: Downloading player 3bb1f723\r\nWARNING: [youtube] Falling back to generic n function search\r\nERROR: Unable to extract nsig function code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1637, in _decrypt_nsig\r\n    jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1719, in _extract_n_function_code\r\n    func_name = self._extract_n_function_name(jscode)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1696, in _extract_n_function_name\r\n    return self._search_regex(\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n    raise RegexNotFoundError('Unable to extract %s' % _name)\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1637, in _decrypt_nsig\r\n    jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1719, in _extract_n_function_code\r\n    func_name = self._extract_n_function_name(jscode)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1696, in _extract_n_function_name\r\n    return self._search_regex(\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n    raise RegexNotFoundError('Unable to extract %s' % _name)\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/YoutubeDL.py\", line 879, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/YoutubeDL.py\", line 975, in __extract_info\r\n    ie_result = ie.extract(url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/common.py\", line 571, in extract\r\n    ie_result = self._real_extract(url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 2137, in _real_extract\r\n    self._unthrottle_format_urls(video_id, player_url, dct)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1754, in _unthrottle_format_urls\r\n    n_response = decrypt_nsig(n_param)(n_param, video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1614, in inner\r\n    raise ret\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1606, in inner\r\n    self._player_cache[cache_id] = func(*args, **kwargs)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1639, in _decrypt_nsig\r\n    raise ExtractorError('Unable to extract nsig function code', cause=e)\r\nyoutube_dl.utils.ExtractorError: Unable to extract nsig function code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n\r\n\r\n\r\n```\r\n\r\n\r\n## Description\r\n\r\n<!--\r\nProvide an explanation of your issue in an arbitrary form. Provide any additional information, suggested solution and as much context and examples as possible.\r\nIf work on your issue requires account credentials please provide them or explain how one can obtain them.\r\n-->\r\n\r\nWell, youtube-dl stopped working entirely now.\r\n\r\nI updated both regular and nightly to what the GitHub Repos have, which was basically no update at all since months, despite other unrelated Youtube issues not being fixed yet (like inability to bulk download shorts because it cant parse a channels shorts page, or inability to download anything but simple formats like format 18 unless you run a workaround, or inability to specify maximum video length to be downloaded).\r\n\r\nAnyways, looks like Youtube changed their webpage layout again since it's the regex that fails, meaning you cannot download ANYTHING now!\n",
        "hints_text": "This is the same issue as yt-dlp/yt-dlp#11744. I have a fix similar to the PR applied in _yt-dlp_ that will be pushed as soon as QA.\nI should mention again that youtube-dl no longer works at all whatsoever for me, this is not just something i can workaround anymore, because it cant even parse the page of a direct video link.\r\n\r\nThis Issue has forced me to look into why youtube-dlp was not a drop-in replacement for youtube-dl on my setup, and I eventually found out that the Config File was ignored and that was the Issue I had, meaning I have switched to youtube-dlp and rewritten my Scripts now, and can no longer report Issues here in the future.\nPlease raise the config issue separately since an incompatibility such as you mention is not meant to exist as far as I know.\nThis is the error im getting on a AlmaLinux server...Maybe this will help.  This did work like a week ago.\r\n\r\n[youtube] SvVS1_hWiZk: Downloading webpage\r\n[youtube] SvVS1_hWiZk: Downloading player 3bb1f723\r\nWARNING: [youtube] Falling back to generic n function search\r\nERROR: Unable to extract nsig function code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; see  https://github.com/ytdl-org/youtube-dl/#user-content-installation  on how to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; see  https://github.com/ytdl-org/youtube-dl/#user-content-installation  on how to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nDownloads from Python_videos.txt completed.\r\nDownloading videos from /home/jeff/Desktop/Youtube//Computers/Docker/Docker_videos.txt...\r\nUsage: youtube-dl [OPTIONS] URL [URL...]\r\n\nHi same problem but in my case on download meta data form youtube. \r\n\r\nexample in jenkins file download wideo and audio works.\r\n\r\n![Screenshot at Dec 10 07-58-46](https://github.com/user-attachments/assets/4ac2d54d-1c4b-4f9f-b074-2055380988f2)\r\n\r\n\r\n\r\n```bash\r\nstage('Download Video') {\r\n            steps {\r\n                timestamps {\r\n                    ansiColor('xterm') {\r\n                        sh'''\r\n                            #!/bin/bash\r\n                            set -e\r\n\r\n                            # Sprawdzenie obecno\u015bci youtube-dl\r\n                            if ! command -v youtube-dl >/dev/null 2>&1; \r\n                            then\r\n                                echo \"youtube-dl nie jest zainstalowane. Zainstaluj za pomoc\u0105: sudo apt install yt-dlp (lub odpowiednio skonfiguruj alias)\"\r\n                                exit 1\r\n                            fi\r\n\r\n                            # Sprawdzenie obecno\u015bci ffmpeg w dowolnej lokalizacji\r\n                            if ! command -v ffmpeg >/dev/null 2>&1; then\r\n                                echo \"ffmpeg nie jest zainstalowany. Zainstaluj za pomoc\u0105: sudo apt install ffmpeg\"\r\n                                exit 1\r\n                            fi\r\n\r\n                            echo \"GET ALL youtube-dl format video\"\r\n                            echo \" \"\r\n                            youtube-dl -F \"${YOUTUBE_VIDEO_URL}\"\r\n                            echo \" \"\r\n\r\n                            echo \"Start download best video: 4K, HD, SD\"\r\n                            video_url=\"${YOUTUBE_VIDEO_URL}\"\r\n\r\n                            # Lista preferowanych format\u00f3w (priorytet: 337, 315, 335, 299, 298)\r\n                            preferred_formats=\"337+140/315+140/335+140/299+140/298+140\"\r\n\r\n                            # Pobierz wideo w najlepszym dost\u0119pnym formacie\r\n                            echo \"Downloading best available format...\"\r\n                            youtube-dl -f \"$preferred_formats\" -o \"%(title)s.%(ext)s\" \"$video_url\"\r\n\r\n                            # Konwersja plik\u00f3w MKV na MP4, je\u015bli s\u0105 dost\u0119pne\r\n                            for i in *.mkv; do\r\n                                if [ -f \"$i\" ]; then\r\n                                    echo \"Converting $i to MP4...\"\r\n                                    ffmpeg -i \"$i\" -c copy \"${i%.*}.mp4\"\r\n                                    rm \"$i\"\r\n                                fi\r\n                            done\r\n\r\n                            echo \"Download and conversion completed.\"\r\n                        '''\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        stage('Download audio') {\r\n            steps {\r\n                timestamps {\r\n                    ansiColor('xterm') {\r\n                        sh'''\r\n                            set -e\r\n                            youtube-dl -f m4a -o \"%(title)s.%(ext)s\" ${YOUTUBE_VIDEO_URL}\r\n                        '''\r\n                    }\r\n                }\r\n            }\r\n        }\r\n```\r\n\r\nwhen i try download meta data from youtube this error show:\r\n\r\n```bash\r\nstage('Download video descryption and metadata') {\r\n            steps {\r\n                timestamps {\r\n                    ansiColor('xterm') {\r\n                        sh'''\r\n                            set -e\r\n                            youtube-dl --write-description --skip-download -o \"%(title)s.%(ext)s\" ${YOUTUBE_VIDEO_URL}\r\n                            title=$(youtube-dl --get-title --skip-download -o \"%(title)s.%(ext)s\" ${YOUTUBE_VIDEO_URL})\r\n                            echo \"${title}\" > ${title}.title\r\n                            youtube-dl --write-info-json --skip-download -o \"%(title)s.%(ext)s\" ${YOUTUBE_VIDEO_URL}\r\n                            python3 get_tags.py \"${YOUTUBE_VIDEO_URL}\"\r\n                        '''\r\n                    }  \r\n                }\r\n            }\r\n        }\r\n```\r\n![Screenshot at Dec 10 07-57-29](https://github.com/user-attachments/assets/a0017981-727c-402d-b0c5-ce6266f33403)\r\n\r\nError info:\r\n\r\n```bash\r\n19:34:12  [youtube] BlHcXfFINcM: Downloading web creator player API JSON\r\n19:34:12  [youtube] BlHcXfFINcM: Downloading m3u8 information\r\n19:34:13  [info] BlHcXfFINcM: Downloading 1 format(s): 337+251\r\n19:34:13  [info] Writing video metadata as JSON to: Prosty przepis na sa\u0142atk\u0119 z broku\u0142a i jajek.info.json\r\n19:34:13  + python3 get_tags.py https://youtu.be/BlHcXfFINcM\r\n19:34:[17](https://jenkins.koska.in/job/WORK/job/KULINARNEPRZYGODY/job/YOUTUBE_DOWNLOAD/job/DownloadVideo/149/pipeline-console/?start-byte=0&selected-node=67#log-17)  WARNING: [youtube] Falling back to generic n function search\r\n19:34:17  ERROR: Unable to extract nsig function code (caused by RegexNotFoundError('Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; see  https://github.com/ytdl-org/youtube-dl/#user-content-installation  on how to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; see  https://github.com/ytdl-org/youtube-dl/#user-content-installation  on how to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n19:34:18      return self._search_regex(\r\n19:34:18    File \"/usr/local/lib/python3.10/dist-packages/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n19:34:18      raise RegexNotFoundError('Unable to extract %s' % _name)\r\n19:34:18  youtube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; see  https://github.com/ytdl-org/youtube-dl/#user-content-installation  on how to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n19:34:18  \r\n19:[34](https://jenkins.koska.in/job/WORK/job/KULINARNEPRZYGODY/job/YOUTUBE_DOWNLOAD/job/DownloadVideo/149/pipeline-console/?start-byte=0&selected-node=67#log-34):18  During handling of the above exception, another exception occurred:\r\n19:34:18  \r\n19:34:18  Traceback (most recent call last):\r\n19:34:18    File \"/usr/local/lib/python3.10/dist-packages/youtube_dl/YoutubeDL.py\", line 875, in wrapper\r\n19:34:18      return func(self, *args, **kwargs)\r\n19:34:18    File \"/usr/local/lib/python3.10/dist-packages/youtube_dl/YoutubeDL.py\", line 971, in __extract_info\r\n19:34:18      ie_result = ie.extract(url)\r\n19:34:18    File \"/usr/local/lib/python3.10/dist-packages/youtube_dl/extractor/common.py\", line 571, in extract\r\n19:34:18      ie_result = self._real_extract(url)\r\n```\r\n\r\n\r\n\nIf yt-dlp [fixed](https://github.com/yt-dlp/yt-dlp/issues/11744#issuecomment-2521680838) this in `_extract_n_function_name()`, and ytdl has function with basically the same name and same function/purpose, then is it possible to adapt it to 'our' case?\r\n\n> To jest ten sam problem, co w przypadku [yt-dlp/yt-dlp#11744](https://github.com/yt-dlp/yt-dlp/issues/11744) . Mam poprawion\u0105 wersj\u0119 do PR _,_ kt\u00f3ra zostanie opublikowana po kontroli jako\u015bci.\r\n\r\nThis erroe still is in version https://github.com/yt-dlp/yt-dlp/releases/tag/2024.12.06\r\n\r\nI used this version, I only changed the name to match my jenkins pipeline (executable file)\r\n\r\nhttps://github.com/ytdl-org/youtube-dl/issues/32986#issuecomment-2530602819\r\n\r\n\n@TheRealMamuth If you have an issue with yt-dlp, please [open an issue there](https://github.com/yt-dlp/yt-dlp/issues/new/choose). youtube-dl and yt-dlp are different projects. You are the first person that reported the fix in yt-dlp 2024.12.06 not working.\n> @TheRealMamuth If you have an issue with yt-dlp, please [open an issue there](https://github.com/yt-dlp/yt-dlp/issues/new/choose). youtube-dl and yt-dlp are different projects. You are the first person that reported the fix in yt-dlp 2024.12.06 not working.\r\n\r\nthx - open issue yt-dlp https://github.com/yt-dlp/yt-dlp/issues/11781\nIt seems to be fixed in #32987. Tried that and it worked. One can test it [here](https://ufile.io/w28bg4to) (md5: e2e8b4a7cb7a40221b3b72003a43e5df), before it is released.\r\n\nAs [@seproDev kindly and accurately commented](https://github.com/yt-dlp/yt-dlp/issues/11744#issuecomment-2525082461), PR #32987 is somewhat misguided. Some fool maintainer relied on the implementation of JS string comparisons that some fool maintainer may have introduced in passing without matching tests, leading to a solution that apparently solved the issue but should not have. However, it is not unrecoverable.\r\n\r\nObviously anyone who wants to use the current PR code may do so but it could fail at any time; also, it will probably be force-pushed out by a better working solution.\r\n\r\nIn this new player, the challenge JS is testing the type of a variable that is set in a declaration outside the challenge JS, but that is still in scope. The (intended, I guess) effect is that the challenge JS returns the original nsig value if it doesn't know about the variable binding, and so 403 (nowadays) on download.\r\n\r\nThe _yt-dlp_ solution was to hard-code (a pattern matching) the guilty test and remove it from any challenge JS. This is effective and could be generalised to some extent, but seems unsatisfactory.\r\n\r\nAs we aren't going to be processing the whole player JS, some better hack is needed. Maybe there could be some way in which `typeof varName` in the challenge JS could search for `var varName = ...` in the whole player JS, but again there are endlessly many other ways in which the binding could have been created.\r\n\r\nA direct and also effective tactic can be to hook the evaluation of `return returnValue;` such that if `returnValue` is the original nsig value the statement behaves like `void returnValue;` instead, and the challenge keeps on running. Our interpreter doesn't know anything about nsig values, but the YT extractor can bind a magically named variable when calling the challenge code; then the interpreter can secretly look at that variable and not `return returnValue;` when `returnValue` matches the value of the magic variable. This is fine until the challenge starts raising an Exception (same technique can be applied) or mixing the value of the alien variable into the challenge calculation.\r\n\r\n\r\n\r\n \r\n\r\n ",
        "created_at": "2024-12-07T10:37:05Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_jsinterp.py\", \"test/test_youtube_signature.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 32845,
        "instance_id": "ytdl-org__youtube-dl-32845",
        "issue_numbers": [
            "32842",
            "32843"
        ],
        "base_commit": "a452f9437c8a3048f75fc12f75bcfd3eed78430f",
        "patch": "diff --git a/youtube_dl/extractor/youtube.py b/youtube_dl/extractor/youtube.py\nindex 90c16e172bd..2e31a89798e 100644\n--- a/youtube_dl/extractor/youtube.py\n+++ b/youtube_dl/extractor/youtube.py\n@@ -1636,7 +1636,7 @@ def _decrypt_nsig(self, n, video_id, player_url):\n         try:\n             jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\n         except ExtractorError as e:\n-            raise ExtractorError('Unable to extract nsig jsi, player_id, func_codefunction code', cause=e)\n+            raise ExtractorError('Unable to extract nsig function code', cause=e)\n         if self.get_param('youtube_print_sig_code'):\n             self.to_screen('Extracted nsig function from {0}:\\n{1}\\n'.format(\n                 player_id, func_code[1]))\n@@ -1658,8 +1658,14 @@ def _decrypt_nsig(self, n, video_id, player_url):\n \n     def _extract_n_function_name(self, jscode):\n         func_name, idx = self._search_regex(\n-            r'\\.get\\(\"n\"\\)\\)&&\\(b=(?P<nfunc>[a-zA-Z_$][\\w$]*)(?:\\[(?P<idx>\\d+)\\])?\\([\\w$]+\\)',\n-            jscode, 'Initial JS player n function name', group=('nfunc', 'idx'))\n+            # new: (b=String.fromCharCode(110),c=a.get(b))&&c=nfunc[idx](c)\n+            # old: .get(\"n\"))&&(b=nfunc[idx](b)\n+            # older: .get(\"n\"))&&(b=nfunc(b)\n+            r'''(?x)\n+                (?:\\(\\s*(?P<b>[a-z])\\s*=\\s*String\\s*\\.\\s*fromCharCode\\s*\\(\\s*110\\s*\\)\\s*,(?P<c>[a-z])\\s*=\\s*[a-z]\\s*)?\n+                \\.\\s*get\\s*\\(\\s*(?(b)(?P=b)|\"n\")(?:\\s*\\)){2}\\s*&&\\s*\\(\\s*(?(c)(?P=c)|b)\\s*=\\s*\n+                (?P<nfunc>[a-zA-Z_$][\\w$]*)(?:\\s*\\[(?P<idx>\\d+)\\])?\\s*\\(\\s*[\\w$]+\\s*\\)\n+            ''', jscode, 'Initial JS player n function name', group=('nfunc', 'idx'))\n         if not idx:\n             return func_name\n \n@@ -1679,17 +1685,7 @@ def _extract_n_function_code(self, video_id, player_url):\n \n         func_name = self._extract_n_function_name(jscode)\n \n-        # For redundancy\n-        func_code = self._search_regex(\n-            r'''(?xs)%s\\s*=\\s*function\\s*\\((?P<var>[\\w$]+)\\)\\s*\n-                     # NB: The end of the regex is intentionally kept strict\n-                     {(?P<code>.+?}\\s*return\\ [\\w$]+.join\\(\"\"\\))};''' % func_name,\n-            jscode, 'nsig function', group=('var', 'code'), default=None)\n-        if func_code:\n-            func_code = ([func_code[0]], func_code[1])\n-        else:\n-            self.write_debug('Extracting nsig function with jsinterp')\n-            func_code = jsi.extract_function_code(func_name)\n+        func_code = jsi.extract_function_code(func_name)\n \n         self.cache.store('youtube-nsig', player_id, func_code)\n         return jsi, player_id, func_code\ndiff --git a/youtube_dl/jsinterp.py b/youtube_dl/jsinterp.py\nindex 02adf667846..949f77775e8 100644\n--- a/youtube_dl/jsinterp.py\n+++ b/youtube_dl/jsinterp.py\n@@ -20,7 +20,9 @@\n     compat_basestring,\n     compat_chr,\n     compat_collections_chain_map as ChainMap,\n+    compat_filter as filter,\n     compat_itertools_zip_longest as zip_longest,\n+    compat_map as map,\n     compat_str,\n )\n \n@@ -252,7 +254,7 @@ def interpret_statement(self, stmt, local_vars, allow_recursion, *args, **kwargs\n                     cls.write('=> Raises:', e, '<-|', stmt, level=allow_recursion)\n                 raise\n             if cls.ENABLED and stmt.strip():\n-                if should_ret or not repr(ret) == stmt:\n+                if should_ret or repr(ret) != stmt:\n                     cls.write(['->', '=>'][should_ret], repr(ret), '<-|', stmt, level=allow_recursion)\n             return ret, should_ret\n         return interpret_statement\n@@ -365,6 +367,8 @@ def _separate(cls, expr, delim=',', max_split=None, skip_delims=None):\n         start, splits, pos, delim_len = 0, 0, 0, len(delim) - 1\n         in_quote, escaping, after_op, in_regex_char_group = None, False, True, False\n         skipping = 0\n+        if skip_delims:\n+            skip_delims = variadic(skip_delims)\n         for idx, char in enumerate(expr):\n             paren_delta = 0\n             if not in_quote:\n@@ -391,7 +395,7 @@ def _separate(cls, expr, delim=',', max_split=None, skip_delims=None):\n                 continue\n             elif pos == 0 and skip_delims:\n                 here = expr[idx:]\n-                for s in variadic(skip_delims):\n+                for s in skip_delims:\n                     if here.startswith(s) and s:\n                         skipping = len(s) - 1\n                         break\n@@ -412,7 +416,6 @@ def _separate_at_paren(cls, expr, delim=None):\n         if delim is None:\n             delim = expr and _MATCHING_PARENS[expr[0]]\n         separated = list(cls._separate(expr, delim, 1))\n-\n         if len(separated) < 2:\n             raise cls.Exception('No terminating paren {delim} in {expr!r:.5500}'.format(**locals()))\n         return separated[0][1:].strip(), separated[1].strip()\n@@ -487,6 +490,7 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n         # fails on (eg) if (...) stmt1; else stmt2;\n         sub_statements = list(self._separate(stmt, ';')) or ['']\n         expr = stmt = sub_statements.pop().strip()\n+\n         for sub_stmt in sub_statements:\n             ret, should_return = self.interpret_statement(sub_stmt, local_vars, allow_recursion)\n             if should_return:\n@@ -626,8 +630,7 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n                     if m.group('err'):\n                         catch_vars[m.group('err')] = err.error if isinstance(err, JS_Throw) else err\n                     catch_vars = local_vars.new_child(m=catch_vars)\n-                    err = None\n-                    pending = self.interpret_statement(sub_expr, catch_vars, allow_recursion)\n+                    err, pending = None, self.interpret_statement(sub_expr, catch_vars, allow_recursion)\n \n             m = self._FINALLY_RE.match(expr)\n             if m:\n@@ -801,16 +804,19 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n             if op in ('+', '-'):\n                 # simplify/adjust consecutive instances of these operators\n                 undone = 0\n-                while len(separated) > 1 and not separated[-1].strip():\n+                separated = [s.strip() for s in separated]\n+                while len(separated) > 1 and not separated[-1]:\n                     undone += 1\n                     separated.pop()\n                 if op == '-' and undone % 2 != 0:\n                     right_expr = op + right_expr\n                 elif op == '+':\n-                    while len(separated) > 1 and separated[-1].strip() in self.OP_CHARS:\n+                    while len(separated) > 1 and set(separated[-1]) <= self.OP_CHARS:\n+                        right_expr = separated.pop() + right_expr\n+                    if separated[-1][-1:] in self.OP_CHARS:\n                         right_expr = separated.pop() + right_expr\n                 # hanging op at end of left => unary + (strip) or - (push right)\n-                left_val = separated[-1]\n+                left_val = separated[-1] if separated else ''\n                 for dm_op in ('*', '%', '/', '**'):\n                     bodmas = tuple(self._separate(left_val, dm_op, skip_delims=skip_delim))\n                     if len(bodmas) > 1 and not bodmas[-1].strip():\n@@ -844,7 +850,7 @@ def assertion(cndn, msg):\n                     memb = member\n                     raise self.Exception('{memb} {msg}'.format(**locals()), expr=expr)\n \n-            def eval_method():\n+            def eval_method(variable, member):\n                 if (variable, member) == ('console', 'debug'):\n                     if Debugger.ENABLED:\n                         Debugger.write(self.interpret_expression('[{}]'.format(arg_str), local_vars, allow_recursion))\n@@ -852,6 +858,7 @@ def eval_method():\n                 types = {\n                     'String': compat_str,\n                     'Math': float,\n+                    'Array': list,\n                 }\n                 obj = local_vars.get(variable)\n                 if obj in (JS_Undefined, None):\n@@ -877,12 +884,29 @@ def eval_method():\n                     self.interpret_expression(v, local_vars, allow_recursion)\n                     for v in self._separate(arg_str)]\n \n-                if obj == compat_str:\n+                # Fixup prototype call\n+                if isinstance(obj, type):\n+                    new_member, rest = member.partition('.')[0::2]\n+                    if new_member == 'prototype':\n+                        new_member, func_prototype = rest.partition('.')[0::2]\n+                        assertion(argvals, 'takes one or more arguments')\n+                        assertion(isinstance(argvals[0], obj), 'must bind to type {0}'.format(obj))\n+                        if func_prototype == 'call':\n+                            obj = argvals.pop(0)\n+                        elif func_prototype == 'apply':\n+                            assertion(len(argvals) == 2, 'takes two arguments')\n+                            obj, argvals = argvals\n+                            assertion(isinstance(argvals, list), 'second argument must be a list')\n+                        else:\n+                            raise self.Exception('Unsupported Function method ' + func_prototype, expr)\n+                        member = new_member\n+\n+                if obj is compat_str:\n                     if member == 'fromCharCode':\n                         assertion(argvals, 'takes one or more arguments')\n                         return ''.join(map(compat_chr, argvals))\n                     raise self.Exception('Unsupported string method ' + member, expr=expr)\n-                elif obj == float:\n+                elif obj is float:\n                     if member == 'pow':\n                         assertion(len(argvals) == 2, 'takes two arguments')\n                         return argvals[0] ** argvals[1]\n@@ -907,12 +931,12 @@ def eval_method():\n                 elif member == 'splice':\n                     assertion(isinstance(obj, list), 'must be applied on a list')\n                     assertion(argvals, 'takes one or more arguments')\n-                    index, howMany = map(int, (argvals + [len(obj)])[:2])\n+                    index, how_many = map(int, (argvals + [len(obj)])[:2])\n                     if index < 0:\n                         index += len(obj)\n                     add_items = argvals[2:]\n                     res = []\n-                    for i in range(index, min(index + howMany, len(obj))):\n+                    for _ in range(index, min(index + how_many, len(obj))):\n                         res.append(obj.pop(index))\n                     for i, item in enumerate(add_items):\n                         obj.insert(index + i, item)\n@@ -970,11 +994,11 @@ def eval_method():\n \n             if remaining:\n                 ret, should_abort = self.interpret_statement(\n-                    self._named_object(local_vars, eval_method()) + remaining,\n+                    self._named_object(local_vars, eval_method(variable, member)) + remaining,\n                     local_vars, allow_recursion)\n                 return ret, should_return or should_abort\n             else:\n-                return eval_method(), should_return\n+                return eval_method(variable, member), should_return\n \n         elif md.get('function'):\n             fname = m.group('fname')\n@@ -1002,28 +1026,25 @@ def interpret_iter(self, list_txt, local_vars, allow_recursion):\n     def extract_object(self, objname):\n         _FUNC_NAME_RE = r'''(?:[a-zA-Z$0-9]+|\"[a-zA-Z$0-9]+\"|'[a-zA-Z$0-9]+')'''\n         obj = {}\n-        fields = None\n-        for obj_m in re.finditer(\n+        fields = next(filter(None, (\n+            obj_m.group('fields') for obj_m in re.finditer(\n                 r'''(?xs)\n                     {0}\\s*\\.\\s*{1}|{1}\\s*=\\s*\\{{\\s*\n                         (?P<fields>({2}\\s*:\\s*function\\s*\\(.*?\\)\\s*\\{{.*?}}(?:,\\s*)?)*)\n                     }}\\s*;\n                 '''.format(_NAME_RE, re.escape(objname), _FUNC_NAME_RE),\n-                self.code):\n-            fields = obj_m.group('fields')\n-            if fields:\n-                break\n-        else:\n+                self.code))), None)\n+        if not fields:\n             raise self.Exception('Could not find object ' + objname)\n         # Currently, it only supports function definitions\n-        fields_m = re.finditer(\n-            r'''(?x)\n-                (?P<key>%s)\\s*:\\s*function\\s*\\((?P<args>(?:%s|,)*)\\){(?P<code>[^}]+)}\n-            ''' % (_FUNC_NAME_RE, _NAME_RE),\n-            fields)\n-        for f in fields_m:\n+        for f in re.finditer(\n+                r'''(?x)\n+                    (?P<key>%s)\\s*:\\s*function\\s*\\((?P<args>(?:%s|,)*)\\){(?P<code>[^}]+)}\n+                ''' % (_FUNC_NAME_RE, _NAME_RE),\n+                fields):\n             argnames = self.build_arglist(f.group('args'))\n-            obj[remove_quotes(f.group('key'))] = self.build_function(argnames, f.group('code'))\n+            name = remove_quotes(f.group('key'))\n+            obj[name] = function_with_repr(self.build_function(argnames, f.group('code')), 'F<{0}>'.format(name))\n \n         return obj\n \n@@ -1058,7 +1079,7 @@ def extract_function_code(self, funcname):\n     def extract_function(self, funcname):\n         return function_with_repr(\n             self.extract_function_from_code(*self.extract_function_code(funcname)),\n-            'F<%s>' % (funcname, ))\n+            'F<%s>' % (funcname,))\n \n     def extract_function_from_code(self, argnames, code, *global_stack):\n         local_vars = {}\n@@ -1067,7 +1088,7 @@ def extract_function_from_code(self, argnames, code, *global_stack):\n             if mobj is None:\n                 break\n             start, body_start = mobj.span()\n-            body, remaining = self._separate_at_paren(code[body_start - 1:], '}')\n+            body, remaining = self._separate_at_paren(code[body_start - 1:])\n             name = self._named_object(local_vars, self.extract_function_from_code(\n                 [x.strip() for x in mobj.group('args').split(',')],\n                 body, local_vars, *global_stack))\n@@ -1095,8 +1116,7 @@ def build_function(self, argnames, code, *global_stack):\n         argnames = tuple(argnames)\n \n         def resf(args, kwargs={}, allow_recursion=100):\n-            global_stack[0].update(\n-                zip_longest(argnames, args, fillvalue=None))\n+            global_stack[0].update(zip_longest(argnames, args, fillvalue=None))\n             global_stack[0].update(kwargs)\n             var_stack = LocalNameSpace(*global_stack)\n             ret, should_abort = self.interpret_statement(code.replace('\\n', ' '), var_stack, allow_recursion - 1)\ndiff --git a/youtube_dl/utils.py b/youtube_dl/utils.py\nindex 3ec9d381190..ac1e78002b3 100644\n--- a/youtube_dl/utils.py\n+++ b/youtube_dl/utils.py\n@@ -6604,27 +6604,53 @@ class _UnsafeExtensionError(Exception):\n         ),\n         # video\n         MEDIA_EXTENSIONS.video, (\n-            'avif',\n+            'asx',\n             'ismv',\n+            'm2t',\n             'm2ts',\n+            'm2v',\n             'm4s',\n             'mng',\n+            'mp2v',\n+            'mp4v',\n+            'mpe',\n             'mpeg',\n+            'mpeg1',\n+            'mpeg2',\n+            'mpeg4',\n+            'mxf',\n+            'ogm',\n             'qt',\n+            'rm',\n             'swf',\n             'ts',\n+            'vob',\n             'vp9',\n-            'wvm',\n         ),\n         # audio\n         MEDIA_EXTENSIONS.audio, (\n+            '3ga',\n+            'ac3',\n+            'adts',\n+            'aif',\n+            'au',\n+            'dts',\n             'isma',\n+            'it',\n             'mid',\n+            'mod',\n             'mpga',\n+            'mp1',\n+            'mp2',\n+            'mp4a',\n+            'mpa',\n             'ra',\n+            'shn',\n+            'xm',\n         ),\n         # image\n         MEDIA_EXTENSIONS.thumbnails, (\n+            'avif',\n             'bmp',\n             'gif',\n             'ico',\n@@ -6634,6 +6660,7 @@ class _UnsafeExtensionError(Exception):\n             'jxl',\n             'svg',\n             'tif',\n+            'tiff',\n             'wbmp',\n         ),\n         # subtitle\n@@ -6641,10 +6668,15 @@ class _UnsafeExtensionError(Exception):\n             'dfxp',\n             'fs',\n             'ismt',\n+            'json3',\n             'sami',\n             'scc',\n+            'srv1',\n+            'srv2',\n+            'srv3',\n             'ssa',\n             'tt',\n+            'xml',\n         ),\n         # others\n         MEDIA_EXTENSIONS.manifests,\n@@ -6658,7 +6690,6 @@ class _UnsafeExtensionError(Exception):\n             # 'swp',\n             # 'url',\n             # 'webloc',\n-            # 'xml',\n         )))\n \n     def __init__(self, extension):\n",
        "test_patch": "diff --git a/test/test_jsinterp.py b/test/test_jsinterp.py\nindex da8e980207a..104e766be36 100644\n--- a/test/test_jsinterp.py\n+++ b/test/test_jsinterp.py\n@@ -11,194 +11,146 @@\n import math\n import re\n \n+from youtube_dl.compat import compat_str\n from youtube_dl.jsinterp import JS_Undefined, JSInterpreter\n \n+NaN = object()\n \n-class TestJSInterpreter(unittest.TestCase):\n-    def test_basic(self):\n-        jsi = JSInterpreter('function x(){;}')\n-        self.assertEqual(jsi.call_function('x'), None)\n-        self.assertEqual(repr(jsi.extract_function('x')), 'F<x>')\n-\n-        jsi = JSInterpreter('function x3(){return 42;}')\n-        self.assertEqual(jsi.call_function('x3'), 42)\n \n-        jsi = JSInterpreter('function x3(){42}')\n-        self.assertEqual(jsi.call_function('x3'), None)\n+class TestJSInterpreter(unittest.TestCase):\n+    def _test(self, jsi_or_code, expected, func='f', args=()):\n+        if isinstance(jsi_or_code, compat_str):\n+            jsi_or_code = JSInterpreter(jsi_or_code)\n+        got = jsi_or_code.call_function(func, *args)\n+        if expected is NaN:\n+            self.assertTrue(math.isnan(got), '{0} is not NaN'.format(got))\n+        else:\n+            self.assertEqual(got, expected)\n \n-        jsi = JSInterpreter('var x5 = function(){return 42;}')\n-        self.assertEqual(jsi.call_function('x5'), 42)\n+    def test_basic(self):\n+        jsi = JSInterpreter('function f(){;}')\n+        self.assertEqual(repr(jsi.extract_function('f')), 'F<f>')\n+        self._test(jsi, None)\n \n-    def test_calc(self):\n-        jsi = JSInterpreter('function x4(a){return 2*a+1;}')\n-        self.assertEqual(jsi.call_function('x4', 3), 7)\n+        self._test('function f(){return 42;}', 42)\n+        self._test('function f(){42}', None)\n+        self._test('var f = function(){return 42;}', 42)\n \n     def test_add(self):\n-        jsi = JSInterpreter('function f(){return 42 + 7;}')\n-        self.assertEqual(jsi.call_function('f'), 49)\n-        jsi = JSInterpreter('function f(){return 42 + undefined;}')\n-        self.assertTrue(math.isnan(jsi.call_function('f')))\n-        jsi = JSInterpreter('function f(){return 42 + null;}')\n-        self.assertEqual(jsi.call_function('f'), 42)\n+        self._test('function f(){return 42 + 7;}', 49)\n+        self._test('function f(){return 42 + undefined;}', NaN)\n+        self._test('function f(){return 42 + null;}', 42)\n \n     def test_sub(self):\n-        jsi = JSInterpreter('function f(){return 42 - 7;}')\n-        self.assertEqual(jsi.call_function('f'), 35)\n-        jsi = JSInterpreter('function f(){return 42 - undefined;}')\n-        self.assertTrue(math.isnan(jsi.call_function('f')))\n-        jsi = JSInterpreter('function f(){return 42 - null;}')\n-        self.assertEqual(jsi.call_function('f'), 42)\n+        self._test('function f(){return 42 - 7;}', 35)\n+        self._test('function f(){return 42 - undefined;}', NaN)\n+        self._test('function f(){return 42 - null;}', 42)\n \n     def test_mul(self):\n-        jsi = JSInterpreter('function f(){return 42 * 7;}')\n-        self.assertEqual(jsi.call_function('f'), 294)\n-        jsi = JSInterpreter('function f(){return 42 * undefined;}')\n-        self.assertTrue(math.isnan(jsi.call_function('f')))\n-        jsi = JSInterpreter('function f(){return 42 * null;}')\n-        self.assertEqual(jsi.call_function('f'), 0)\n+        self._test('function f(){return 42 * 7;}', 294)\n+        self._test('function f(){return 42 * undefined;}', NaN)\n+        self._test('function f(){return 42 * null;}', 0)\n \n     def test_div(self):\n         jsi = JSInterpreter('function f(a, b){return a / b;}')\n-        self.assertTrue(math.isnan(jsi.call_function('f', 0, 0)))\n-        self.assertTrue(math.isnan(jsi.call_function('f', JS_Undefined, 1)))\n-        self.assertTrue(math.isinf(jsi.call_function('f', 2, 0)))\n-        self.assertEqual(jsi.call_function('f', 0, 3), 0)\n+        self._test(jsi, NaN, args=(0, 0))\n+        self._test(jsi, NaN, args=(JS_Undefined, 1))\n+        self._test(jsi, float('inf'), args=(2, 0))\n+        self._test(jsi, 0, args=(0, 3))\n \n     def test_mod(self):\n-        jsi = JSInterpreter('function f(){return 42 % 7;}')\n-        self.assertEqual(jsi.call_function('f'), 0)\n-        jsi = JSInterpreter('function f(){return 42 % 0;}')\n-        self.assertTrue(math.isnan(jsi.call_function('f')))\n-        jsi = JSInterpreter('function f(){return 42 % undefined;}')\n-        self.assertTrue(math.isnan(jsi.call_function('f')))\n+        self._test('function f(){return 42 % 7;}', 0)\n+        self._test('function f(){return 42 % 0;}', NaN)\n+        self._test('function f(){return 42 % undefined;}', NaN)\n \n     def test_exp(self):\n-        jsi = JSInterpreter('function f(){return 42 ** 2;}')\n-        self.assertEqual(jsi.call_function('f'), 1764)\n-        jsi = JSInterpreter('function f(){return 42 ** undefined;}')\n-        self.assertTrue(math.isnan(jsi.call_function('f')))\n-        jsi = JSInterpreter('function f(){return 42 ** null;}')\n-        self.assertEqual(jsi.call_function('f'), 1)\n-        jsi = JSInterpreter('function f(){return undefined ** 42;}')\n-        self.assertTrue(math.isnan(jsi.call_function('f')))\n+        self._test('function f(){return 42 ** 2;}', 1764)\n+        self._test('function f(){return 42 ** undefined;}', NaN)\n+        self._test('function f(){return 42 ** null;}', 1)\n+        self._test('function f(){return undefined ** 42;}', NaN)\n+\n+    def test_calc(self):\n+        self._test('function f(a){return 2*a+1;}', 7, args=[3])\n \n     def test_empty_return(self):\n-        jsi = JSInterpreter('function f(){return; y()}')\n-        self.assertEqual(jsi.call_function('f'), None)\n+        self._test('function f(){return; y()}', None)\n \n     def test_morespace(self):\n-        jsi = JSInterpreter('function x (a) { return 2 * a + 1 ; }')\n-        self.assertEqual(jsi.call_function('x', 3), 7)\n-\n-        jsi = JSInterpreter('function f () { x =  2  ; return x; }')\n-        self.assertEqual(jsi.call_function('f'), 2)\n+        self._test('function f (a) { return 2 * a + 1 ; }', 7, args=[3])\n+        self._test('function f () { x =  2  ; return x; }', 2)\n \n     def test_strange_chars(self):\n-        jsi = JSInterpreter('function $_xY1 ($_axY1) { var $_axY2 = $_axY1 + 1; return $_axY2; }')\n-        self.assertEqual(jsi.call_function('$_xY1', 20), 21)\n+        self._test('function $_xY1 ($_axY1) { var $_axY2 = $_axY1 + 1; return $_axY2; }',\n+                   21, args=[20], func='$_xY1')\n \n     def test_operators(self):\n-        jsi = JSInterpreter('function f(){return 1 << 5;}')\n-        self.assertEqual(jsi.call_function('f'), 32)\n-\n-        jsi = JSInterpreter('function f(){return 2 ** 5}')\n-        self.assertEqual(jsi.call_function('f'), 32)\n-\n-        jsi = JSInterpreter('function f(){return 19 & 21;}')\n-        self.assertEqual(jsi.call_function('f'), 17)\n-\n-        jsi = JSInterpreter('function f(){return 11 >> 2;}')\n-        self.assertEqual(jsi.call_function('f'), 2)\n-\n-        jsi = JSInterpreter('function f(){return []? 2+3: 4;}')\n-        self.assertEqual(jsi.call_function('f'), 5)\n-\n-        jsi = JSInterpreter('function f(){return 1 == 2}')\n-        self.assertEqual(jsi.call_function('f'), False)\n-\n-        jsi = JSInterpreter('function f(){return 0 && 1 || 2;}')\n-        self.assertEqual(jsi.call_function('f'), 2)\n-\n-        jsi = JSInterpreter('function f(){return 0 ?? 42;}')\n-        self.assertEqual(jsi.call_function('f'), 0)\n-\n-        jsi = JSInterpreter('function f(){return \"life, the universe and everything\" < 42;}')\n-        self.assertFalse(jsi.call_function('f'))\n+        self._test('function f(){return 1 << 5;}', 32)\n+        self._test('function f(){return 2 ** 5}', 32)\n+        self._test('function f(){return 19 & 21;}', 17)\n+        self._test('function f(){return 11 >> 2;}', 2)\n+        self._test('function f(){return []? 2+3: 4;}', 5)\n+        self._test('function f(){return 1 == 2}', False)\n+        self._test('function f(){return 0 && 1 || 2;}', 2)\n+        self._test('function f(){return 0 ?? 42;}', 0)\n+        self._test('function f(){return \"life, the universe and everything\" < 42;}', False)\n+        # https://github.com/ytdl-org/youtube-dl/issues/32815\n+        self._test('function f(){return 0  - 7 * - 6;}', 42)\n \n     def test_array_access(self):\n-        jsi = JSInterpreter('function f(){var x = [1,2,3]; x[0] = 4; x[0] = 5; x[2.0] = 7; return x;}')\n-        self.assertEqual(jsi.call_function('f'), [5, 2, 7])\n+        self._test('function f(){var x = [1,2,3]; x[0] = 4; x[0] = 5; x[2.0] = 7; return x;}', [5, 2, 7])\n \n     def test_parens(self):\n-        jsi = JSInterpreter('function f(){return (1) + (2) * ((( (( (((((3)))))) )) ));}')\n-        self.assertEqual(jsi.call_function('f'), 7)\n-\n-        jsi = JSInterpreter('function f(){return (1 + 2) * 3;}')\n-        self.assertEqual(jsi.call_function('f'), 9)\n+        self._test('function f(){return (1) + (2) * ((( (( (((((3)))))) )) ));}', 7)\n+        self._test('function f(){return (1 + 2) * 3;}', 9)\n \n     def test_quotes(self):\n-        jsi = JSInterpreter(r'function f(){return \"a\\\"\\\\(\"}')\n-        self.assertEqual(jsi.call_function('f'), r'a\"\\(')\n+        self._test(r'function f(){return \"a\\\"\\\\(\"}', r'a\"\\(')\n \n     def test_assignments(self):\n-        jsi = JSInterpreter('function f(){var x = 20; x = 30 + 1; return x;}')\n-        self.assertEqual(jsi.call_function('f'), 31)\n-\n-        jsi = JSInterpreter('function f(){var x = 20; x += 30 + 1; return x;}')\n-        self.assertEqual(jsi.call_function('f'), 51)\n-\n-        jsi = JSInterpreter('function f(){var x = 20; x -= 30 + 1; return x;}')\n-        self.assertEqual(jsi.call_function('f'), -11)\n+        self._test('function f(){var x = 20; x = 30 + 1; return x;}', 31)\n+        self._test('function f(){var x = 20; x += 30 + 1; return x;}', 51)\n+        self._test('function f(){var x = 20; x -= 30 + 1; return x;}', -11)\n \n+    @unittest.skip('Not yet fully implemented')\n     def test_comments(self):\n-        'Skipping: Not yet fully implemented'\n-        return\n-        jsi = JSInterpreter('''\n-        function x() {\n-            var x = /* 1 + */ 2;\n-            var y = /* 30\n-            * 40 */ 50;\n-            return x + y;\n-        }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 52)\n-\n-        jsi = JSInterpreter('''\n-        function f() {\n-            var x = \"/*\";\n-            var y = 1 /* comment */ + 2;\n-            return y;\n-        }\n-        ''')\n-        self.assertEqual(jsi.call_function('f'), 3)\n+        self._test('''\n+            function f() {\n+                var x = /* 1 + */ 2;\n+                var y = /* 30\n+                * 40 */ 50;\n+                return x + y;\n+            }\n+        ''', 52)\n+\n+        self._test('''\n+            function f() {\n+                var x = \"/*\";\n+                var y = 1 /* comment */ + 2;\n+                return y;\n+            }\n+        ''', 3)\n \n     def test_precedence(self):\n-        jsi = JSInterpreter('''\n-        function x() {\n-            var a = [10, 20, 30, 40, 50];\n-            var b = 6;\n-            a[0]=a[b%a.length];\n-            return a;\n-        }''')\n-        self.assertEqual(jsi.call_function('x'), [20, 20, 30, 40, 50])\n+        self._test('''\n+            function f() {\n+                var a = [10, 20, 30, 40, 50];\n+                var b = 6;\n+                a[0]=a[b%a.length];\n+                return a;\n+            }\n+        ''', [20, 20, 30, 40, 50])\n \n     def test_builtins(self):\n-        jsi = JSInterpreter('''\n-        function x() { return NaN }\n-        ''')\n-        self.assertTrue(math.isnan(jsi.call_function('x')))\n+        self._test('function f() { return NaN }', NaN)\n \n     def test_Date(self):\n-        jsi = JSInterpreter('''\n-        function x(dt) { return new Date(dt) - 0; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x', 'Wednesday 31 December 1969 18:01:26 MDT'), 86000)\n+        self._test('function f() { return new Date(\"Wednesday 31 December 1969 18:01:26 MDT\") - 0; }', 86000)\n \n+        jsi = JSInterpreter('function f(dt) { return new Date(dt) - 0; }')\n         # date format m/d/y\n-        self.assertEqual(jsi.call_function('x', '12/31/1969 18:01:26 MDT'), 86000)\n-\n+        self._test(jsi, 86000, args=['12/31/1969 18:01:26 MDT'])\n         # epoch 0\n-        self.assertEqual(jsi.call_function('x', '1 January 1970 00:00:00 UTC'), 0)\n+        self._test(jsi, 0, args=['1 January 1970 00:00:00 UTC'])\n \n     def test_call(self):\n         jsi = JSInterpreter('''\n@@ -206,179 +158,115 @@ def test_call(self):\n         function y(a) { return x() + (a?a:0); }\n         function z() { return y(3); }\n         ''')\n-        self.assertEqual(jsi.call_function('z'), 5)\n-        self.assertEqual(jsi.call_function('y'), 2)\n+        self._test(jsi, 5, func='z')\n+        self._test(jsi, 2, func='y')\n \n     def test_if(self):\n-        jsi = JSInterpreter('''\n-        function x() {\n+        self._test('''\n+            function f() {\n             let a = 9;\n             if (0==0) {a++}\n             return a\n-        }''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n+            }\n+        ''', 10)\n \n-        jsi = JSInterpreter('''\n-        function x() {\n+        self._test('''\n+            function f() {\n             if (0==0) {return 10}\n-        }''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n+            }\n+        ''', 10)\n \n-        jsi = JSInterpreter('''\n-        function x() {\n+        self._test('''\n+            function f() {\n             if (0!=0) {return 1}\n             else {return 10}\n-        }''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n-\n-        \"\"\"  # Unsupported\n-        jsi = JSInterpreter('''\n-        function x() {\n-            if (0!=0) return 1;\n-            else {return 10}\n-        }''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n-        \"\"\"\n+            }\n+        ''', 10)\n \n     def test_elseif(self):\n-        jsi = JSInterpreter('''\n-        function x() {\n-            if (0!=0) {return 1}\n-            else if (1==0) {return 2}\n-            else {return 10}\n-        }''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n-\n-        \"\"\"  # Unsupported\n-        jsi = JSInterpreter('''\n-        function x() {\n-            if (0!=0) return 1;\n-            else if (1==0) {return 2}\n-            else {return 10}\n-        }''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n-        # etc\n-        \"\"\"\n+        self._test('''\n+            function f() {\n+                if (0!=0) {return 1}\n+                else if (1==0) {return 2}\n+                else {return 10}\n+            }\n+        ''', 10)\n \n     def test_for_loop(self):\n-        # function x() { a=0; for (i=0; i-10; i++) {a++} a }\n-        jsi = JSInterpreter('''\n-        function x() { a=0; for (i=0; i-10; i++) {a++} return a }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n+        self._test('function f() { a=0; for (i=0; i-10; i++) {a++} return a }', 10)\n \n     def test_while_loop(self):\n-        # function x() { a=0; while (a<10) {a++} a }\n-        jsi = JSInterpreter('''\n-        function x() { a=0; while (a<10) {a++} return a }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n+        self._test('function f() { a=0; while (a<10) {a++} return a }', 10)\n \n     def test_switch(self):\n         jsi = JSInterpreter('''\n-        function x(f) { switch(f){\n-            case 1:f+=1;\n-            case 2:f+=2;\n-            case 3:f+=3;break;\n-            case 4:f+=4;\n-            default:f=0;\n-        } return f }\n+            function f(x) { switch(x){\n+                case 1:x+=1;\n+                case 2:x+=2;\n+                case 3:x+=3;break;\n+                case 4:x+=4;\n+                default:x=0;\n+            } return x }\n         ''')\n-        self.assertEqual(jsi.call_function('x', 1), 7)\n-        self.assertEqual(jsi.call_function('x', 3), 6)\n-        self.assertEqual(jsi.call_function('x', 5), 0)\n+        self._test(jsi, 7, args=[1])\n+        self._test(jsi, 6, args=[3])\n+        self._test(jsi, 0, args=[5])\n \n     def test_switch_default(self):\n         jsi = JSInterpreter('''\n-        function x(f) { switch(f){\n-            case 2: f+=2;\n-            default: f-=1;\n-            case 5:\n-            case 6: f+=6;\n-            case 0: break;\n-            case 1: f+=1;\n-        } return f }\n+            function f(x) { switch(x){\n+                case 2: x+=2;\n+                default: x-=1;\n+                case 5:\n+                case 6: x+=6;\n+                case 0: break;\n+                case 1: x+=1;\n+            } return x }\n         ''')\n-        self.assertEqual(jsi.call_function('x', 1), 2)\n-        self.assertEqual(jsi.call_function('x', 5), 11)\n-        self.assertEqual(jsi.call_function('x', 9), 14)\n+        self._test(jsi, 2, args=[1])\n+        self._test(jsi, 11, args=[5])\n+        self._test(jsi, 14, args=[9])\n \n     def test_try(self):\n-        jsi = JSInterpreter('''\n-        function x() { try{return 10} catch(e){return 5} }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 10)\n+        self._test('function f() { try{return 10} catch(e){return 5} }', 10)\n \n     def test_catch(self):\n-        jsi = JSInterpreter('''\n-        function x() { try{throw 10} catch(e){return 5} }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 5)\n+        self._test('function f() { try{throw 10} catch(e){return 5} }', 5)\n \n     def test_finally(self):\n-        jsi = JSInterpreter('''\n-        function x() { try{throw 10} finally {return 42} }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 42)\n-        jsi = JSInterpreter('''\n-        function x() { try{throw 10} catch(e){return 5} finally {return 42} }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 42)\n+        self._test('function f() { try{throw 10} finally {return 42} }', 42)\n+        self._test('function f() { try{throw 10} catch(e){return 5} finally {return 42} }', 42)\n \n     def test_nested_try(self):\n-        jsi = JSInterpreter('''\n-        function x() {try {\n-            try{throw 10} finally {throw 42}\n+        self._test('''\n+            function f() {try {\n+                try{throw 10} finally {throw 42}\n             } catch(e){return 5} }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 5)\n+        ''', 5)\n \n     def test_for_loop_continue(self):\n-        jsi = JSInterpreter('''\n-        function x() { a=0; for (i=0; i-10; i++) { continue; a++ } return a }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 0)\n+        self._test('function f() { a=0; for (i=0; i-10; i++) { continue; a++ } return a }', 0)\n \n     def test_for_loop_break(self):\n-        jsi = JSInterpreter('''\n-        function x() { a=0; for (i=0; i-10; i++) { break; a++ } return a }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 0)\n+        self._test('function f() { a=0; for (i=0; i-10; i++) { break; a++ } return a }', 0)\n \n     def test_for_loop_try(self):\n-        jsi = JSInterpreter('''\n-        function x() {\n-            for (i=0; i-10; i++) { try { if (i == 5) throw i} catch {return 10} finally {break} };\n-            return 42 }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 42)\n+        self._test('''\n+            function f() {\n+                for (i=0; i-10; i++) { try { if (i == 5) throw i} catch {return 10} finally {break} };\n+                return 42 }\n+        ''', 42)\n \n     def test_literal_list(self):\n-        jsi = JSInterpreter('''\n-        function x() { return [1, 2, \"asdf\", [5, 6, 7]][3] }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [5, 6, 7])\n+        self._test('function f() { return [1, 2, \"asdf\", [5, 6, 7]][3] }', [5, 6, 7])\n \n     def test_comma(self):\n-        jsi = JSInterpreter('''\n-        function x() { a=5; a -= 1, a+=3; return a }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 7)\n-        jsi = JSInterpreter('''\n-        function x() { a=5; return (a -= 1, a+=3, a); }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 7)\n-\n-        jsi = JSInterpreter('''\n-        function x() { return (l=[0,1,2,3], function(a, b){return a+b})((l[1], l[2]), l[3]) }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 5)\n+        self._test('function f() { a=5; a -= 1, a+=3; return a }', 7)\n+        self._test('function f() { a=5; return (a -= 1, a+=3, a); }', 7)\n+        self._test('function f() { return (l=[0,1,2,3], function(a, b){return a+b})((l[1], l[2]), l[3]) }', 5)\n \n     def test_void(self):\n-        jsi = JSInterpreter('''\n-        function x() { return void 42; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), None)\n+        self._test('function f() { return void 42; }', None)\n \n     def test_return_function(self):\n         jsi = JSInterpreter('''\n@@ -387,110 +275,60 @@ def test_return_function(self):\n         self.assertEqual(jsi.call_function('x')([]), 1)\n \n     def test_null(self):\n-        jsi = JSInterpreter('''\n-        function x() { return null; }\n-        ''')\n-        self.assertIs(jsi.call_function('x'), None)\n-\n-        jsi = JSInterpreter('''\n-        function x() { return [null > 0, null < 0, null == 0, null === 0]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [False, False, False, False])\n-\n-        jsi = JSInterpreter('''\n-        function x() { return [null >= 0, null <= 0]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [True, True])\n+        self._test('function f() { return null; }', None)\n+        self._test('function f() { return [null > 0, null < 0, null == 0, null === 0]; }',\n+                   [False, False, False, False])\n+        self._test('function f() { return [null >= 0, null <= 0]; }', [True, True])\n \n     def test_undefined(self):\n-        jsi = JSInterpreter('''\n-        function x() { return undefined === undefined; }\n-        ''')\n-        self.assertTrue(jsi.call_function('x'))\n-\n-        jsi = JSInterpreter('''\n-        function x() { return undefined; }\n-        ''')\n-        self.assertIs(jsi.call_function('x'), JS_Undefined)\n-\n-        jsi = JSInterpreter('''\n-        function x() { let v; return v; }\n-        ''')\n-        self.assertIs(jsi.call_function('x'), JS_Undefined)\n-\n-        jsi = JSInterpreter('''\n-        function x() { return [undefined === undefined, undefined == undefined, undefined < undefined, undefined > undefined]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [True, True, False, False])\n-\n-        jsi = JSInterpreter('''\n-        function x() { return [undefined === 0, undefined == 0, undefined < 0, undefined > 0]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [False, False, False, False])\n-\n-        jsi = JSInterpreter('''\n-        function x() { return [undefined >= 0, undefined <= 0]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [False, False])\n-\n-        jsi = JSInterpreter('''\n-        function x() { return [undefined > null, undefined < null, undefined == null, undefined === null]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [False, False, True, False])\n-\n-        jsi = JSInterpreter('''\n-        function x() { return [undefined === null, undefined == null, undefined < null, undefined > null]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [False, True, False, False])\n-\n-        jsi = JSInterpreter('''\n-        function x() { let v; return [42+v, v+42, v**42, 42**v, 0**v]; }\n+        self._test('function f() { return undefined === undefined; }', True)\n+        self._test('function f() { return undefined; }', JS_Undefined)\n+        self._test('function f() {return undefined ?? 42; }', 42)\n+        self._test('function f() { let v; return v; }', JS_Undefined)\n+        self._test('function f() { let v; return v**0; }', 1)\n+        self._test('function f() { let v; return [v>42, v<=42, v&&42, 42&&v]; }',\n+                   [False, False, JS_Undefined, JS_Undefined])\n+\n+        self._test('''\n+            function f() { return [\n+                undefined === undefined,\n+                undefined == undefined,\n+                undefined == null\n+            ]; }\n+        ''', [True] * 3)\n+        self._test('''\n+            function f() { return [\n+                undefined < undefined,\n+                undefined > undefined,\n+                undefined === 0,\n+                undefined == 0,\n+                undefined < 0,\n+                undefined > 0,\n+                undefined >= 0,\n+                undefined <= 0,\n+                undefined > null,\n+                undefined < null,\n+                undefined === null\n+            ]; }\n+        ''', [False] * 11)\n+\n+        jsi = JSInterpreter('''\n+            function x() { let v; return [42+v, v+42, v**42, 42**v, 0**v]; }\n         ''')\n         for y in jsi.call_function('x'):\n             self.assertTrue(math.isnan(y))\n \n-        jsi = JSInterpreter('''\n-        function x() { let v; return v**0; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 1)\n-\n-        jsi = JSInterpreter('''\n-        function x() { let v; return [v>42, v<=42, v&&42, 42&&v]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [False, False, JS_Undefined, JS_Undefined])\n-\n-        jsi = JSInterpreter('function x(){return undefined ?? 42; }')\n-        self.assertEqual(jsi.call_function('x'), 42)\n-\n     def test_object(self):\n-        jsi = JSInterpreter('''\n-        function x() { return {}; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), {})\n-\n-        jsi = JSInterpreter('''\n-        function x() { let a = {m1: 42, m2: 0 }; return [a[\"m1\"], a.m2]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), [42, 0])\n-\n-        jsi = JSInterpreter('''\n-        function x() { let a; return a?.qq; }\n-        ''')\n-        self.assertIs(jsi.call_function('x'), JS_Undefined)\n-\n-        jsi = JSInterpreter('''\n-        function x() { let a = {m1: 42, m2: 0 }; return a?.qq; }\n-        ''')\n-        self.assertIs(jsi.call_function('x'), JS_Undefined)\n+        self._test('function f() { return {}; }', {})\n+        self._test('function f() { let a = {m1: 42, m2: 0 }; return [a[\"m1\"], a.m2]; }', [42, 0])\n+        self._test('function f() { let a; return a?.qq; }', JS_Undefined)\n+        self._test('function f() { let a = {m1: 42, m2: 0 }; return a?.qq; }', JS_Undefined)\n \n     def test_regex(self):\n-        jsi = JSInterpreter('''\n-        function x() { let a=/,,[/,913,/](,)}/; }\n-        ''')\n-        self.assertIs(jsi.call_function('x'), None)\n+        self._test('function f() { let a=/,,[/,913,/](,)}/; }', None)\n \n         jsi = JSInterpreter('''\n-        function x() { let a=/,,[/,913,/](,)}/; \"\".replace(a, \"\"); return a; }\n+            function x() { let a=/,,[/,913,/](,)}/; \"\".replace(a, \"\"); return a; }\n         ''')\n         attrs = set(('findall', 'finditer', 'match', 'scanner', 'search',\n                      'split', 'sub', 'subn'))\n@@ -500,94 +338,92 @@ def test_regex(self):\n         self.assertSetEqual(set(dir(jsi.call_function('x'))) & attrs, attrs)\n \n         jsi = JSInterpreter('''\n-        function x() { let a=/,,[/,913,/](,)}/i; return a; }\n+            function x() { let a=/,,[/,913,/](,)}/i; return a; }\n         ''')\n         self.assertEqual(jsi.call_function('x').flags & ~re.U, re.I)\n \n-        jsi = JSInterpreter(r'''\n-        function x() { let a=\"data-name\".replace(\"data-\", \"\"); return a }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 'name')\n-\n-        jsi = JSInterpreter(r'''\n-        function x() { let a=\"data-name\".replace(new RegExp(\"^.+-\"), \"\"); return a; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 'name')\n-\n-        jsi = JSInterpreter(r'''\n-        function x() { let a=\"data-name\".replace(/^.+-/, \"\"); return a; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 'name')\n-\n-        jsi = JSInterpreter(r'''\n-        function x() { let a=\"data-name\".replace(/a/g, \"o\"); return a; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 'doto-nome')\n-\n-        jsi = JSInterpreter(r'''\n-        function x() { let a=\"data-name\".replaceAll(\"a\", \"o\"); return a; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 'doto-nome')\n+        jsi = JSInterpreter(r'function f() { let a=/,][}\",],()}(\\[)/; return a; }')\n+        self.assertEqual(jsi.call_function('f').pattern, r',][}\",],()}(\\[)')\n \n-        jsi = JSInterpreter(r'''\n-        function x() { let a=[/[)\\\\]/]; return a[0]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x').pattern, r'[)\\\\]')\n+        jsi = JSInterpreter(r'function f() { let a=[/[)\\\\]/]; return a[0]; }')\n+        self.assertEqual(jsi.call_function('f').pattern, r'[)\\\\]')\n \n-        \"\"\"  # fails\n-        jsi = JSInterpreter(r'''\n-        function x() { let a=100; a/=/[0-9]+/.exec('divide by 20 today')[0]; }\n-        ''')\n-        self.assertEqual(jsi.call_function('x'), 5)\n-        \"\"\"\n+    def test_replace(self):\n+        self._test('function f() { let a=\"data-name\".replace(\"data-\", \"\"); return a }',\n+                   'name')\n+        self._test('function f() { let a=\"data-name\".replace(new RegExp(\"^.+-\"), \"\"); return a; }',\n+                   'name')\n+        self._test('function f() { let a=\"data-name\".replace(/^.+-/, \"\"); return a; }',\n+                   'name')\n+        self._test('function f() { let a=\"data-name\".replace(/a/g, \"o\"); return a; }',\n+                   'doto-nome')\n+        self._test('function f() { let a=\"data-name\".replaceAll(\"a\", \"o\"); return a; }',\n+                   'doto-nome')\n \n     def test_char_code_at(self):\n-        jsi = JSInterpreter('function x(i){return \"test\".charCodeAt(i)}')\n-        self.assertEqual(jsi.call_function('x', 0), 116)\n-        self.assertEqual(jsi.call_function('x', 1), 101)\n-        self.assertEqual(jsi.call_function('x', 2), 115)\n-        self.assertEqual(jsi.call_function('x', 3), 116)\n-        self.assertEqual(jsi.call_function('x', 4), None)\n-        self.assertEqual(jsi.call_function('x', 'not_a_number'), 116)\n+        jsi = JSInterpreter('function f(i){return \"test\".charCodeAt(i)}')\n+        self._test(jsi, 116, args=[0])\n+        self._test(jsi, 101, args=[1])\n+        self._test(jsi, 115, args=[2])\n+        self._test(jsi, 116, args=[3])\n+        self._test(jsi, None, args=[4])\n+        self._test(jsi, 116, args=['not_a_number'])\n \n     def test_bitwise_operators_overflow(self):\n-        jsi = JSInterpreter('function x(){return -524999584 << 5}')\n-        self.assertEqual(jsi.call_function('x'), 379882496)\n-\n-        jsi = JSInterpreter('function x(){return 1236566549 << 5}')\n-        self.assertEqual(jsi.call_function('x'), 915423904)\n-\n-    def test_bitwise_operators_madness(self):\n-        jsi = JSInterpreter('function x(){return null << 5}')\n-        self.assertEqual(jsi.call_function('x'), 0)\n-\n-        jsi = JSInterpreter('function x(){return undefined >> 5}')\n-        self.assertEqual(jsi.call_function('x'), 0)\n-\n-        jsi = JSInterpreter('function x(){return 42 << NaN}')\n-        self.assertEqual(jsi.call_function('x'), 42)\n-\n-        jsi = JSInterpreter('function x(){return 42 << Infinity}')\n-        self.assertEqual(jsi.call_function('x'), 42)\n+        self._test('function f(){return -524999584 << 5}', 379882496)\n+        self._test('function f(){return 1236566549 << 5}', 915423904)\n+\n+    def test_bitwise_operators_typecast(self):\n+        # madness\n+        self._test('function f(){return null << 5}', 0)\n+        self._test('function f(){return undefined >> 5}', 0)\n+        self._test('function f(){return 42 << NaN}', 42)\n+        self._test('function f(){return 42 << Infinity}', 42)\n+\n+    def test_negative(self):\n+        self._test('function f(){return 2    *    -2.0    ;}', -4)\n+        self._test('function f(){return 2    -    - -2    ;}', 0)\n+        self._test('function f(){return 2    -    - - -2  ;}', 4)\n+        self._test('function f(){return 2    -    + + - -2;}', 0)\n+        self._test('function f(){return 2    +    - + - -2;}', 0)\n \n     def test_32066(self):\n-        jsi = JSInterpreter(\"function x(){return Math.pow(3, 5) + new Date('1970-01-01T08:01:42.000+08:00') / 1000 * -239 - -24205;}\")\n-        self.assertEqual(jsi.call_function('x'), 70)\n-\n-    def test_unary_operators(self):\n-        jsi = JSInterpreter('function f(){return 2  -  - - 2;}')\n-        self.assertEqual(jsi.call_function('f'), 0)\n-        jsi = JSInterpreter('function f(){return 2 + - + - - 2;}')\n-        self.assertEqual(jsi.call_function('f'), 0)\n-        # https://github.com/ytdl-org/youtube-dl/issues/32815\n-        jsi = JSInterpreter('function f(){return 0  - 7 * - 6;}')\n-        self.assertEqual(jsi.call_function('f'), 42)\n+        self._test(\n+            \"function f(){return Math.pow(3, 5) + new Date('1970-01-01T08:01:42.000+08:00') / 1000 * -239 - -24205;}\",\n+            70)\n \n-    \"\"\" # fails so far\n+    @unittest.skip('Not yet working')\n     def test_packed(self):\n-        jsi = JSInterpreter('''function x(p,a,c,k,e,d){while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+c.toString(a)+'\\\\b','g'),k[c]);return p}''')\n-        self.assertEqual(jsi.call_function('x', '''h 7=g(\"1j\");7.7h({7g:[{33:\"w://7f-7e-7d-7c.v.7b/7a/79/78/77/76.74?t=73&s=2s&e=72&f=2t&71=70.0.0.1&6z=6y&6x=6w\"}],6v:\"w://32.v.u/6u.31\",16:\"r%\",15:\"r%\",6t:\"6s\",6r:\"\",6q:\"l\",6p:\"l\",6o:\"6n\",6m:\\'6l\\',6k:\"6j\",9:[{33:\"/2u?b=6i&n=50&6h=w://32.v.u/6g.31\",6f:\"6e\"}],1y:{6d:1,6c:\\'#6b\\',6a:\\'#69\\',68:\"67\",66:30,65:r,},\"64\":{63:\"%62 2m%m%61%5z%5y%5x.u%5w%5v%5u.2y%22 2k%m%1o%22 5t%m%1o%22 5s%m%1o%22 2j%m%5r%22 16%m%5q%22 15%m%5p%22 5o%2z%5n%5m%2z\",5l:\"w://v.u/d/1k/5k.2y\",5j:[]},\\'5i\\':{\"5h\":\"5g\"},5f:\"5e\",5d:\"w://v.u\",5c:{},5b:l,1x:[0.25,0.50,0.75,1,1.25,1.5,2]});h 1m,1n,5a;h 59=0,58=0;h 7=g(\"1j\");h 2x=0,57=0,56=0;$.55({54:{\\'53-52\\':\\'2i-51\\'}});7.j(\\'4z\\',6(x){c(5>0&&x.1l>=5&&1n!=1){1n=1;$(\\'q.4y\\').4x(\\'4w\\')}});7.j(\\'13\\',6(x){2x=x.1l});7.j(\\'2g\\',6(x){2w(x)});7.j(\\'4v\\',6(){$(\\'q.2v\\').4u()});6 2w(x){$(\\'q.2v\\').4t();c(1m)19;1m=1;17=0;c(4s.4r===l){17=1}$.4q(\\'/2u?b=4p&2l=1k&4o=2t-4n-4m-2s-4l&4k=&4j=&4i=&17=\\'+17,6(2r){$(\\'#4h\\').4g(2r)});$(\\'.3-8-4f-4e:4d(\"4c\")\\').2h(6(e){2q();g().4b(0);g().4a(l)});6 2q(){h $14=$(\"<q />\").2p({1l:\"49\",16:\"r%\",15:\"r%\",48:0,2n:0,2o:47,46:\"45(10%, 10%, 10%, 0.4)\",\"44-43\":\"42\"});$(\"<41 />\").2p({16:\"60%\",15:\"60%\",2o:40,\"3z-2n\":\"3y\"}).3x({\\'2m\\':\\'/?b=3w&2l=1k\\',\\'2k\\':\\'0\\',\\'2j\\':\\'2i\\'}).2f($14);$14.2h(6(){$(3v).3u();g().2g()});$14.2f($(\\'#1j\\'))}g().13(0);}6 3t(){h 9=7.1b(2e);2d.2c(9);c(9.n>1){1r(i=0;i<9.n;i++){c(9[i].1a==2e){2d.2c(\\'!!=\\'+i);7.1p(i)}}}}7.j(\\'3s\\',6(){g().1h(\"/2a/3r.29\",\"3q 10 28\",6(){g().13(g().27()+10)},\"2b\");$(\"q[26=2b]\").23().21(\\'.3-20-1z\\');g().1h(\"/2a/3p.29\",\"3o 10 28\",6(){h 12=g().27()-10;c(12<0)12=0;g().13(12)},\"24\");$(\"q[26=24]\").23().21(\\'.3-20-1z\\');});6 1i(){}7.j(\\'3n\\',6(){1i()});7.j(\\'3m\\',6(){1i()});7.j(\"k\",6(y){h 9=7.1b();c(9.n<2)19;$(\\'.3-8-3l-3k\\').3j(6(){$(\\'#3-8-a-k\\').1e(\\'3-8-a-z\\');$(\\'.3-a-k\\').p(\\'o-1f\\',\\'11\\')});7.1h(\"/3i/3h.3g\",\"3f 3e\",6(){$(\\'.3-1w\\').3d(\\'3-8-1v\\');$(\\'.3-8-1y, .3-8-1x\\').p(\\'o-1g\\',\\'11\\');c($(\\'.3-1w\\').3c(\\'3-8-1v\\')){$(\\'.3-a-k\\').p(\\'o-1g\\',\\'l\\');$(\\'.3-a-k\\').p(\\'o-1f\\',\\'l\\');$(\\'.3-8-a\\').1e(\\'3-8-a-z\\');$(\\'.3-8-a:1u\\').3b(\\'3-8-a-z\\')}3a{$(\\'.3-a-k\\').p(\\'o-1g\\',\\'11\\');$(\\'.3-a-k\\').p(\\'o-1f\\',\\'11\\');$(\\'.3-8-a:1u\\').1e(\\'3-8-a-z\\')}},\"39\");7.j(\"38\",6(y){1d.37(\\'1c\\',y.9[y.36].1a)});c(1d.1t(\\'1c\\')){35(\"1s(1d.1t(\\'1c\\'));\",34)}});h 18;6 1s(1q){h 9=7.1b();c(9.n>1){1r(i=0;i<9.n;i++){c(9[i].1a==1q){c(i==18){19}18=i;7.1p(i)}}}}',36,270,'|||jw|||function|player|settings|tracks|submenu||if||||jwplayer|var||on|audioTracks|true|3D|length|aria|attr|div|100|||sx|filemoon|https||event|active||false|tt|seek|dd|height|width|adb|current_audio|return|name|getAudioTracks|default_audio|localStorage|removeClass|expanded|checked|addButton|callMeMaybe|vplayer|0fxcyc2ajhp1|position|vvplay|vvad|220|setCurrentAudioTrack|audio_name|for|audio_set|getItem|last|open|controls|playbackRates|captions|rewind|icon|insertAfter||detach|ff00||button|getPosition|sec|png|player8|ff11|log|console|track_name|appendTo|play|click|no|scrolling|frameborder|file_code|src|top|zIndex|css|showCCform|data|1662367683|383371|dl|video_ad|doPlay|prevt|mp4|3E||jpg|thumbs|file|300|setTimeout|currentTrack|setItem|audioTrackChanged|dualSound|else|addClass|hasClass|toggleClass|Track|Audio|svg|dualy|images|mousedown|buttons|topbar|playAttemptFailed|beforePlay|Rewind|fr|Forward|ff|ready|set_audio_track|remove|this|upload_srt|prop|50px|margin|1000001|iframe|center|align|text|rgba|background|1000000|left|absolute|pause|setCurrentCaptions|Upload|contains|item|content|html|fviews|referer|prem|embed|3e57249ef633e0d03bf76ceb8d8a4b65|216|83|hash|view|get|TokenZir|window|hide|show|complete|slow|fadeIn|video_ad_fadein|time||cache|Cache|Content|headers|ajaxSetup|v2done|tott|vastdone2|vastdone1|vvbefore|playbackRateControls|cast|aboutlink|FileMoon|abouttext|UHD|1870|qualityLabels|sites|GNOME_POWER|link|2Fiframe|3C|allowfullscreen|22360|22640|22no|marginheight|marginwidth|2FGNOME_POWER|2F0fxcyc2ajhp1|2Fe|2Ffilemoon|2F|3A||22https|3Ciframe|code|sharing|fontOpacity|backgroundOpacity|Tahoma|fontFamily|303030|backgroundColor|FFFFFF|color|userFontScale|thumbnails|kind|0fxcyc2ajhp10000|url|get_slides|start|startparam|none|preload|html5|primary|hlshtml|androidhls|duration|uniform|stretching|0fxcyc2ajhp1_xt|image|2048|sp|6871|asn|127|srv|43200|_g3XlBcu2lmD9oDexD2NLWSmah2Nu3XcDrl93m9PwXY|m3u8||master|0fxcyc2ajhp1_x|00076|01|hls2|to|s01|delivery|storage|moon|sources|setup'''.split('|')))\n-    \"\"\"\n+        self._test(\n+            '''function f(p,a,c,k,e,d){while(c--)if(k[c])p=p.replace(new RegExp('\\\\b'+c.toString(a)+'\\\\b','g'),k[c]);return p}''',\n+            '''h 7=g(\"1j\");7.7h({7g:[{33:\"w://7f-7e-7d-7c.v.7b/7a/79/78/77/76.74?t=73&s=2s&e=72&f=2t&71=70.0.0.1&6z=6y&6x=6w\"}],6v:\"w://32.v.u/6u.31\",16:\"r%\",15:\"r%\",6t:\"6s\",6r:\"\",6q:\"l\",6p:\"l\",6o:\"6n\",6m:\\'6l\\',6k:\"6j\",9:[{33:\"/2u?b=6i&n=50&6h=w://32.v.u/6g.31\",6f:\"6e\"}],1y:{6d:1,6c:\\'#6b\\',6a:\\'#69\\',68:\"67\",66:30,65:r,},\"64\":{63:\"%62 2m%m%61%5z%5y%5x.u%5w%5v%5u.2y%22 2k%m%1o%22 5t%m%1o%22 5s%m%1o%22 2j%m%5r%22 16%m%5q%22 15%m%5p%22 5o%2z%5n%5m%2z\",5l:\"w://v.u/d/1k/5k.2y\",5j:[]},\\'5i\\':{\"5h\":\"5g\"},5f:\"5e\",5d:\"w://v.u\",5c:{},5b:l,1x:[0.25,0.50,0.75,1,1.25,1.5,2]});h 1m,1n,5a;h 59=0,58=0;h 7=g(\"1j\");h 2x=0,57=0,56=0;$.55({54:{\\'53-52\\':\\'2i-51\\'}});7.j(\\'4z\\',6(x){c(5>0&&x.1l>=5&&1n!=1){1n=1;$(\\'q.4y\\').4x(\\'4w\\')}});7.j(\\'13\\',6(x){2x=x.1l});7.j(\\'2g\\',6(x){2w(x)});7.j(\\'4v\\',6(){$(\\'q.2v\\').4u()});6 2w(x){$(\\'q.2v\\').4t();c(1m)19;1m=1;17=0;c(4s.4r===l){17=1}$.4q(\\'/2u?b=4p&2l=1k&4o=2t-4n-4m-2s-4l&4k=&4j=&4i=&17=\\'+17,6(2r){$(\\'#4h\\').4g(2r)});$(\\'.3-8-4f-4e:4d(\"4c\")\\').2h(6(e){2q();g().4b(0);g().4a(l)});6 2q(){h $14=$(\"<q />\").2p({1l:\"49\",16:\"r%\",15:\"r%\",48:0,2n:0,2o:47,46:\"45(10%, 10%, 10%, 0.4)\",\"44-43\":\"42\"});$(\"<41 />\").2p({16:\"60%\",15:\"60%\",2o:40,\"3z-2n\":\"3y\"}).3x({\\'2m\\':\\'/?b=3w&2l=1k\\',\\'2k\\':\\'0\\',\\'2j\\':\\'2i\\'}).2f($14);$14.2h(6(){$(3v).3u();g().2g()});$14.2f($(\\'#1j\\'))}g().13(0);}6 3t(){h 9=7.1b(2e);2d.2c(9);c(9.n>1){1r(i=0;i<9.n;i++){c(9[i].1a==2e){2d.2c(\\'!!=\\'+i);7.1p(i)}}}}7.j(\\'3s\\',6(){g().1h(\"/2a/3r.29\",\"3q 10 28\",6(){g().13(g().27()+10)},\"2b\");$(\"q[26=2b]\").23().21(\\'.3-20-1z\\');g().1h(\"/2a/3p.29\",\"3o 10 28\",6(){h 12=g().27()-10;c(12<0)12=0;g().13(12)},\"24\");$(\"q[26=24]\").23().21(\\'.3-20-1z\\');});6 1i(){}7.j(\\'3n\\',6(){1i()});7.j(\\'3m\\',6(){1i()});7.j(\"k\",6(y){h 9=7.1b();c(9.n<2)19;$(\\'.3-8-3l-3k\\').3j(6(){$(\\'#3-8-a-k\\').1e(\\'3-8-a-z\\');$(\\'.3-a-k\\').p(\\'o-1f\\',\\'11\\')});7.1h(\"/3i/3h.3g\",\"3f 3e\",6(){$(\\'.3-1w\\').3d(\\'3-8-1v\\');$(\\'.3-8-1y, .3-8-1x\\').p(\\'o-1g\\',\\'11\\');c($(\\'.3-1w\\').3c(\\'3-8-1v\\')){$(\\'.3-a-k\\').p(\\'o-1g\\',\\'l\\');$(\\'.3-a-k\\').p(\\'o-1f\\',\\'l\\');$(\\'.3-8-a\\').1e(\\'3-8-a-z\\');$(\\'.3-8-a:1u\\').3b(\\'3-8-a-z\\')}3a{$(\\'.3-a-k\\').p(\\'o-1g\\',\\'11\\');$(\\'.3-a-k\\').p(\\'o-1f\\',\\'11\\');$(\\'.3-8-a:1u\\').1e(\\'3-8-a-z\\')}},\"39\");7.j(\"38\",6(y){1d.37(\\'1c\\',y.9[y.36].1a)});c(1d.1t(\\'1c\\')){35(\"1s(1d.1t(\\'1c\\'));\",34)}});h 18;6 1s(1q){h 9=7.1b();c(9.n>1){1r(i=0;i<9.n;i++){c(9[i].1a==1q){c(i==18){19}18=i;7.1p(i)}}}}',36,270,'|||jw|||function|player|settings|tracks|submenu||if||||jwplayer|var||on|audioTracks|true|3D|length|aria|attr|div|100|||sx|filemoon|https||event|active||false|tt|seek|dd|height|width|adb|current_audio|return|name|getAudioTracks|default_audio|localStorage|removeClass|expanded|checked|addButton|callMeMaybe|vplayer|0fxcyc2ajhp1|position|vvplay|vvad|220|setCurrentAudioTrack|audio_name|for|audio_set|getItem|last|open|controls|playbackRates|captions|rewind|icon|insertAfter||detach|ff00||button|getPosition|sec|png|player8|ff11|log|console|track_name|appendTo|play|click|no|scrolling|frameborder|file_code|src|top|zIndex|css|showCCform|data|1662367683|383371|dl|video_ad|doPlay|prevt|mp4|3E||jpg|thumbs|file|300|setTimeout|currentTrack|setItem|audioTrackChanged|dualSound|else|addClass|hasClass|toggleClass|Track|Audio|svg|dualy|images|mousedown|buttons|topbar|playAttemptFailed|beforePlay|Rewind|fr|Forward|ff|ready|set_audio_track|remove|this|upload_srt|prop|50px|margin|1000001|iframe|center|align|text|rgba|background|1000000|left|absolute|pause|setCurrentCaptions|Upload|contains|item|content|html|fviews|referer|prem|embed|3e57249ef633e0d03bf76ceb8d8a4b65|216|83|hash|view|get|TokenZir|window|hide|show|complete|slow|fadeIn|video_ad_fadein|time||cache|Cache|Content|headers|ajaxSetup|v2done|tott|vastdone2|vastdone1|vvbefore|playbackRateControls|cast|aboutlink|FileMoon|abouttext|UHD|1870|qualityLabels|sites|GNOME_POWER|link|2Fiframe|3C|allowfullscreen|22360|22640|22no|marginheight|marginwidth|2FGNOME_POWER|2F0fxcyc2ajhp1|2Fe|2Ffilemoon|2F|3A||22https|3Ciframe|code|sharing|fontOpacity|backgroundOpacity|Tahoma|fontFamily|303030|backgroundColor|FFFFFF|color|userFontScale|thumbnails|kind|0fxcyc2ajhp10000|url|get_slides|start|startparam|none|preload|html5|primary|hlshtml|androidhls|duration|uniform|stretching|0fxcyc2ajhp1_xt|image|2048|sp|6871|asn|127|srv|43200|_g3XlBcu2lmD9oDexD2NLWSmah2Nu3XcDrl93m9PwXY|m3u8||master|0fxcyc2ajhp1_x|00076|01|hls2|to|s01|delivery|storage|moon|sources|setup'''.split('|'))\n+\n+    def test_join(self):\n+        test_input = list('test')\n+        tests = [\n+            'function f(a, b){return a.join(b)}',\n+            'function f(a, b){return Array.prototype.join.call(a, b)}',\n+            'function f(a, b){return Array.prototype.join.apply(a, [b])}',\n+        ]\n+        for test in tests:\n+            jsi = JSInterpreter(test)\n+            self._test(jsi, 'test', args=[test_input, ''])\n+            self._test(jsi, 't-e-s-t', args=[test_input, '-'])\n+            self._test(jsi, '', args=[[], '-'])\n+\n+    def test_split(self):\n+        test_result = list('test')\n+        tests = [\n+            'function f(a, b){return a.split(b)}',\n+            'function f(a, b){return String.prototype.split.call(a, b)}',\n+            'function f(a, b){return String.prototype.split.apply(a, [b])}',\n+        ]\n+        for test in tests:\n+            jsi = JSInterpreter(test)\n+            self._test(jsi, test_result, args=['test', ''])\n+            self._test(jsi, test_result, args=['t-e-s-t', '-'])\n+            self._test(jsi, [''], args=['', '-'])\n+            self._test(jsi, [], args=['', ''])\n \n \n if __name__ == '__main__':\ndiff --git a/test/test_youtube_signature.py b/test/test_youtube_signature.py\nindex cafba7a5cdd..cc18d0f7be3 100644\n--- a/test/test_youtube_signature.py\n+++ b/test/test_youtube_signature.py\n@@ -162,6 +162,10 @@\n         'https://www.youtube.com/s/player/590f65a6/player_ias.vflset/en_US/base.js',\n         '1tm7-g_A9zsI8_Lay_', 'xI4Vem4Put_rOg',\n     ),\n+    (\n+        'https://www.youtube.com/s/player/b22ef6e7/player_ias.vflset/en_US/base.js',\n+        'b6HcntHGkvBLk_FRf', 'kNPW6A7FyP2l8A',\n+    ),\n ]\n \n \n",
        "problem_statement": "[YouTube] Unable to extract nsig jsi ...\n<!--\r\n\r\n######################################################################\r\n  WARNING!\r\n  IGNORING THE FOLLOWING TEMPLATE WILL RESULT IN ISSUE CLOSED AS INCOMPLETE\r\n######################################################################\r\n\r\n-->\r\n\r\n\r\n## Checklist\r\n\r\n<!--\r\nCarefully read and work through this check list in order to prevent the most common mistakes and misuse of youtube-dl:\r\n- First of, make sure you are using the latest version of youtube-dl. Run `youtube-dl --version` and ensure your version is 2021.12.17. If it's not, see https://yt-dl.org/update on how to update. Issues with outdated version will be REJECTED.\r\n- Make sure that all provided video/audio/playlist URLs (if any) are alive and playable in a browser.\r\n- Make sure that all URLs and arguments with special characters are properly quoted or escaped as explained in http://yt-dl.org/escape.\r\n- Search the bugtracker for similar issues: http://yt-dl.org/search-issues. DO NOT post duplicates.\r\n- Finally, put x into all relevant boxes (like this [x])\r\n-->\r\n\r\n- [x] I'm reporting a broken site support\r\n- [x] I've verified that I'm running youtube-dl version **2021.12.17**\r\n- [x] I've checked that all provided URLs are alive and playable in a browser\r\n- [x] I've checked that all URLs and arguments with special characters are properly quoted or escaped\r\n- [x] I've searched the bugtracker for similar issues including closed ones\r\n\r\n\r\n## Verbose log\r\n\r\n<!--\r\nProvide the complete verbose output of youtube-dl that clearly demonstrates the problem.\r\nAdd the `-v` flag to your command line you run youtube-dl with (`youtube-dl -v <your command line>`), copy the WHOLE output and insert it below. It should look similar to this:\r\n [debug] System config: []\r\n [debug] User config: []\r\n [debug] Command-line args: [u'-v', u'http://www.youtube.com/watch?v=BaW_jenozKcj']\r\n [debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251\r\n [debug] youtube-dl version 2021.12.17\r\n [debug] Python version 2.7.11 - Windows-2003Server-5.2.3790-SP2\r\n [debug] exe versions: ffmpeg N-75573-g1d0487f, ffprobe N-75573-g1d0487f, rtmpdump 2.4\r\n [debug] Proxy map: {}\r\n <more lines>\r\n-->\r\n\r\n```\r\n\r\n==========================\r\nTESTING NORMAL YOUTUBE-DL:\r\n==========================\r\n\r\n\r\n[debug] System config: []\r\n[debug] User config: ['--no-mtime', '--match-filter', '!is_live', '--retries', 'infinite', '--fragment-retries', '3', '--skip-unavailable-fragments', '--restrict-filenames', '-i', '-o', '/home/gregorius/home/pending/videos/%(title)s___%(id)s.webm', '-f', '(bestvideo[height<=360]+worstaudio/best[height<=360])[protocol!=http_dash_segments][container!^=dash]', '--console-title', '--hls-prefer-native', '--no-cache-dir', '--http-chunk-size', '100M', '--cookies', '/home/gregorius/home/scripts/video/youtube-dl-cookies']\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['https://www.youtube.com/watch?v=zPHM0q0xgFg', '-vf', '18', '--no-playlist', '-o', '/home/gregorius/home/scripts/video/TEST_NORMAL_%(title)s___%(id)s.webm']\r\n[debug] Encodings: locale UTF-8, fs utf-8, out utf-8, pref UTF-8\r\n[debug] youtube-dl version 2021.12.17\r\n[debug] Single file build\r\n[debug] Python 3.10.12 (CPython x86_64 64bit) - Linux-5.15.0-112-generic-x86_64-with-glibc2.35 - OpenSSL 3.0.2 15 Mar 2022 - glibc 2.35\r\n[debug] exe versions: ffmpeg 4.4.2, ffprobe 4.4.2, rtmpdump 2.4\r\n[debug] Proxy map: {}\r\n[youtube] zPHM0q0xgFg: Downloading webpage\r\n[youtube] Downloading just video zPHM0q0xgFg because of --no-playlist\r\n[youtube] zPHM0q0xgFg: Downloading player b22ef6e7\r\nERROR: Unable to extract nsig jsi, player_id, func_codefunction code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1637, in _decrypt_nsig\r\n    jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1680, in _extract_n_function_code\r\n    func_name = self._extract_n_function_name(jscode)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1660, in _extract_n_function_name\r\n    func_name, idx = self._search_regex(\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n    raise RegexNotFoundError('Unable to extract %s' % _name)\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1637, in _decrypt_nsig\r\n    jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1680, in _extract_n_function_code\r\n    func_name = self._extract_n_function_name(jscode)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1660, in _extract_n_function_name\r\n    func_name, idx = self._search_regex(\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n    raise RegexNotFoundError('Unable to extract %s' % _name)\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/YoutubeDL.py\", line 875, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/YoutubeDL.py\", line 971, in __extract_info\r\n    ie_result = ie.extract(url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/common.py\", line 571, in extract\r\n    ie_result = self._real_extract(url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 2108, in _real_extract\r\n    self._unthrottle_format_urls(video_id, player_url, dct)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1725, in _unthrottle_format_urls\r\n    n_response = decrypt_nsig(n_param)(n_param, video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1614, in inner\r\n    raise ret\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1606, in inner\r\n    self._player_cache[cache_id] = func(*args, **kwargs)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-normal/youtube-dl/youtube_dl/extractor/youtube.py\", line 1639, in _decrypt_nsig\r\n    raise ExtractorError('Unable to extract nsig jsi, player_id, func_codefunction code', cause=e)\r\nyoutube_dl.utils.ExtractorError: Unable to extract nsig jsi, player_id, func_codefunction code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n\r\n\r\n===========================\r\nTESTING NIGHTLY YOUTUBE-DL:\r\n===========================\r\n\r\n\r\n[debug] System config: []\r\n[debug] User config: ['--no-mtime', '--match-filter', '!is_live', '--retries', 'infinite', '--fragment-retries', '3', '--skip-unavailable-fragments', '--restrict-filenames', '-i', '-o', '/home/gregorius/home/pending/videos/%(title)s___%(id)s.webm', '-f', '(bestvideo[height<=360]+worstaudio/best[height<=360])[protocol!=http_dash_segments][container!^=dash]', '--console-title', '--hls-prefer-native', '--no-cache-dir', '--http-chunk-size', '100M', '--cookies', '/home/gregorius/home/scripts/video/youtube-dl-cookies']\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['https://www.youtube.com/watch?v=zPHM0q0xgFg', '-vf', '18', '--no-playlist', '-o', '/home/gregorius/home/scripts/video/TEST_NIGHTLY_%(title)s___%(id)s.webm']\r\n[debug] Encodings: locale UTF-8, fs utf-8, out utf-8, pref UTF-8\r\n[debug] youtube-dl version 2024.07.08 [a452f9437] (single file build)\r\n[debug] ** This version was built from the latest master code at https://github.com/ytdl-org/youtube-dl.\r\n[debug] ** For support, visit the main site.\r\n[debug] Python 3.10.12 (CPython x86_64 64bit) - Linux-5.15.0-112-generic-x86_64-with-glibc2.35 - OpenSSL 3.0.2 15 Mar 2022 - glibc 2.35\r\n[debug] exe versions: ffmpeg 4.4.2, ffprobe 4.4.2, rtmpdump 2.4\r\n[debug] Proxy map: {}\r\n[youtube] zPHM0q0xgFg: Downloading webpage\r\n[youtube] Downloading just video zPHM0q0xgFg because of --no-playlist\r\n[youtube] zPHM0q0xgFg: Downloading player b22ef6e7\r\nERROR: Unable to extract nsig jsi, player_id, func_codefunction code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1637, in _decrypt_nsig\r\n    jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1680, in _extract_n_function_code\r\n    func_name = self._extract_n_function_name(jscode)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1660, in _extract_n_function_name\r\n    func_name, idx = self._search_regex(\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n    raise RegexNotFoundError('Unable to extract %s' % _name)\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1637, in _decrypt_nsig\r\n    jsi, player_id, func_code = self._extract_n_function_code(video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1680, in _extract_n_function_code\r\n    func_name = self._extract_n_function_name(jscode)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1660, in _extract_n_function_name\r\n    func_name, idx = self._search_regex(\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/common.py\", line 1101, in _search_regex\r\n    raise RegexNotFoundError('Unable to extract %s' % _name)\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract Initial JS player n function name; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/YoutubeDL.py\", line 879, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/YoutubeDL.py\", line 975, in __extract_info\r\n    ie_result = ie.extract(url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/common.py\", line 571, in extract\r\n    ie_result = self._real_extract(url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 2108, in _real_extract\r\n    self._unthrottle_format_urls(video_id, player_url, dct)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1725, in _unthrottle_format_urls\r\n    n_response = decrypt_nsig(n_param)(n_param, video_id, player_url)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1614, in inner\r\n    raise ret\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1606, in inner\r\n    self._player_cache[cache_id] = func(*args, **kwargs)\r\n  File \"/home/gregorius/home/scripts/video/youtube-dl-nightly/youtube-dl/youtube_dl/extractor/youtube.py\", line 1639, in _decrypt_nsig\r\n    raise ExtractorError('Unable to extract nsig jsi, player_id, func_codefunction code', cause=e)\r\nyoutube_dl.utils.ExtractorError: Unable to extract nsig jsi, player_id, func_codefunction code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.')); please report this issue on https://github.com/ytdl-org/youtube-dl/issues , using the appropriate issue template. Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose option and include the complete output.\r\n```\r\n\r\n\r\n## Description\r\n\r\n<!--\r\nProvide an explanation of your issue in an arbitrary form. Provide any additional information, suggested solution and as much context and examples as possible.\r\nIf work on your issue requires account credentials please provide them or explain how one can obtain them.\r\n-->\r\n\r\nNew Error Message on Youtube, yay, time to provide the Devs with the Logs!\r\n\r\nUnable to extract nsig jsi, player_id, func_codefunction code (caused by RegexNotFoundError('Unable to extract \\x1b[0;34mInitial JS player n function name\\x1b[0m; \r\n\nfix to 'Unable to extract nsig jsi ... #32842'\nfix to 'Unable to extract nsig jsi ... #32842'\r\nthanks to @Duster98 \\@#issuecomment-2220376175\r\n\r\n## Please follow the guide below\r\n\r\n- You will be asked some questions, please read them **carefully** and answer honestly\r\n- Put an `x` into all the boxes [ ] relevant to your *pull request* (like that [x])\r\n- Use *Preview* tab to see how your *pull request* will actually look like\r\n\r\n---\r\n\r\n### Before submitting a *pull request* make sure you have:\r\n- [ x] [Searched](https://github.com/ytdl-org/youtube-dl/search?q=is%3Apr&type=Issues) the bugtracker for similar pull requests\r\n- [ n/a] Read [adding new extractor tutorial](https://github.com/ytdl-org/youtube-dl#adding-support-for-a-new-site)\r\n- [ x] Read [youtube-dl coding conventions](https://github.com/ytdl-org/youtube-dl#youtube-dl-coding-conventions) and adjusted the code to meet them\r\n- [ x] Covered the code with tests (note that PRs without tests will be REJECTED)\r\n- [ x] Checked the code with [flake8](https://pypi.python.org/pypi/flake8)\r\n\r\n### In order to be accepted and merged into youtube-dl each piece of code must be in public domain or released under [Unlicense](http://unlicense.org/). Check one of the following options:\r\n- [ -] I am the original author of this code and I am willing to release it under [Unlicense](http://unlicense.org/)\r\n- [ x] I am not the original author of this code but it is in public domain or released under [Unlicense](http://unlicense.org/) (provide reliable evidence)\r\n\r\n### What is the purpose of your *pull request*?\r\n- [ x] Bug fix\r\n- [ ] Improvement\r\n- [ ] New extractor\r\n- [ ] New feature\r\n\r\n---\r\n\r\n### Description of your *pull request* and other information\r\n\r\nExplanation of your *pull request* in arbitrary form goes here. Please make sure the description explains the purpose and effect of your *pull request* and is worded well enough to be understood. Provide as much context and examples as possible.\r\n\r\nFix to issue #32842 [posted](https://github.com/ytdl-org/youtube-dl/issues/32842#issuecomment-2220376175) by @Duster98.\r\n\r\nCode checked and tested.\r\n\r\n```\r\n$ python youtube-dl.py -F -v https://www.youtube.com/watch?v=NjCVZ2TBlkw\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: [u'-F', u'-v', u'https://www.youtube.com/watch?v=NjCVZ2TBlkw']\r\n[debug] Encodings: locale UTF-8, fs UTF-8, out UTF-8, pref UTF-8\r\n[debug] youtube-dl version 2024.07.08 [a452f9437]\r\n[debug] ** This version was built from the latest master code at https://github.com/ytdl-org/youtube-dl.\r\n[debug] ** For support, visit the main site.\r\n[debug] Python 2.7.3 (CPython i686 32bit) - Linux-i686 - OpenSSL 1.0.1e - glibc 2.0\r\n[debug] exe versions: none\r\n[debug] Proxy map: {}\r\n[youtube] NjCVZ2TBlkw: Downloading webpage\r\n[debug] [youtube] Decrypted nsig GGMy0_8ADhuvb3QiC => HhLGoGWp5YkFLQ\r\n[debug] [youtube] Decrypted nsig g_flXTUre97dIvcKl => kBjCgNdd7NUQcQ\r\n[info] Available formats for NjCVZ2TBlkw:\r\nformat code  extension  resolution note\r\n251          webm       audio only audio_quality_medium    3k , webm_dash container, opus  (48000Hz), 2.57MiB\r\n251-drc      webm       audio only audio_quality_medium    3k , webm_dash container, opus  (48000Hz), 2.58MiB\r\n140          m4a        audio only audio_quality_medium  129k , m4a_dash container, mp4a.40.2 (44100Hz), 91.90MiB\r\n140-drc      m4a        audio only audio_quality_medium  129k , m4a_dash container, mp4a.40.2 (44100Hz), 91.90MiB\r\n160          mp4        256x144    144p    6k , mp4_dash container, avc1.4d400c, 30fps, video only, 4.70MiB\r\n134          mp4        640x360    360p   10k , mp4_dash container, avc1.4d401e, 30fps, video only, 7.64MiB\r\n136          mp4        1280x720   720p   21k , mp4_dash container, avc1.64001f, 30fps, video only, 15.16MiB\r\n137          mp4        1920x1080  1080p   32k , mp4_dash container, avc1.640028, 30fps, video only, 23.11MiB\r\n18           mp4        640x360    360p  139k , avc1.42001E, 30fps, mp4a.40.2 (44100Hz) (best)\r\n\r\n```\r\n\n",
        "hints_text": "\n",
        "created_at": "2024-07-10T17:53:59Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_jsinterp.py\", \"test/test_youtube_signature.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 32741,
        "instance_id": "ytdl-org__youtube-dl-32741",
        "issue_numbers": [
            "32735"
        ],
        "base_commit": "820fae3b3a8587a6f57afbe803b4f91de7d4e086",
        "patch": "diff --git a/youtube_dl/compat.py b/youtube_dl/compat.py\nindex 818ccebd0a6..53ff2a892af 100644\n--- a/youtube_dl/compat.py\n+++ b/youtube_dl/compat.py\n@@ -2421,29 +2421,26 @@ def load(self, rawdata):\n compat_urllib_request_urlretrieve = compat_urlretrieve\n \n try:\n+    from HTMLParser import (\n+        HTMLParser as compat_HTMLParser,\n+        HTMLParseError as compat_HTMLParseError)\n+except ImportError:  # Python 3\n     from html.parser import HTMLParser as compat_HTMLParser\n-except ImportError:  # Python 2\n-    from HTMLParser import HTMLParser as compat_HTMLParser\n-compat_html_parser_HTMLParser = compat_HTMLParser\n-\n-try:  # Python 2\n-    from HTMLParser import HTMLParseError as compat_HTMLParseError\n-except ImportError:  # Python <3.4\n     try:\n         from html.parser import HTMLParseError as compat_HTMLParseError\n     except ImportError:  # Python >3.4\n-\n-        # HTMLParseError has been deprecated in Python 3.3 and removed in\n+        # HTMLParseError was deprecated in Python 3.3 and removed in\n         # Python 3.5. Introducing dummy exception for Python >3.5 for compatible\n         # and uniform cross-version exception handling\n         class compat_HTMLParseError(Exception):\n             pass\n+compat_html_parser_HTMLParser = compat_HTMLParser\n compat_html_parser_HTMLParseError = compat_HTMLParseError\n \n try:\n-    from subprocess import DEVNULL\n-    compat_subprocess_get_DEVNULL = lambda: DEVNULL\n-except ImportError:\n+    _DEVNULL = subprocess.DEVNULL\n+    compat_subprocess_get_DEVNULL = lambda: _DEVNULL\n+except AttributeError:\n     compat_subprocess_get_DEVNULL = lambda: open(os.path.devnull, 'w')\n \n try:\n@@ -2943,6 +2940,51 @@ def compat_socket_create_connection(address, timeout, source_address=None):\n     compat_socket_create_connection = socket.create_connection\n \n \n+try:\n+    from contextlib import suppress as compat_contextlib_suppress\n+except ImportError:\n+    class compat_contextlib_suppress(object):\n+        _exceptions = None\n+\n+        def __init__(self, *exceptions):\n+            super(compat_contextlib_suppress, self).__init__()\n+            # TODO: [Base]ExceptionGroup (3.12+)\n+            self._exceptions = exceptions\n+\n+        def __enter__(self):\n+            return self\n+\n+        def __exit__(self, exc_type, exc_val, exc_tb):\n+            return exc_val is not None and isinstance(exc_val, self._exceptions or tuple())\n+\n+\n+# subprocess.Popen context manager\n+# avoids leaking handles if .communicate() is not called\n+try:\n+    _Popen = subprocess.Popen\n+    # check for required context manager attributes\n+    _Popen.__enter__ and _Popen.__exit__\n+    compat_subprocess_Popen = _Popen\n+except AttributeError:\n+    # not a context manager - make one\n+    from contextlib import contextmanager\n+\n+    @contextmanager\n+    def compat_subprocess_Popen(*args, **kwargs):\n+        popen = None\n+        try:\n+            popen = _Popen(*args, **kwargs)\n+            yield popen\n+        finally:\n+            if popen:\n+                for f in (popen.stdin, popen.stdout, popen.stderr):\n+                    if f:\n+                        # repeated .close() is OK, but just in case\n+                        with compat_contextlib_suppress(EnvironmentError):\n+                            f.close()\n+                popen.wait()\n+\n+\n # Fix https://github.com/ytdl-org/youtube-dl/issues/4223\n # See http://bugs.python.org/issue9161 for what is broken\n def workaround_optparse_bug9161():\n@@ -3263,6 +3305,7 @@ def compat_datetime_timedelta_total_seconds(td):\n     'compat_http_cookiejar_Cookie',\n     'compat_http_cookies',\n     'compat_http_cookies_SimpleCookie',\n+    'compat_contextlib_suppress',\n     'compat_ctypes_WINFUNCTYPE',\n     'compat_etree_fromstring',\n     'compat_filter',\n@@ -3298,6 +3341,7 @@ def compat_datetime_timedelta_total_seconds(td):\n     'compat_struct_pack',\n     'compat_struct_unpack',\n     'compat_subprocess_get_DEVNULL',\n+    'compat_subprocess_Popen',\n     'compat_tokenize_tokenize',\n     'compat_urllib_error',\n     'compat_urllib_parse',\ndiff --git a/youtube_dl/downloader/external.py b/youtube_dl/downloader/external.py\nindex bc228960efe..4fbc0f520e0 100644\n--- a/youtube_dl/downloader/external.py\n+++ b/youtube_dl/downloader/external.py\n@@ -11,8 +11,14 @@\n from ..compat import (\n     compat_setenv,\n     compat_str,\n+    compat_subprocess_Popen,\n )\n-from ..postprocessor.ffmpeg import FFmpegPostProcessor, EXT_TO_OUT_FORMATS\n+\n+try:\n+    from ..postprocessor.ffmpeg import FFmpegPostProcessor, EXT_TO_OUT_FORMATS\n+except ImportError:\n+    FFmpegPostProcessor = None\n+\n from ..utils import (\n     cli_option,\n     cli_valueless_option,\n@@ -361,13 +367,14 @@ def supports(cls, info_dict):\n \n     @classmethod\n     def available(cls):\n-        return FFmpegPostProcessor().available\n+        # actual availability can only be confirmed for an instance\n+        return bool(FFmpegPostProcessor)\n \n     def _call_downloader(self, tmpfilename, info_dict):\n-        url = info_dict['url']\n-        ffpp = FFmpegPostProcessor(downloader=self)\n+        # `downloader` means the parent `YoutubeDL`\n+        ffpp = FFmpegPostProcessor(downloader=self.ydl)\n         if not ffpp.available:\n-            self.report_error('m3u8 download detected but ffmpeg or avconv could not be found. Please install one.')\n+            self.report_error('ffmpeg required for download but no ffmpeg (nor avconv) executable could be found. Please install one.')\n             return False\n         ffpp.check_version()\n \n@@ -396,6 +403,7 @@ def _call_downloader(self, tmpfilename, info_dict):\n         # if end_time:\n         #     args += ['-t', compat_str(end_time - start_time)]\n \n+        url = info_dict['url']\n         cookies = self.ydl.cookiejar.get_cookies_for_url(url)\n         if cookies:\n             args.extend(['-cookies', ''.join(\n@@ -483,21 +491,25 @@ def _call_downloader(self, tmpfilename, info_dict):\n \n         self._debug_cmd(args)\n \n-        proc = subprocess.Popen(args, stdin=subprocess.PIPE, env=env)\n-        try:\n-            retval = proc.wait()\n-        except BaseException as e:\n-            # subprocess.run would send the SIGKILL signal to ffmpeg and the\n-            # mp4 file couldn't be played, but if we ask ffmpeg to quit it\n-            # produces a file that is playable (this is mostly useful for live\n-            # streams). Note that Windows is not affected and produces playable\n-            # files (see https://github.com/ytdl-org/youtube-dl/issues/8300).\n-            if isinstance(e, KeyboardInterrupt) and sys.platform != 'win32':\n-                process_communicate_or_kill(proc, b'q')\n-            else:\n-                proc.kill()\n-                proc.wait()\n-            raise\n+        # From [1], a PIPE opened in Popen() should be closed, unless\n+        # .communicate() is called. Avoid leaking any PIPEs by using Popen\n+        # as a context manager (newer Python 3.x and compat)\n+        # Fixes \"Resource Warning\" in test/test_downloader_external.py\n+        # [1] https://devpress.csdn.net/python/62fde12d7e66823466192e48.html\n+        with compat_subprocess_Popen(args, stdin=subprocess.PIPE, env=env) as proc:\n+            try:\n+                retval = proc.wait()\n+            except BaseException as e:\n+                # subprocess.run would send the SIGKILL signal to ffmpeg and the\n+                # mp4 file couldn't be played, but if we ask ffmpeg to quit it\n+                # produces a file that is playable (this is mostly useful for live\n+                # streams). Note that Windows is not affected and produces playable\n+                # files (see https://github.com/ytdl-org/youtube-dl/issues/8300).\n+                if isinstance(e, KeyboardInterrupt) and sys.platform != 'win32':\n+                    process_communicate_or_kill(proc, b'q')\n+                else:\n+                    proc.kill()\n+                raise\n         return retval\n \n \ndiff --git a/youtube_dl/postprocessor/ffmpeg.py b/youtube_dl/postprocessor/ffmpeg.py\nindex 801160e6c84..e5ffdf37882 100644\n--- a/youtube_dl/postprocessor/ffmpeg.py\n+++ b/youtube_dl/postprocessor/ffmpeg.py\n@@ -96,6 +96,7 @@ def get_ffmpeg_version(path):\n \n         self._paths = None\n         self._versions = None\n+        location = None\n         if self._downloader:\n             prefer_ffmpeg = self._downloader.params.get('prefer_ffmpeg', True)\n             location = self._downloader.params.get('ffmpeg_location')\n@@ -118,32 +119,17 @@ def get_ffmpeg_version(path):\n                     location = os.path.dirname(os.path.abspath(location))\n                     if basename in ('ffmpeg', 'ffprobe'):\n                         prefer_ffmpeg = True\n-\n-                self._paths = dict(\n-                    (p, os.path.join(location, p)) for p in programs)\n-                self._versions = dict(\n-                    (p, get_ffmpeg_version(self._paths[p])) for p in programs)\n-        if self._versions is None:\n-            self._versions = dict(\n-                (p, get_ffmpeg_version(p)) for p in programs)\n-            self._paths = dict((p, p) for p in programs)\n-\n-        if prefer_ffmpeg is False:\n-            prefs = ('avconv', 'ffmpeg')\n-        else:\n-            prefs = ('ffmpeg', 'avconv')\n-        for p in prefs:\n-            if self._versions[p]:\n-                self.basename = p\n-                break\n-\n-        if prefer_ffmpeg is False:\n-            prefs = ('avprobe', 'ffprobe')\n-        else:\n-            prefs = ('ffprobe', 'avprobe')\n-        for p in prefs:\n-            if self._versions[p]:\n-                self.probe_basename = p\n+        self._paths = dict(\n+            (p, p if location is None else os.path.join(location, p))\n+            for p in programs)\n+        self._versions = dict(\n+            x for x in (\n+                (p, get_ffmpeg_version(self._paths[p])) for p in programs)\n+            if x[1] is not None)\n+\n+        for p in ('ffmpeg', 'avconv')[::-1 if prefer_ffmpeg is False else 1]:\n+            if self._versions.get(p):\n+                self.basename = self.probe_basename = p\n                 break\n \n     @property\ndiff --git a/youtube_dl/utils.py b/youtube_dl/utils.py\nindex 03c73dff39d..083446342b0 100644\n--- a/youtube_dl/utils.py\n+++ b/youtube_dl/utils.py\n@@ -45,6 +45,7 @@\n     compat_casefold,\n     compat_chr,\n     compat_collections_abc,\n+    compat_contextlib_suppress,\n     compat_cookiejar,\n     compat_ctypes_WINFUNCTYPE,\n     compat_datetime_timedelta_total_seconds,\n@@ -1855,25 +1856,18 @@ def write_json_file(obj, fn):\n     try:\n         with tf:\n             json.dump(obj, tf)\n-        if sys.platform == 'win32':\n-            # Need to remove existing file on Windows, else os.rename raises\n-            # WindowsError or FileExistsError.\n-            try:\n+        with compat_contextlib_suppress(OSError):\n+            if sys.platform == 'win32':\n+                # Need to remove existing file on Windows, else os.rename raises\n+                # WindowsError or FileExistsError.\n                 os.unlink(fn)\n-            except OSError:\n-                pass\n-        try:\n             mask = os.umask(0)\n             os.umask(mask)\n             os.chmod(tf.name, 0o666 & ~mask)\n-        except OSError:\n-            pass\n         os.rename(tf.name, fn)\n     except Exception:\n-        try:\n+        with compat_contextlib_suppress(OSError):\n             os.remove(tf.name)\n-        except OSError:\n-            pass\n         raise\n \n \n@@ -2033,14 +2027,13 @@ def extract_attributes(html_element):\n     NB HTMLParser is stricter in Python 2.6 & 3.2 than in later versions,\n     but the cases in the unit test will work for all of 2.6, 2.7, 3.2-3.5.\n     \"\"\"\n-    parser = HTMLAttributeParser()\n-    try:\n-        parser.feed(html_element)\n-        parser.close()\n-    # Older Python may throw HTMLParseError in case of malformed HTML\n-    except compat_HTMLParseError:\n-        pass\n-    return parser.attrs\n+    ret = None\n+    # Older Python may throw HTMLParseError in case of malformed HTML (and on .close()!)\n+    with compat_contextlib_suppress(compat_HTMLParseError):\n+        with contextlib.closing(HTMLAttributeParser()) as parser:\n+            parser.feed(html_element)\n+            ret = parser.attrs\n+    return ret or {}\n \n \n def clean_html(html):\n@@ -2241,7 +2234,8 @@ def _htmlentity_transform(entity_with_semicolon):\n             numstr = '0%s' % numstr\n         else:\n             base = 10\n-        # See https://github.com/ytdl-org/youtube-dl/issues/7518\n+        # See https://github.com/ytdl-org/youtube-dl/issues/7518\\\n+        # Also, weirdly, compat_contextlib_suppress fails here in 2.6\n         try:\n             return compat_chr(int(numstr, base))\n         except ValueError:\n@@ -2348,11 +2342,9 @@ def set_alpn_protocols(ctx):\n         # Some servers may (wrongly) reject requests if ALPN extension is not sent. See:\n         # https://github.com/python/cpython/issues/85140\n         # https://github.com/yt-dlp/yt-dlp/issues/3878\n-        try:\n+        with compat_contextlib_suppress(AttributeError, NotImplementedError):\n+            # fails for Python < 2.7.10, not ssl.HAS_ALPN\n             ctx.set_alpn_protocols(ALPN_PROTOCOLS)\n-        except (AttributeError, NotImplementedError):\n-            # Python < 2.7.10, not ssl.HAS_ALPN\n-            pass\n \n     opts_no_check_certificate = params.get('nocheckcertificate', False)\n     if hasattr(ssl, 'create_default_context'):  # Python >= 3.4 or 2.7.9\n@@ -2362,12 +2354,10 @@ def set_alpn_protocols(ctx):\n             context.check_hostname = False\n             context.verify_mode = ssl.CERT_NONE\n \n-        try:\n+        with compat_contextlib_suppress(TypeError):\n+            # Fails with Python 2.7.8 (create_default_context present\n+            # but HTTPSHandler has no context=)\n             return YoutubeDLHTTPSHandler(params, context=context, **kwargs)\n-        except TypeError:\n-            # Python 2.7.8\n-            # (create_default_context present but HTTPSHandler has no context=)\n-            pass\n \n     if sys.version_info < (3, 2):\n         return YoutubeDLHTTPSHandler(params, **kwargs)\n@@ -3176,12 +3166,10 @@ def parse_iso8601(date_str, delimiter='T', timezone=None):\n     if timezone is None:\n         timezone, date_str = extract_timezone(date_str)\n \n-    try:\n+    with compat_contextlib_suppress(ValueError):\n         date_format = '%Y-%m-%d{0}%H:%M:%S'.format(delimiter)\n         dt = datetime.datetime.strptime(date_str, date_format) - timezone\n         return calendar.timegm(dt.timetuple())\n-    except ValueError:\n-        pass\n \n \n def date_formats(day_first=True):\n@@ -3201,17 +3189,13 @@ def unified_strdate(date_str, day_first=True):\n     _, date_str = extract_timezone(date_str)\n \n     for expression in date_formats(day_first):\n-        try:\n+        with compat_contextlib_suppress(ValueError):\n             upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n-        except ValueError:\n-            pass\n     if upload_date is None:\n         timetuple = email.utils.parsedate_tz(date_str)\n         if timetuple:\n-            try:\n+            with compat_contextlib_suppress(ValueError):\n                 upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n-            except ValueError:\n-                pass\n     if upload_date is not None:\n         return compat_str(upload_date)\n \n@@ -3240,11 +3224,9 @@ def unified_timestamp(date_str, day_first=True):\n         date_str = m.group(1)\n \n     for expression in date_formats(day_first):\n-        try:\n+        with compat_contextlib_suppress(ValueError):\n             dt = datetime.datetime.strptime(date_str, expression) - timezone + datetime.timedelta(hours=pm_delta)\n             return calendar.timegm(dt.timetuple())\n-        except ValueError:\n-            pass\n     timetuple = email.utils.parsedate_tz(date_str)\n     if timetuple:\n         return calendar.timegm(timetuple) + pm_delta * 3600 - compat_datetime_timedelta_total_seconds(timezone)\n",
        "test_patch": "diff --git a/test/test_downloader_external.py b/test/test_downloader_external.py\nindex 029f9b05f64..4491bd9dee6 100644\n--- a/test/test_downloader_external.py\n+++ b/test/test_downloader_external.py\n@@ -18,6 +18,7 @@\n )\n from youtube_dl import YoutubeDL\n from youtube_dl.compat import (\n+    compat_contextlib_suppress,\n     compat_http_cookiejar_Cookie,\n     compat_http_server,\n     compat_kwargs,\n@@ -35,6 +36,9 @@\n     HttpieFD,\n     WgetFD,\n )\n+from youtube_dl.postprocessor import (\n+    FFmpegPostProcessor,\n+)\n import threading\n \n TEST_SIZE = 10 * 1024\n@@ -227,7 +231,17 @@ def test_make_cmd(self):\n             self.assertIn('--load-cookies=%s' % downloader._cookies_tempfile, cmd)\n \n \n-@ifExternalFDAvailable(FFmpegFD)\n+# Handle delegated availability\n+def ifFFmpegFDAvailable(externalFD):\n+    # raise SkipTest, or set False!\n+    avail = ifExternalFDAvailable(externalFD) and False\n+    with compat_contextlib_suppress(Exception):\n+        avail = FFmpegPostProcessor(downloader=None).available\n+    return unittest.skipUnless(\n+        avail, externalFD.get_basename() + ' not found')\n+\n+\n+@ifFFmpegFDAvailable(FFmpegFD)\n class TestFFmpegFD(unittest.TestCase):\n     _args = []\n \n",
        "problem_statement": "External-downloader \"ffmpeg\" does not understand ffmpeg-location parameter\nYoutubeDownloader does not use `ffmpeg-location`  path for an `external-downloader` argument I think? Full folder value did not work in an external args.\r\n\r\n```\r\nyoutube-dl.exe --verbose ^\r\n --ffmpeg-location \"c:/apps/ffmpeg\" ^\r\n --format \"(bestvideo[height<=1080][ext=mp4])+(bestaudio[asr=48000][ext=webm])\" ^\r\n --external-downloader ffmpeg --external-downloader-args \"-ss 00:00:00.00 -to 00:01:00.00\" ^\r\n \"https://www.youtube.com/watch?v=1JWEb2uKZ28\" ^\r\n --merge-output-format mp4 -o \"wildlife.mp4\"\r\n```\r\n\r\nI had to put ffmpeg folder to PATH then external downloader worked.\r\n`set path=%path%;c:\\apps\\ffmpeg\"`\r\n\r\n**Feature Request** If external download is ffmpeg then try to use `ffmpeg-location` folder.\r\n\r\nps: Or is there a downlod time limit parameter already without using an external ffmpeg trick?\n",
        "hints_text": "I don't have a Windows test setup to hand but this has always worked before.\r\n\r\nSetting `--external-downloader ffmpeg --ffmpeg-location ./foo`, where `./foo` contains a (a link to) the _ffmpeg_ binary leads to this downloader output:\r\n```\r\n...\r\n[debug] ffmpeg command line: ./foo/ffmpeg -y -loglevel verbose -headers 'Accept-Lan\r\nguage: en-us,en;q=0.5\r\n...\r\n```\r\nPlease post the text log of your failing command, with `-v`/`--verbose`.\r\n\r\nI suppose `\"c:/dir1/dir2\"` is understood and shouldn't be `\"c:\\\\dir1\\\\dir2\"` or some such?\nExact error is `Requested external downloader cannot be used: ignoring --external-downloader-args` and app fallback to an internal downloader. It cannot use a duration limitter so 1h of video is downloaded and then must be trimmed post-process.\r\n\r\nI tried a combination of ffmpeg-location values nothing helps.\r\nExternal downloader works **if I put ffmpeg folder to dos PATH variable**  `set path=%path%;c:\\apps\\ffmpeg`\r\n\r\n```\r\n--ffmpeg-location \"c:/apps/ffmpeg\"\r\n--ffmpeg-location \"c:\\apps\\ffmpeg\"\r\n--ffmpeg-location \"c:\\\\apps\\\\ffmpeg\"\r\n--ffmpeg-location \"c:/apps/ffmpeg/\"\r\n--ffmpeg-location \"c:/apps/ffmpeg/ffmpeg.exe\"\r\n--external-downloader \"c:/apps/ffmpeg.exe\"\r\n--external-downloader \"c:\\apps\\ffmpeg.exe\"\r\n--external-downloader \"c:/apps/ffmpeg\"\r\n--external-downloader \"c:\\apps\\ffmpeg\"\r\n\r\nyoutube-dl.exe --verbose ^\r\n --ffmpeg-location \"c:/apps/ffmpeg\" ^\r\n --external-downloader ffmpeg ^\r\n --external-downloader-args \"-ss 00:00:00 -to 00:00:30\" ^\r\n --format \"(bestvideo[height<=1080][ext=mp4])+(bestaudio[asr=48000][ext=webm])\" ^\r\n \"https://www.youtube.com/watch?v=1JWEb2uKZ28\" ^\r\n --merge-output-format mp4 -o test.mp4\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['--verbose', '--external-downloader', 'ffmpeg', '--ffmpeg-location', 'c:/apps/ffmpeg', '--external-downloader-args', '-ss 00:00:00 -to 00:00:30', '--format', '(bestvideo[height<=1080][ext=mp4])+(bestaudio[asr=48000][ext=webm])', 'https://www.youtube.com/watch?v=1JWEb2uKZ28', '--merge-output-format', 'mp4', '-o', 'test.mp4']\r\n[debug] Encodings: locale cp1252, fs mbcs, out cp437, pref cp1252\r\n[debug] youtube-dl version 2024.02.23 [40bd5c181] (single file build)\r\n[debug] ** This version was built from the latest master code at https://github.com/ytdl-org/youtube-dl.\r\n[debug] Python 3.4.4 (CPython AMD64 32bit) - Windows-10-10.0.19041 - OpenSSL 1.0.2d 9 Jul 2015\r\n[debug] exe versions: ffmpeg N-113115-gf01f31d39a, ffprobe N-113115-gf01f31d39a\r\n[debug] Proxy map: {}\r\nWARNING: Requested external downloader cannot be used: ignoring --external-downloader-args.\r\n[debug] Invoking downloader on 'https://rr2---sn-xap5-uh2el.googlevideo.com/videoplayback....'\r\n[dashsegments] Total fragments: 115\r\n[download] Destination: test.f137.mp4\r\n[download]   2.1% of ~1.12GiB at  7.70MiB/s ETA 02:26\r\n```\r\n\r\nI took a `git clone` sources to a local folder to debug what happens but am unable to run youtubeDL directly from the sources folder, how do I do it with a windows python3.exe?\n`cd` into the cloned `youtube-dl` directory (that contains `AUTHORS`). Then use `python3 -m youtube_dl` as the yt-dl command.\r\n\r\nThe `--ffmpeg-location` is a valid pathname, or there would be a `ffmpeg-location ... does not exist ...` warning.\r\n\r\nThe `ffmpeg` in that location is found, or there would be a `Cannot identify executable ...` warning.\r\n\r\nThere is this fragment in the _ffmpeg_ downloader class:\r\n```py\r\n    @classmethod\r\n    def available(cls, path=None):\r\n        # TODO: Fix path for ffmpeg\r\n        # Fixme: This may be wrong when --ffmpeg-location is used\r\n        return FFmpegPostProcessor().available\r\n```\r\nProbably the comment author had in mind that the `available` is an instance method that is being called on the class, and so doesn't take account of initialisation that occurs at instance creation. You'd think there'd be a _flake8_ diagnostic for that. However the wrongness would be in the wrong direction: the static `available` value would be `True` but after trying to find the executable at instance creation the instance value might be `False`. This could happen if the program is invalid (but we know it's not) or if its version output can't be parsed. \nThanks, had to edit an adhoc python syslib folder, without it an error `module not found` in my environment. I can now debug this behaviour. For now I just downloaded few youtube files using `set PATH` fix.\r\n\r\n```\r\nClone sources\r\n  cd C:\\apps\\youtube-dl\r\n  git clone --depth 1 https://github.com/ytdl-org/youtube-dl.git\r\n  cd C:\\apps\\youtube-dl\\youtube-dl\r\n  c:\\apps\\python-3.10.7\\python.exe -m site\r\nEdit python syslib _pth text file:\r\n  c:\\apps\\python-3.10.7\\python310._pth\r\nAdd path to an adhoc project module.\r\n  C:/apps/youtube-dl/youtube-dl\r\nList new syslib values and run app directly from the git sources folder\r\n  c:\\apps\\python-3.10.7\\python.exe -m site\r\n  \"c:\\apps\\python-3.10.7\\python.exe\" -m youtube_dl --help\r\n```\r\n\nI guess the .pth setting is an alternative to setting the current directory.\n@dirkf Indeed is as you said a problem with method static-class-instance scope. Hardcoding `def available(cls): return True` \"fixed\" this problem with an external ffmpeg downloader, original code returns false which is not expected.\r\n\r\nhttps://github.com/ytdl-org/youtube-dl/blob/40bd5c18153afe765caa6726302ee1dd8a9a2ce6/youtube_dl/downloader/external.py#L363\r\n\r\nI made a quick fix possibly not breaking the internal logic, use a class attribute to remember ffmpeg variable and check for instance+class variable in `available()` function.\r\n```\r\nFile ffmpeg.py:\r\nclass FFmpegPostProcessor(PostProcessor):\r\n    cls_basename = None ## see _determine_executables() and available()\r\n   ...clip...\r\n\t\r\n   def _determine_executables(self):\r\n        ...clip...at the end of function do this hack\r\n        if FFmpegPostProcessor.cls_basename is None: \r\n            FFmpegPostProcessor.cls_basename = self.basename\r\n\r\n    @property\r\n    def available(self):\r\n        return self.basename is not None or FFmpegPostProcessor.cls_basename is not None\r\n\r\n```\r\n\r\nRun from the sources folder\r\n```\r\ncd \"C:\\apps\\youtube-dl\\youtube-dl\"\r\n\"c:\\apps\\python-3.10.7\\python.exe\" -m youtube_dl ^\r\n --verbose ^\r\n --ffmpeg-location \"c:/apps/ffmpeg/\" ^\r\n --external-downloader \"ffmpeg\" ^\r\n --external-downloader-args \"-ss 00:00:00 -to 00:00:10\" ^\r\n --format \"(bestvideo[height<=1080][ext=mp4])+(bestaudio[asr=48000][ext=webm])\" ^\r\n \"https://www.youtube.com/watch?v=1JWEb2uKZ28\" ^\r\n --merge-output-format mp4 -o \"../test.mp4\"\r\n ```\r\n\nI think I understand the issue properly now.\r\n\r\nYour case is failing with `ed.can_download(info_dict)` being falsy, which leads to the \"Requested external downloader cannot be used: ...\" warning. Then `FFmpegFD` is being selected as downloader because `protocol.startswith('m3u8') and info_dict.get('is_live')` is truthy (ie, regardless of the `--extermnal-downloader`) (all in `downloader/__init__.py`).\r\n\r\n`ed.can_download(info_dict)` is falsy because its first subcondition `ed.available()` is falsy, which in turn is because the 'basename` of a `FFmpegPostProcessor` created without reference to the yt-dl instance is `None` (since the yt-dl instance is how it finds out about `--ffmpeg-location`).\r\n\r\nPassing `downloader=self.ydl` to the constructor in `FFmpegFD._call_downloader()` instead of `downloader=self` (that is an actual bug, I think, caused by misunderstanding what `downloader` is supposed to mean, and still present in _yt-dlp_) should result in finding the executable but it's too late to recover the `--external-downloader-args`.\r\n\r\nI think that combining this with your hack to hard-code the result of `FFmpegFD.available()` could give an adequate complete solution.",
        "created_at": "2024-03-11T00:29:14Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_downloader_external.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 32725,
        "instance_id": "ytdl-org__youtube-dl-32725",
        "issue_numbers": [
            "32716",
            "32452"
        ],
        "base_commit": "f0812d784836d18fd25ea32f9b5a0c9c6e92425b",
        "patch": "diff --git a/youtube_dl/extractor/common.py b/youtube_dl/extractor/common.py\nindex 0e5dfd8fa99..7fae9e57bab 100644\n--- a/youtube_dl/extractor/common.py\n+++ b/youtube_dl/extractor/common.py\n@@ -25,6 +25,7 @@\n     compat_getpass,\n     compat_integer_types,\n     compat_http_client,\n+    compat_kwargs,\n     compat_map as map,\n     compat_open as open,\n     compat_os_name,\n@@ -1102,6 +1103,60 @@ def _search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, f\n             self._downloader.report_warning('unable to extract %s' % _name + bug_reports_message())\n             return None\n \n+    def _search_json(self, start_pattern, string, name, video_id, **kwargs):\n+        \"\"\"Searches string for the JSON object specified by start_pattern\"\"\"\n+\n+        # self, start_pattern, string, name, video_id, *, end_pattern='',\n+        # contains_pattern=r'{(?s:.+)}', fatal=True, default=NO_DEFAULT\n+        # NB: end_pattern is only used to reduce the size of the initial match\n+        end_pattern = kwargs.pop('end_pattern', '')\n+        # (?:[\\s\\S]) simulates (?(s):.) (eg)\n+        contains_pattern = kwargs.pop('contains_pattern', r'{[\\s\\S]+}')\n+        fatal = kwargs.pop('fatal', True)\n+        default = kwargs.pop('default', NO_DEFAULT)\n+\n+        if default is NO_DEFAULT:\n+            default, has_default = {}, False\n+        else:\n+            fatal, has_default = False, True\n+\n+        json_string = self._search_regex(\n+            r'(?:{0})\\s*(?P<json>{1})\\s*(?:{2})'.format(\n+                start_pattern, contains_pattern, end_pattern),\n+            string, name, group='json', fatal=fatal, default=None if has_default else NO_DEFAULT)\n+        if not json_string:\n+            return default\n+\n+        # yt-dlp has a special JSON parser that allows trailing text.\n+        # Until that arrives here, the diagnostic from the exception\n+        # raised by json.loads() is used to extract the wanted text.\n+        # Either way, it's a problem if a transform_source() can't\n+        # handle the trailing text.\n+\n+        # force an exception\n+        kwargs['fatal'] = True\n+\n+        # self._downloader._format_err(name, self._downloader.Styles.EMPHASIS)\n+        for _ in range(2):\n+            try:\n+                # return self._parse_json(json_string, video_id, ignore_extra=True, **kwargs)\n+                transform_source = kwargs.pop('transform_source', None)\n+                if transform_source:\n+                    json_string = transform_source(json_string)\n+                return self._parse_json(json_string, video_id, **compat_kwargs(kwargs))\n+            except ExtractorError as e:\n+                end = int_or_none(self._search_regex(r'\\(char\\s+(\\d+)', error_to_compat_str(e), 'end', default=None))\n+                if end is not None:\n+                    json_string = json_string[:end]\n+                    continue\n+                msg = 'Unable to extract {0} - Failed to parse JSON'.format(name)\n+                if fatal:\n+                    raise ExtractorError(msg, cause=e.cause, video_id=video_id)\n+                elif not has_default:\n+                    self.report_warning(\n+                        '{0}: {1}'.format(msg, error_to_compat_str(e)), video_id=video_id)\n+            return default\n+\n     def _html_search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None):\n         \"\"\"\n         Like _search_regex, but strips HTML tags and unescapes entities.\n@@ -2966,25 +3021,22 @@ def manifest_url(manifest):\n         return formats\n \n     def _find_jwplayer_data(self, webpage, video_id=None, transform_source=js_to_json):\n-        mobj = re.search(\n-            r'''(?s)jwplayer\\s*\\(\\s*(?P<q>'|\")(?!(?P=q)).+(?P=q)\\s*\\)(?!</script>).*?\\.\\s*setup\\s*\\(\\s*(?P<options>(?:\\([^)]*\\)|[^)])+)\\s*\\)''',\n-            webpage)\n-        if mobj:\n-            try:\n-                jwplayer_data = self._parse_json(mobj.group('options'),\n-                                                 video_id=video_id,\n-                                                 transform_source=transform_source)\n-            except ExtractorError:\n-                pass\n-            else:\n-                if isinstance(jwplayer_data, dict):\n-                    return jwplayer_data\n+        return self._search_json(\n+            r'''(?<!-)\\bjwplayer\\s*\\(\\s*(?P<q>'|\")(?!(?P=q)).+(?P=q)\\s*\\)(?:(?!</script>).)*?\\.\\s*(?:setup\\s*\\(|(?P<load>load)\\s*\\(\\s*\\[)''',\n+            webpage, 'JWPlayer data', video_id,\n+            # must be a {...} or sequence, ending\n+            contains_pattern=r'\\{[\\s\\S]*}(?(load)(?:\\s*,\\s*\\{[\\s\\S]*})*)', end_pattern=r'(?(load)\\]|\\))',\n+            transform_source=transform_source, default=None)\n \n     def _extract_jwplayer_data(self, webpage, video_id, *args, **kwargs):\n-        jwplayer_data = self._find_jwplayer_data(\n-            webpage, video_id, transform_source=js_to_json)\n-        return self._parse_jwplayer_data(\n-            jwplayer_data, video_id, *args, **kwargs)\n+\n+        # allow passing `transform_source` through to _find_jwplayer_data()\n+        transform_source = kwargs.pop('transform_source', None)\n+        kwfind = compat_kwargs({'transform_source': transform_source}) if transform_source else {}\n+\n+        jwplayer_data = self._find_jwplayer_data(webpage, video_id, **kwfind)\n+\n+        return self._parse_jwplayer_data(jwplayer_data, video_id, *args, **kwargs)\n \n     def _parse_jwplayer_data(self, jwplayer_data, video_id=None, require_title=True,\n                              m3u8_id=None, mpd_id=None, rtmp_params=None, base_url=None):\n@@ -3018,22 +3070,14 @@ def _parse_jwplayer_data(self, jwplayer_data, video_id=None, require_title=True,\n                 mpd_id=mpd_id, rtmp_params=rtmp_params, base_url=base_url)\n \n             subtitles = {}\n-            tracks = video_data.get('tracks')\n-            if tracks and isinstance(tracks, list):\n-                for track in tracks:\n-                    if not isinstance(track, dict):\n-                        continue\n-                    track_kind = track.get('kind')\n-                    if not track_kind or not isinstance(track_kind, compat_str):\n-                        continue\n-                    if track_kind.lower() not in ('captions', 'subtitles'):\n-                        continue\n-                    track_url = urljoin(base_url, track.get('file'))\n-                    if not track_url:\n-                        continue\n-                    subtitles.setdefault(track.get('label') or 'en', []).append({\n-                        'url': self._proto_relative_url(track_url)\n-                    })\n+            for track in traverse_obj(video_data, (\n+                    'tracks', lambda _, t: t.get('kind').lower() in ('captions', 'subtitles'))):\n+                track_url = urljoin(base_url, track.get('file'))\n+                if not track_url:\n+                    continue\n+                subtitles.setdefault(track.get('label') or 'en', []).append({\n+                    'url': self._proto_relative_url(track_url)\n+                })\n \n             entry = {\n                 'id': this_video_id,\ndiff --git a/youtube_dl/extractor/extractors.py b/youtube_dl/extractor/extractors.py\nindex 82221445fc2..285f3dd5f3c 100644\n--- a/youtube_dl/extractor/extractors.py\n+++ b/youtube_dl/extractor/extractors.py\n@@ -382,7 +382,6 @@\n     FC2EmbedIE,\n )\n from .fczenit import FczenitIE\n-from .filemoon import FileMoonIE\n from .fifa import FifaIE\n from .filmon import (\n     FilmOnIE,\ndiff --git a/youtube_dl/extractor/filemoon.py b/youtube_dl/extractor/filemoon.py\ndeleted file mode 100644\nindex 654df9b6915..00000000000\n--- a/youtube_dl/extractor/filemoon.py\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-# coding: utf-8\n-from __future__ import unicode_literals\n-\n-import re\n-\n-from .common import InfoExtractor\n-from ..utils import (\n-    decode_packed_codes,\n-    js_to_json,\n-)\n-\n-\n-class FileMoonIE(InfoExtractor):\n-    _VALID_URL = r'https?://(?:www\\.)?filemoon\\.sx/./(?P<id>\\w+)'\n-    _TEST = {\n-        'url': 'https://filemoon.sx/e/dw40rxrzruqz',\n-        'md5': '5a713742f57ac4aef29b74733e8dda01',\n-        'info_dict': {\n-            'id': 'dw40rxrzruqz',\n-            'title': 'dw40rxrzruqz',\n-            'ext': 'mp4'\n-        }\n-    }\n-\n-    def _real_extract(self, url):\n-        video_id = self._match_id(url)\n-\n-        webpage = self._download_webpage(url, video_id)\n-        matches = re.findall(r'(?s)(eval.*?)</script>', webpage)\n-        packed = matches[-1]\n-        unpacked = decode_packed_codes(packed)\n-        jwplayer_sources = self._parse_json(\n-            self._search_regex(\n-                r'(?s)player\\s*\\.\\s*setup\\s*\\(\\s*\\{\\s*sources\\s*:\\s*(.*?])', unpacked, 'jwplayer sources'),\n-            video_id, transform_source=js_to_json)\n-\n-        formats = self._parse_jwplayer_formats(jwplayer_sources, video_id)\n-\n-        return {\n-            'id': video_id,\n-            'title': self._generic_title(url) or video_id,\n-            'formats': formats\n-        }\ndiff --git a/youtube_dl/extractor/xfileshare.py b/youtube_dl/extractor/xfileshare.py\nindex df9efa9faed..4dc3032e7e0 100644\n--- a/youtube_dl/extractor/xfileshare.py\n+++ b/youtube_dl/extractor/xfileshare.py\n@@ -4,20 +4,28 @@\n import re\n \n from .common import InfoExtractor\n-from ..compat import compat_chr\n+from ..compat import (\n+    compat_chr,\n+    compat_zip as zip,\n+)\n from ..utils import (\n+    clean_html,\n     decode_packed_codes,\n     determine_ext,\n     ExtractorError,\n+    get_element_by_id,\n     int_or_none,\n-    js_to_json,\n+    merge_dicts,\n+    T,\n+    traverse_obj,\n+    url_or_none,\n     urlencode_postdata,\n )\n \n \n # based on openload_decode from 2bfeee69b976fe049761dd3012e30b637ee05a58\n def aa_decode(aa_code):\n-    symbol_table = [\n+    symbol_table = (\n         ('7', '((\uff9f\uff70\uff9f) + (o^_^o))'),\n         ('6', '((o^_^o) +(o^_^o))'),\n         ('5', '((\uff9f\uff70\uff9f) + (\uff9f\u0398\uff9f))'),\n@@ -26,84 +34,180 @@ def aa_decode(aa_code):\n         ('3', '(o^_^o)'),\n         ('1', '(\uff9f\u0398\uff9f)'),\n         ('0', '(c^_^o)'),\n-    ]\n+        ('+', ''),\n+    )\n     delim = '(\uff9f\u0414\uff9f)[\uff9f\u03b5\uff9f]+'\n-    ret = ''\n-    for aa_char in aa_code.split(delim):\n+\n+    def chr_from_code(c):\n         for val, pat in symbol_table:\n-            aa_char = aa_char.replace(pat, val)\n-        aa_char = aa_char.replace('+ ', '')\n-        m = re.match(r'^\\d+', aa_char)\n-        if m:\n-            ret += compat_chr(int(m.group(0), 8))\n+            c = c.replace(pat, val)\n+        if c.startswith(('u', 'U')):\n+            base = 16\n+            c = c[1:]\n         else:\n-            m = re.match(r'^u([\\da-f]+)', aa_char)\n-            if m:\n-                ret += compat_chr(int(m.group(1), 16))\n-    return ret\n+            base = 10\n+        c = int_or_none(c, base=base)\n+        return '' if c is None else compat_chr(c)\n+\n+    return ''.join(\n+        chr_from_code(aa_char)\n+        for aa_char in aa_code.split(delim))\n \n \n class XFileShareIE(InfoExtractor):\n     _SITES = (\n-        (r'aparat\\.cam', 'Aparat'),\n-        (r'clipwatching\\.com', 'ClipWatching'),\n-        (r'gounlimited\\.to', 'GoUnlimited'),\n-        (r'govid\\.me', 'GoVid'),\n-        (r'holavid\\.com', 'HolaVid'),\n-        (r'streamty\\.com', 'Streamty'),\n-        (r'thevideobee\\.to', 'TheVideoBee'),\n-        (r'uqload\\.com', 'Uqload'),\n-        (r'vidbom\\.com', 'VidBom'),\n-        (r'vidlo\\.us', 'vidlo'),\n-        (r'vidlocker\\.xyz', 'VidLocker'),\n-        (r'vidshare\\.tv', 'VidShare'),\n-        (r'vup\\.to', 'VUp'),\n+        # status check 2024-02: site availability, G site: search\n+        (r'aparat\\.cam', 'Aparat'),  # Cloudflare says host error 522, apparently changed to wolfstreeam.tv\n+        (r'filemoon\\.sx/.', 'FileMoon'),\n+        (r'gounlimited\\.to', 'GoUnlimited'),  # no media pages listed\n+        (r'govid\\.me', 'GoVid'),  # no media pages listed\n+        (r'highstream\\.tv', 'HighStream'),  # clipwatching.com redirects here\n+        (r'holavid\\.com', 'HolaVid'),  # Cloudflare says host error 522\n+        # (r'streamty\\.com', 'Streamty'),  # no media pages listed, connection timeout\n+        # (r'thevideobee\\.to', 'TheVideoBee'),  # no pages listed, refuses connection\n+        (r'uqload\\.to', 'Uqload'),  # .com, .co redirect here\n+        (r'(?:vedbam\\.xyz|vadbam.net)', 'V?dB?m'),  # vidbom.com redirects here, but no valid media pages listed\n+        (r'vidlo\\.us', 'vidlo'),  # no valid media pages listed\n+        (r'vidlocker\\.xyz', 'VidLocker'),  # no media pages listed\n+        (r'(?:w\\d\\.)?viidshar\\.com', 'VidShare'),  # vidshare.tv redirects here\n+        # (r'vup\\.to', 'VUp'),  # domain not found\n         (r'wolfstream\\.tv', 'WolfStream'),\n-        (r'xvideosharing\\.com', 'XVideoSharing'),\n+        (r'xvideosharing\\.com', 'XVideoSharing'),  # just started showing 'maintenance mode'\n     )\n \n-    IE_DESC = 'XFileShare based sites: %s' % ', '.join(list(zip(*_SITES))[1])\n+    IE_DESC = 'XFileShare-based sites: %s' % ', '.join(list(zip(*_SITES))[1])\n     _VALID_URL = (r'https?://(?:www\\.)?(?P<host>%s)/(?:embed-)?(?P<id>[0-9a-zA-Z]+)'\n                   % '|'.join(site for site in list(zip(*_SITES))[0]))\n+    _EMBED_REGEX = [r'<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:https?:)?//(?:%s)/embed-[0-9a-zA-Z]+.*?)\\1' % '|'.join(site for site in list(zip(*_SITES))[0])]\n \n     _FILE_NOT_FOUND_REGEXES = (\n         r'>(?:404 - )?File Not Found<',\n         r'>The file was removed by administrator<',\n     )\n+    _TITLE_REGEXES = (\n+        r'style=\"z-index: [0-9]+;\">([^<]+)</span>',\n+        r'<td nowrap>([^<]+)</td>',\n+        r'h4-fine[^>]*>([^<]+)<',\n+        r'>Watch (.+)[ <]',\n+        r'<h2 class=\"video-page-head\">([^<]+)</h2>',\n+        r'<h2 style=\"[^\"]*color:#403f3d[^\"]*\"[^>]*>([^<]+)<',  # streamin.to (dead)\n+        r'title\\s*:\\s*\"([^\"]+)\"',  # govid.me\n+    )\n+    _SOURCE_URL_REGEXES = (\n+        r'(?:file|src)\\s*:\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1',\n+        r'file_link\\s*=\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+)\\1',\n+        r'addVariable\\((\\\\?[\"\\'])file\\1\\s*,\\s*(\\\\?[\"\\'])(?P<url>http(?:(?!\\2).)+)\\2\\)',\n+        r'<embed[^>]+src=([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1',\n+    )\n+    _THUMBNAIL_REGEXES = (\n+        r'<video[^>]+poster=\"([^\"]+)\"',\n+        r'(?:image|poster)\\s*:\\s*[\"\\'](http[^\"\\']+)[\"\\'],',\n+    )\n \n     _TESTS = [{\n-        'url': 'http://xvideosharing.com/fq65f94nd2ve',\n-        'md5': '4181f63957e8fe90ac836fa58dc3c8a6',\n+        'note': 'link in `sources`',\n+        'url': 'https://uqload.to/dcsu06gdb45o',\n+        'md5': '7f8db187b254379440bf4fcad094ae86',\n         'info_dict': {\n-            'id': 'fq65f94nd2ve',\n+            'id': 'dcsu06gdb45o',\n             'ext': 'mp4',\n-            'title': 'sample',\n-            'thumbnail': r're:http://.*\\.jpg',\n+            'title': 'f2e31015957e74c8c8427982e161c3fc mp4',\n+            'thumbnail': r're:https://.*\\.jpg'\n+        },\n+        'params': {\n+            'nocheckcertificate': True,\n+        },\n+        'expected_warnings': ['Unable to extract JWPlayer data'],\n+    }, {\n+        'note': 'link in decoded `sources`',\n+        'url': 'https://xvideosharing.com/1tlg6agrrdgc',\n+        'md5': '2608ce41932c1657ae56258a64e647d9',\n+        'info_dict': {\n+            'id': '1tlg6agrrdgc',\n+            'ext': 'mp4',\n+            'title': '0121',\n+            'thumbnail': r're:https?://.*\\.jpg',\n+        },\n+        'skip': 'This server is in maintenance mode.',\n+    }, {\n+        'note': 'JWPlayer link in un-p,a,c,k,e,d JS',\n+        'url': 'https://filemoon.sx/e/dw40rxrzruqz',\n+        'md5': '5a713742f57ac4aef29b74733e8dda01',\n+        'info_dict': {\n+            'id': 'dw40rxrzruqz',\n+            'title': 'dw40rxrzruqz',\n+            'ext': 'mp4'\n+        },\n+    }, {\n+        'note': 'JWPlayer link in un-p,a,c,k,e,d JS',\n+        'url': 'https://vadbam.net/6lnbkci96wly.html',\n+        'md5': 'a1616800076177e2ac769203957c54bc',\n+        'info_dict': {\n+            'id': '6lnbkci96wly',\n+            'title': 'Heart Crime S01 E03 weciima autos',\n+            'ext': 'mp4'\n+        },\n+    }, {\n+        'note': 'JWPlayer link in clear',\n+        'url': 'https://w1.viidshar.com/nnibe0xf0h79.html',\n+        'md5': 'f0a580ce9df06cc61b4a5c979d672367',\n+        'info_dict': {\n+            'id': 'nnibe0xf0h79',\n+            'title': 'JaGa 68ar',\n+            'ext': 'mp4'\n+        },\n+        'params': {\n+            'skip_download': 'ffmpeg',\n+        },\n+        'expected_warnings': ['hlsnative has detected features it does not support'],\n+    }, {\n+        'note': 'JWPlayer link in clear',\n+        'url': 'https://wolfstream.tv/a3drtehyrg52.html',\n+        'md5': '1901d86a79c5e0c6a51bdc9a4cfd3769',\n+        'info_dict': {\n+            'id': 'a3drtehyrg52',\n+            'title': 'NFL 2023 W04 DET@GB',\n+            'ext': 'mp4'\n         },\n     }, {\n         'url': 'https://aparat.cam/n4d6dh0wvlpr',\n         'only_matching': True,\n     }, {\n-        'url': 'https://wolfstream.tv/nthme29v9u2x',\n+        'url': 'https://uqload.to/ug5somm0ctnk.html',\n+        'only_matching': True,\n+    }, {\n+        'url': 'https://highstream.tv/2owiyz3sjoux',\n+        'only_matching': True,\n+    }, {\n+        'url': 'https://vedbam.xyz/6lnbkci96wly.html',\n         'only_matching': True,\n     }]\n \n-    @staticmethod\n-    def _extract_urls(webpage):\n-        return [\n-            mobj.group('url')\n-            for mobj in re.finditer(\n-                r'<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:https?:)?//(?:%s)/embed-[0-9a-zA-Z]+.*?)\\1'\n-                % '|'.join(site for site in list(zip(*XFileShareIE._SITES))[0]),\n-                webpage)]\n+    @classmethod\n+    def _extract_urls(cls, webpage):\n+\n+        def yield_urls():\n+            for regex in cls._EMBED_REGEX:\n+                for mobj in re.finditer(regex, webpage):\n+                    yield mobj.group('url')\n+\n+        return list(yield_urls())\n \n     def _real_extract(self, url):\n-        host, video_id = re.match(self._VALID_URL, url).groups()\n+        host, video_id = self._match_valid_url(url).group('host', 'id')\n \n-        url = 'https://%s/' % host + ('embed-%s.html' % video_id if host in ('govid.me', 'vidlo.us') else video_id)\n+        url = 'https://%s/%s' % (\n+            host,\n+            'embed-%s.html' % video_id if host in ('govid.me', 'vidlo.us') else video_id)\n         webpage = self._download_webpage(url, video_id)\n-\n-        if any(re.search(p, webpage) for p in self._FILE_NOT_FOUND_REGEXES):\n+        container_div = get_element_by_id('container', webpage) or webpage\n+        if self._search_regex(\n+                r'>This server is in maintenance mode\\.', container_div,\n+                'maint error', group=0, default=None):\n+            raise ExtractorError(clean_html(container_div), expected=True)\n+        if self._search_regex(\n+                self._FILE_NOT_FOUND_REGEXES, container_div,\n+                'missing video error', group=0, default=None):\n             raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n \n         fields = self._hidden_inputs(webpage)\n@@ -122,59 +226,43 @@ def _real_extract(self, url):\n                     'Content-type': 'application/x-www-form-urlencoded',\n                 })\n \n-        title = (self._search_regex(\n-            (r'style=\"z-index: [0-9]+;\">([^<]+)</span>',\n-             r'<td nowrap>([^<]+)</td>',\n-             r'h4-fine[^>]*>([^<]+)<',\n-             r'>Watch (.+)[ <]',\n-             r'<h2 class=\"video-page-head\">([^<]+)</h2>',\n-             r'<h2 style=\"[^\"]*color:#403f3d[^\"]*\"[^>]*>([^<]+)<',  # streamin.to\n-             r'title\\s*:\\s*\"([^\"]+)\"'),  # govid.me\n-            webpage, 'title', default=None) or self._og_search_title(\n-            webpage, default=None) or video_id).strip()\n-\n-        for regex, func in (\n-                (r'(eval\\(function\\(p,a,c,k,e,d\\){.+)', decode_packed_codes),\n-                (r'(\uff9f.+)', aa_decode)):\n-            obf_code = self._search_regex(regex, webpage, 'obfuscated code', default=None)\n-            if obf_code:\n-                webpage = webpage.replace(obf_code, func(obf_code))\n-\n-        formats = []\n-\n-        jwplayer_data = self._search_regex(\n-            [\n-                r'jwplayer\\(\"[^\"]+\"\\)\\.load\\(\\[({.+?})\\]\\);',\n-                r'jwplayer\\(\"[^\"]+\"\\)\\.setup\\(({.+?})\\);',\n-            ], webpage,\n-            'jwplayer data', default=None)\n-        if jwplayer_data:\n-            jwplayer_data = self._parse_json(\n-                jwplayer_data.replace(r\"\\'\", \"'\"), video_id, js_to_json)\n+        title = (\n+            self._search_regex(self._TITLE_REGEXES, webpage, 'title', default=None)\n+            or self._og_search_title(webpage, default=None)\n+            or video_id).strip()\n+\n+        obf_code = True\n+        while obf_code:\n+            for regex, func in (\n+                    (r'(?s)(?<!-)\\b(eval\\(function\\(p,a,c,k,e,d\\)\\{(?:(?!</script>).)+\\)\\))',\n+                     decode_packed_codes),\n+                    (r'(\uff9f.+)', aa_decode)):\n+                obf_code = self._search_regex(regex, webpage, 'obfuscated code', default=None)\n+                if obf_code:\n+                    webpage = webpage.replace(obf_code, func(obf_code))\n+                    break\n+\n+        jwplayer_data = self._find_jwplayer_data(\n+            webpage.replace(r'\\'', '\\''), video_id)\n+        result = self._parse_jwplayer_data(\n+            jwplayer_data, video_id, require_title=False,\n+            m3u8_id='hls', mpd_id='dash')\n+\n+        if not traverse_obj(result, 'formats'):\n             if jwplayer_data:\n-                formats = self._parse_jwplayer_data(\n-                    jwplayer_data, video_id, False,\n-                    m3u8_id='hls', mpd_id='dash')['formats']\n-\n-        if not formats:\n-            urls = []\n-            for regex in (\n-                    r'(?:file|src)\\s*:\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1',\n-                    r'file_link\\s*=\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+)\\1',\n-                    r'addVariable\\((\\\\?[\"\\'])file\\1\\s*,\\s*(\\\\?[\"\\'])(?P<url>http(?:(?!\\2).)+)\\2\\)',\n-                    r'<embed[^>]+src=([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1'):\n+                self.report_warning(\n+                    'Failed to extract JWPlayer formats', video_id=video_id)\n+            urls = set()\n+            for regex in self._SOURCE_URL_REGEXES:\n                 for mobj in re.finditer(regex, webpage):\n-                    video_url = mobj.group('url')\n-                    if video_url not in urls:\n-                        urls.append(video_url)\n+                    urls.add(mobj.group('url'))\n \n             sources = self._search_regex(\n                 r'sources\\s*:\\s*(\\[(?!{)[^\\]]+\\])', webpage, 'sources', default=None)\n-            if sources:\n-                urls.extend(self._parse_json(sources, video_id))\n+            urls.update(traverse_obj(sources, (T(lambda s: self._parse_json(s, video_id)), Ellipsis)))\n \n             formats = []\n-            for video_url in urls:\n+            for video_url in traverse_obj(urls, (Ellipsis, T(url_or_none))):\n                 if determine_ext(video_url) == 'm3u8':\n                     formats.extend(self._extract_m3u8_formats(\n                         video_url, video_id, 'mp4',\n@@ -185,17 +273,19 @@ def _real_extract(self, url):\n                         'url': video_url,\n                         'format_id': 'sd',\n                     })\n-        self._sort_formats(formats)\n+            result = {'formats': formats}\n+\n+        self._sort_formats(result['formats'])\n \n         thumbnail = self._search_regex(\n-            [\n-                r'<video[^>]+poster=\"([^\"]+)\"',\n-                r'(?:image|poster)\\s*:\\s*[\"\\'](http[^\"\\']+)[\"\\'],',\n-            ], webpage, 'thumbnail', default=None)\n+            self._THUMBNAIL_REGEXES, webpage, 'thumbnail', default=None)\n+\n+        if not (title or result.get('title')):\n+            title = self._generic_title(url) or video_id\n \n-        return {\n+        return merge_dicts(result, {\n             'id': video_id,\n-            'title': title,\n+            'title': title or None,\n             'thumbnail': thumbnail,\n-            'formats': formats,\n-        }\n+            'http_headers': {'Referer': url}\n+        })\ndiff --git a/youtube_dl/utils.py b/youtube_dl/utils.py\nindex 61b94d84c44..042c9daa50e 100644\n--- a/youtube_dl/utils.py\n+++ b/youtube_dl/utils.py\n@@ -3832,14 +3832,15 @@ def get_method(self):\n         return 'PUT'\n \n \n-def int_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n+def int_or_none(v, scale=1, default=None, get_attr=None, invscale=1, base=None):\n     if get_attr:\n         if v is not None:\n             v = getattr(v, get_attr, None)\n     if v in (None, ''):\n         return default\n     try:\n-        return int(v) * invscale // scale\n+        # like int, raise if base is specified and v is not a string\n+        return (int(v) if base is None else int(v, base=base)) * invscale // scale\n     except (ValueError, TypeError, OverflowError):\n         return default\n \n",
        "test_patch": "diff --git a/test/test_utils.py b/test/test_utils.py\nindex 102420fcb88..d1d9ca1b24e 100644\n--- a/test/test_utils.py\n+++ b/test/test_utils.py\n@@ -512,11 +512,14 @@ def test_float_or_none(self):\n         self.assertEqual(float_or_none(set()), None)\n \n     def test_int_or_none(self):\n+        self.assertEqual(int_or_none(42), 42)\n         self.assertEqual(int_or_none('42'), 42)\n         self.assertEqual(int_or_none(''), None)\n         self.assertEqual(int_or_none(None), None)\n         self.assertEqual(int_or_none([]), None)\n         self.assertEqual(int_or_none(set()), None)\n+        self.assertEqual(int_or_none('42', base=8), 34)\n+        self.assertRaises(TypeError, int_or_none(42, base=8))\n \n     def test_str_to_int(self):\n         self.assertEqual(str_to_int('123,456'), 123456)\n",
        "problem_statement": "filemoon.sx jwplayer error\n<!--\r\n\r\n######################################################################\r\n  WARNING!\r\n  IGNORING THE FOLLOWING TEMPLATE WILL RESULT IN ISSUE CLOSED AS INCOMPLETE\r\n######################################################################\r\n\r\n-->\r\n\r\n\r\n## Checklist\r\n\r\n<!--\r\nCarefully read and work through this check list in order to prevent the most common mistakes and misuse of youtube-dl:\r\n- First of, make sure you are using the latest version of youtube-dl. Run `youtube-dl --version` and ensure your version is 2021.12.17. If it's not, see https://yt-dl.org/update on how to update. Issues with outdated version will be REJECTED.\r\n- Make sure that all provided video/audio/playlist URLs (if any) are alive and playable in a browser.\r\n- Make sure that all URLs and arguments with special characters are properly quoted or escaped as explained in http://yt-dl.org/escape.\r\n- Search the bugtracker for similar issues: http://yt-dl.org/search-issues. DO NOT post duplicates.\r\n- Finally, put x into all relevant boxes (like this [x])\r\n-->\r\n\r\n- [x] I'm reporting a broken site support\r\n- [x] I'm running youtube-dl 2024.02.03 [4416f82c8]\r\n- [x] I've checked that all provided URLs are alive and playable in a browser\r\n- [x] I've checked that all URLs and arguments with special characters are properly quoted or escaped\r\n- [x] I've searched the bugtracker for similar issues including closed ones\r\n\r\n\r\n## Verbose log\r\n\r\n<!--\r\nProvide the complete verbose output of youtube-dl that clearly demonstrates the problem.\r\nAdd the `-v` flag to your command line you run youtube-dl with (`youtube-dl -v <your command line>`), copy the WHOLE output and insert it below. It should look similar to this:\r\n [debug] System config: []\r\n [debug] User config: []\r\n [debug] Command-line args: [u'-v', u'http://www.youtube.com/watch?v=BaW_jenozKcj']\r\n [debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251\r\n [debug] youtube-dl version 2021.12.17\r\n [debug] Python version 2.7.11 - Windows-2003Server-5.2.3790-SP2\r\n [debug] exe versions: ffmpeg N-75573-g1d0487f, ffprobe N-75573-g1d0487f, rtmpdump 2.4\r\n [debug] Proxy map: {}\r\n <more lines>\r\n-->\r\n\r\n```\r\nDownloads>youtube-dl --verbose https://filemoon.sx/d/dylsgj1mbwn5/video_2024-01-28_02-44-36.mp4\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['--verbose', 'https://filemoon.sx/d/dylsgj1mbwn5/video_2024-01-28_02-44-36.mp4']\r\n[debug] Encodings: locale cp1252, fs mbcs, out cp437, pref cp1252\r\n[debug] youtube-dl version 2024.02.03 [4416f82c8] (single file build)\r\n[debug] ** This version was built from the latest master code at https://github.com/ytdl-org/youtube-dl.\r\n[debug] ** For support, visit the main site.\r\n[debug] Python 3.4.4 (CPython AMD64 32bit) - Windows-10-10.0.22621 - OpenSSL 1.0.2d 9 Jul 2015\r\n[debug] exe versions: ffmpeg 6.0-full_build-www.gyan.dev, ffprobe 6.0-full_build-www.gyan.dev\r\n[debug] Proxy map: {}\r\n[FileMoon] dylsgj1mbwn5: Downloading webpage\r\nERROR: Unable to extract jwplayer sources; please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose flag and include its complete output.\r\nTraceback (most recent call last):\r\n  File \"D:\\a\\ytdl-nightly\\ytdl-nightly\\youtube_dl\\YoutubeDL.py\", line 863, in wrapper\r\n  File \"D:\\a\\ytdl-nightly\\ytdl-nightly\\youtube_dl\\YoutubeDL.py\", line 959, in __extract_info\r\n  File \"D:\\a\\ytdl-nightly\\ytdl-nightly\\youtube_dl\\extractor\\common.py\", line 570, in extract\r\n  File \"D:\\a\\ytdl-nightly\\ytdl-nightly\\youtube_dl\\extractor\\filemoon.py\", line 34, in _real_extract\r\n  File \"D:\\a\\ytdl-nightly\\ytdl-nightly\\youtube_dl\\extractor\\common.py\", line 1100, in _search_regex\r\nyoutube_dl.utils.RegexNotFoundError: Unable to extract jwplayer sources; please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose flag and include its complete output.\r\n```\r\n\r\n\r\n## Description\r\n\r\n<!--\r\nProvide an explanation of your issue in an arbitrary form. Provide any additional information, suggested solution and as much context and examples as possible.\r\nIf work on your issue requires account credentials please provide them or explain how one can obtain them.\r\n-->\r\n\r\nSite not working with error in verbose log. Please let me know if any other information is needed, thank you!\r\n\n[xfileshare] Add uqload.co support\n## Please follow the guide below\r\n\r\n- You will be asked some questions, please read them **carefully** and answer honestly\r\n- Put an `x` into all the boxes [ ] relevant to your *pull request* (like that [x])\r\n- Use *Preview* tab to see how your *pull request* will actually look like\r\n\r\n---\r\n\r\n### Before submitting a *pull request* make sure you have:\r\n- [x] [Searched](https://github.com/ytdl-org/youtube-dl/search?q=is%3Apr&type=Issues) the bugtracker for similar pull requests\r\n- [x] Read [adding new extractor tutorial](https://github.com/ytdl-org/youtube-dl#adding-support-for-a-new-site)\r\n- [x] Read [youtube-dl coding conventions](https://github.com/ytdl-org/youtube-dl#youtube-dl-coding-conventions) and adjusted the code to meet them\r\n- [x] Covered the code with tests (note that PRs without tests will be REJECTED)\r\n- [x] Checked the code with [flake8](https://pypi.python.org/pypi/flake8)\r\n\r\n### In order to be accepted and merged into youtube-dl each piece of code must be in public domain or released under [Unlicense](http://unlicense.org/). Check one of the following options:\r\n- [x] I am the original author of this code and I am willing to release it under [Unlicense](http://unlicense.org/)\r\n- [ ] I am not the original author of this code but it is in public domain or released under [Unlicense](http://unlicense.org/) (provide reliable evidence)\r\n\r\n### What is the purpose of your *pull request*?\r\n- [ ] Bug fix\r\n- [x] Improvement\r\n- [ ] New extractor\r\n- [ ] New feature\r\n\r\n---\r\n\r\n### Description of your *pull request* and other information\r\n\r\nuqload.com now redirects to uqload.co\r\n\n",
        "hints_text": "The variable name in the obfuscated JS has changed:\r\n```diff\r\n--- old/youtube_dl/extractor/filemoon.py\r\n+++ new/youtube_dl/extractor/filemoon.py\r\n@@ -31,7 +31,7 @@\r\n         unpacked = decode_packed_codes(packed)\r\n         jwplayer_sources = self._parse_json(\r\n             self._search_regex(\r\n-                r'(?s)player\\s*\\.\\s*setup\\s*\\(\\s*\\{\\s*sources\\s*:\\s*(.*?])', unpacked, 'jwplayer sources'),\r\n+                r'(?s)(?:videop|player)\\s*\\.\\s*setup\\s*\\(\\s*\\{\\s*sources\\s*:\\s*(.*?])', unpacked, 'jwplayer sources'),\r\n             video_id, transform_source=js_to_json)\r\n \r\n         formats = self._parse_jwplayer_formats(jwplayer_sources, video_id)\r\n```\nWorks as advertised. \ud83d\ude00\ufe0f\r\n\r\n```\r\nyoutube-dl -v --ignore-config -o '~/Desktop/%(title)s.%(ext)s' https://filemoon.sx/d/dylsgj1mbwn5/video_2024-01-28_02-44-36.mp4\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['-v', '--ignore-config', '-o', '~/Desktop/%(title)s.%(ext)s', 'https://filemoon.sx/d/dylsgj1mbwn5/video_2024-01-28_02-44-36.mp4']\r\n[debug] Encodings: locale UTF-8, fs utf-8, out utf-8, pref UTF-8\r\n[debug] youtube-dl version 2024.02.02\r\n[debug] Lazy loading extractors enabled\r\n[debug] Single file build\r\n[debug] Python 3.8.10 (CPython x86_64 64bit) - Linux-5.4.0-170-generic-x86_64-with-glibc2.29 - OpenSSL 1.1.1f  31 Mar 2020 - glibc 2.31\r\n[debug] exe versions: ffmpeg N-113412-g0b8e51b584-20240124, ffprobe N-113412-g0b8e51b584-20240124, phantomjs 2.1.1, rtmpdump 2.4\r\n[debug] Proxy map: {}\r\n[FileMoon] dylsgj1mbwn5: Downloading webpage\r\n[FileMoon] dylsgj1mbwn5: Downloading m3u8 information\r\n[debug] Default format spec: bestvideo+bestaudio/best\r\n[debug] Invoking downloader on 'https://be4242.rcr52.ams03.cdn112.com/hls2/01/05449/dylsgj1mbwn5_o/index-v1-a1.m3u8?t=XLKyHPQJUWtLmX3QHA5-nAUz1OBYhirC-IiISfsgZZA&s=1707073640&e=43200&f=27249932&srv=25&asn=33915&sp=2000'\r\n[hlsnative] Downloading m3u8 manifest\r\n[hlsnative] Total fragments: 1\r\n[download] Destination: /home/user/Desktop/video_2024-01-28_02-44-36.mp4\r\n[download] 100% of 787.62KiB in 00:00\r\n[debug] ffmpeg command line: ffprobe -show_streams file:/home/user/Desktop/video_2024-01-28_02-44-36.mp4\r\n[ffmpeg] Fixing malformed AAC bitstream in \"/home/user/Desktop/video_2024-01-28_02-44-36.mp4\"\r\n[debug] ffmpeg command line: ffmpeg -y -loglevel repeat+info -i file:/home/user/Desktop/video_2024-01-28_02-44-36.mp4 -c copy -f mp4 -bsf:a aac_adtstoasc file:/home/user/Desktop/video_2024-01-28_02-44-36.temp.mp4\r\n```\r\n\r\nHowever yt-dlp gives this:\r\n\r\n```\r\nERROR: [Piracy] This website is no longer supported since it has been determined to be primarily used for piracy.\r\n       DO NOT open issues for it\r\n\r\n```\nIf your head hurts when you hit it with a hammer, stop hitting it ...\r\n\r\nThe site's [copyright policy](https://filemoon.sx/copyright) does not support the categorisation as a \"Piracy\" site, though the site admins may be too busy with a major European war to enforce it.\r\n\r\nOur policy is that the initial support request should agree that\r\n>- [x] I've checked that none of provided URLs violate any copyrights\r\n\r\nPersonally I can't see that that is a useful or usually truthful (or grammatically correct) statement. Normally I like to see a DMCA policy since that is the sort of stuff that pleases people who care about copyright. This site doesn't mention that but it does say that it will remove content on receipt of a complaint supported by evidence of infringement of third-party rights. \r\n\r\nWhat we want is to make yt-dl no more liable for copyright infringement than Firefox, Chrome, Safari, or Lynx; in particular:\r\n1. to avoid anything that makes yt-dl seem like a sort of Napster, solely dedicated to processing content whose providers have no right to distribute it\r\n2. to avoid including URLs of such content in test cases (such as those that had to be removed in 2021).\nThanks.\r\n>[x] Covered the code with tests (note that PRs without tests will be REJECTED)\r\n\r\nNot so much, really. At a minimum there should be an `only_matching` test; ideally an actual test video that can be downloaded (its first 10kB, anyway) and whose metadata does not indicate \"pirated\" material.\r\n\r\nIf there are tests I can enable the CI test ...\r\n\nOK, Thanks a lot for the clearly explication. I add the \"only_matching\" test.\nSuperseded by #32725.",
        "created_at": "2024-02-21T12:27:15Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_utils.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 31235,
        "instance_id": "ytdl-org__youtube-dl-31235",
        "issue_numbers": [
            "18051"
        ],
        "base_commit": "7009bb9f3182449ae8cc05cc28b768b63030a485",
        "patch": "diff --git a/youtube_dl/aes.py b/youtube_dl/aes.py\nindex d0de2d93f39..a94a410798b 100644\n--- a/youtube_dl/aes.py\n+++ b/youtube_dl/aes.py\n@@ -8,6 +8,18 @@\n BLOCK_SIZE_BYTES = 16\n \n \n+def pkcs7_padding(data):\n+    \"\"\"\n+    PKCS#7 padding\n+\n+    @param {int[]} data        cleartext\n+    @returns {int[]}           padding data\n+    \"\"\"\n+\n+    remaining_length = BLOCK_SIZE_BYTES - len(data) % BLOCK_SIZE_BYTES\n+    return data + [remaining_length] * remaining_length\n+\n+\n def aes_ctr_decrypt(data, key, counter):\n     \"\"\"\n     Decrypt with aes in counter mode\n@@ -76,8 +88,7 @@ def aes_cbc_encrypt(data, key, iv):\n     previous_cipher_block = iv\n     for i in range(block_count):\n         block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n-        remaining_length = BLOCK_SIZE_BYTES - len(block)\n-        block += [remaining_length] * remaining_length\n+        block = pkcs7_padding(block)\n         mixed_block = xor(block, previous_cipher_block)\n \n         encrypted_block = aes_encrypt(mixed_block, expanded_key)\n@@ -88,6 +99,28 @@ def aes_cbc_encrypt(data, key, iv):\n     return encrypted_data\n \n \n+def aes_ecb_encrypt(data, key):\n+    \"\"\"\n+    Encrypt with aes in ECB mode. Using PKCS#7 padding\n+\n+    @param {int[]} data        cleartext\n+    @param {int[]} key         16/24/32-Byte cipher key\n+    @returns {int[]}           encrypted data\n+    \"\"\"\n+    expanded_key = key_expansion(key)\n+    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n+\n+    encrypted_data = []\n+    for i in range(block_count):\n+        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n+        block = pkcs7_padding(block)\n+\n+        encrypted_block = aes_encrypt(block, expanded_key)\n+        encrypted_data += encrypted_block\n+\n+    return encrypted_data\n+\n+\n def key_expansion(data):\n     \"\"\"\n     Generate key schedule\ndiff --git a/youtube_dl/extractor/neteasemusic.py b/youtube_dl/extractor/neteasemusic.py\nindex 978a05841ce..fad22a2cd0b 100644\n--- a/youtube_dl/extractor/neteasemusic.py\n+++ b/youtube_dl/extractor/neteasemusic.py\n@@ -1,20 +1,31 @@\n # coding: utf-8\n from __future__ import unicode_literals\n \n-from hashlib import md5\n from base64 import b64encode\n+from binascii import hexlify\n from datetime import datetime\n+from hashlib import md5\n+from random import randint\n+import json\n import re\n+import time\n \n from .common import InfoExtractor\n+from ..aes import aes_ecb_encrypt, pkcs7_padding\n from ..compat import (\n     compat_urllib_parse_urlencode,\n     compat_str,\n     compat_itertools_count,\n )\n from ..utils import (\n-    sanitized_Request,\n+    ExtractorError,\n+    bytes_to_intlist,\n     float_or_none,\n+    int_or_none,\n+    intlist_to_bytes,\n+    sanitized_Request,\n+    std_headers,\n+    try_get,\n )\n \n \n@@ -35,32 +46,85 @@ def _encrypt(cls, dfsid):\n         result = b64encode(m.digest()).decode('ascii')\n         return result.replace('/', '_').replace('+', '-')\n \n+    @classmethod\n+    def make_player_api_request_data_and_headers(cls, song_id, bitrate):\n+        KEY = b'e82ckenh8dichen8'\n+        URL = '/api/song/enhance/player/url'\n+        now = int(time.time() * 1000)\n+        rand = randint(0, 1000)\n+        cookie = {\n+            'osver': None,\n+            'deviceId': None,\n+            'appver': '8.0.0',\n+            'versioncode': '140',\n+            'mobilename': None,\n+            'buildver': '1623435496',\n+            'resolution': '1920x1080',\n+            '__csrf': '',\n+            'os': 'pc',\n+            'channel': None,\n+            'requestId': '{0}_{1:04}'.format(now, rand),\n+        }\n+        request_text = json.dumps(\n+            {'ids': '[{0}]'.format(song_id), 'br': bitrate, 'header': cookie},\n+            separators=(',', ':'))\n+        message = 'nobody{0}use{1}md5forencrypt'.format(\n+            URL, request_text).encode('latin1')\n+        msg_digest = md5(message).hexdigest()\n+\n+        data = '{0}-36cd479b6b5-{1}-36cd479b6b5-{2}'.format(\n+            URL, request_text, msg_digest)\n+        data = pkcs7_padding(bytes_to_intlist(data))\n+        encrypted = intlist_to_bytes(aes_ecb_encrypt(data, bytes_to_intlist(KEY)))\n+        encrypted_params = hexlify(encrypted).decode('ascii').upper()\n+\n+        cookie = '; '.join(\n+            ['{0}={1}'.format(k, v if v is not None else 'undefined')\n+             for [k, v] in cookie.items()])\n+\n+        headers = {\n+            'User-Agent': std_headers['User-Agent'],\n+            'Content-Type': 'application/x-www-form-urlencoded',\n+            'Referer': 'https://music.163.com',\n+            'Cookie': cookie,\n+        }\n+        return ('params={0}'.format(encrypted_params), headers)\n+\n+    def _call_player_api(self, song_id, bitrate):\n+        url = 'https://interface3.music.163.com/eapi/song/enhance/player/url'\n+        data, headers = self.make_player_api_request_data_and_headers(song_id, bitrate)\n+        try:\n+            return self._download_json(\n+                url, song_id, data=data.encode('ascii'), headers=headers)\n+        except ExtractorError as e:\n+            if type(e.cause) in (ValueError, TypeError):\n+                # JSON load failure\n+                raise\n+        except Exception:\n+            pass\n+        return {}\n+\n     def extract_formats(self, info):\n         formats = []\n+        song_id = info['id']\n         for song_format in self._FORMATS:\n             details = info.get(song_format)\n             if not details:\n                 continue\n-            song_file_path = '/%s/%s.%s' % (\n-                self._encrypt(details['dfsId']), details['dfsId'], details['extension'])\n-\n-            # 203.130.59.9, 124.40.233.182, 115.231.74.139, etc is a reverse proxy-like feature\n-            # from NetEase's CDN provider that can be used if m5.music.126.net does not\n-            # work, especially for users outside of Mainland China\n-            # via: https://github.com/JixunMoe/unblock-163/issues/3#issuecomment-163115880\n-            for host in ('http://m5.music.126.net', 'http://115.231.74.139/m1.music.126.net',\n-                         'http://124.40.233.182/m1.music.126.net', 'http://203.130.59.9/m1.music.126.net'):\n-                song_url = host + song_file_path\n+\n+            bitrate = int_or_none(details.get('bitrate')) or 999000\n+            data = self._call_player_api(song_id, bitrate)\n+            for song in try_get(data, lambda x: x['data'], list) or []:\n+                song_url = try_get(song, lambda x: x['url'])\n                 if self._is_valid_url(song_url, info['id'], 'song'):\n                     formats.append({\n                         'url': song_url,\n                         'ext': details.get('extension'),\n-                        'abr': float_or_none(details.get('bitrate'), scale=1000),\n+                        'abr': float_or_none(song.get('br'), scale=1000),\n                         'format_id': song_format,\n-                        'filesize': details.get('size'),\n-                        'asr': details.get('sr')\n+                        'filesize': int_or_none(song.get('size')),\n+                        'asr': int_or_none(details.get('sr')),\n                     })\n-                    break\n         return formats\n \n     @classmethod\n@@ -79,30 +143,16 @@ class NetEaseMusicIE(NetEaseMusicBaseIE):\n     _VALID_URL = r'https?://music\\.163\\.com/(#/)?song\\?id=(?P<id>[0-9]+)'\n     _TESTS = [{\n         'url': 'http://music.163.com/#/song?id=32102397',\n-        'md5': 'f2e97280e6345c74ba9d5677dd5dcb45',\n+        'md5': '3e909614ce09b1ccef4a3eb205441190',\n         'info_dict': {\n             'id': '32102397',\n             'ext': 'mp3',\n-            'title': 'Bad Blood (feat. Kendrick Lamar)',\n+            'title': 'Bad Blood',\n             'creator': 'Taylor Swift / Kendrick Lamar',\n-            'upload_date': '20150517',\n-            'timestamp': 1431878400,\n-            'description': 'md5:a10a54589c2860300d02e1de821eb2ef',\n+            'upload_date': '20150516',\n+            'timestamp': 1431792000,\n+            'description': 'md5:25fc5f27e47aad975aa6d36382c7833c',\n         },\n-        'skip': 'Blocked outside Mainland China',\n-    }, {\n-        'note': 'No lyrics translation.',\n-        'url': 'http://music.163.com/#/song?id=29822014',\n-        'info_dict': {\n-            'id': '29822014',\n-            'ext': 'mp3',\n-            'title': '\u542c\u89c1\u4e0b\u96e8\u7684\u58f0\u97f3',\n-            'creator': '\u5468\u6770\u4f26',\n-            'upload_date': '20141225',\n-            'timestamp': 1419523200,\n-            'description': 'md5:a4d8d89f44656af206b7b2555c0bce6c',\n-        },\n-        'skip': 'Blocked outside Mainland China',\n     }, {\n         'note': 'No lyrics.',\n         'url': 'http://music.163.com/song?id=17241424',\n@@ -112,9 +162,9 @@ class NetEaseMusicIE(NetEaseMusicBaseIE):\n             'title': 'Opus 28',\n             'creator': 'Dustin O\\'Halloran',\n             'upload_date': '20080211',\n+            'description': 'md5:f12945b0f6e0365e3b73c5032e1b0ff4',\n             'timestamp': 1202745600,\n         },\n-        'skip': 'Blocked outside Mainland China',\n     }, {\n         'note': 'Has translated name.',\n         'url': 'http://music.163.com/#/song?id=22735043',\n@@ -128,7 +178,6 @@ class NetEaseMusicIE(NetEaseMusicBaseIE):\n             'timestamp': 1264608000,\n             'alt_title': '\u8bf4\u51fa\u613f\u671b\u5427(Genie)',\n         },\n-        'skip': 'Blocked outside Mainland China',\n     }]\n \n     def _process_lyrics(self, lyrics_info):\n",
        "test_patch": "diff --git a/test/test_aes.py b/test/test_aes.py\nindex cc89fb6ab27..0f181466bcf 100644\n--- a/test/test_aes.py\n+++ b/test/test_aes.py\n@@ -8,7 +8,7 @@\n import unittest\n sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n \n-from youtube_dl.aes import aes_decrypt, aes_encrypt, aes_cbc_decrypt, aes_cbc_encrypt, aes_decrypt_text\n+from youtube_dl.aes import aes_decrypt, aes_encrypt, aes_cbc_decrypt, aes_cbc_encrypt, aes_decrypt_text, aes_ecb_encrypt\n from youtube_dl.utils import bytes_to_intlist, intlist_to_bytes\n import base64\n \n@@ -58,6 +58,13 @@ def test_decrypt_text(self):\n         decrypted = (aes_decrypt_text(encrypted, password, 32))\n         self.assertEqual(decrypted, self.secret_msg)\n \n+    def test_ecb_encrypt(self):\n+        data = bytes_to_intlist(self.secret_msg)\n+        encrypted = intlist_to_bytes(aes_ecb_encrypt(data, self.key))\n+        self.assertEqual(\n+            encrypted,\n+            b'\\xaa\\x86]\\x81\\x97>\\x02\\x92\\x9d\\x1bR[[L/u\\xd3&\\xd1(h\\xde{\\x81\\x94\\xba\\x02\\xae\\xbd\\xa6\\xd0:')\n+\n \n if __name__ == '__main__':\n     unittest.main()\n",
        "problem_statement": "[dl fail] Is netease module still being maintained?\n### Make sure you are using the *latest* version: run `youtube-dl --version` and ensure your version is *2018.10.29*. If it's not, read [this FAQ entry](https://github.com/rg3/youtube-dl/blob/master/README.md#how-do-i-update-youtube-dl) and update. Issues with outdated version will be rejected.\r\n- [x] I've **verified** and **I assure** that I'm running youtube-dl **2018.10.29**\r\n\r\n### Before submitting an *issue* make sure you have:\r\n- [x] At least skimmed through the [README](https://github.com/rg3/youtube-dl/blob/master/README.md), **most notably** the [FAQ](https://github.com/rg3/youtube-dl#faq) and [BUGS](https://github.com/rg3/youtube-dl#bugs) sections\r\n- [x] [Searched](https://github.com/rg3/youtube-dl/search?type=Issues) the bugtracker for similar issues including closed ones\r\n- [x] Checked that provided video/audio/playlist URLs (if any) are alive and playable in a browser\r\n\r\n### What is the purpose of your *issue*?\r\n- [x] Bug report (encountered problems with youtube-dl)\r\n- [ ] Site support request (request for adding support for a new site)\r\n- [ ] Feature request (request for a new functionality)\r\n- [ ] Question\r\n- [ ] Other\r\n\r\n---\r\n\r\nFull command and output:\r\n\r\n```\r\nC:\\Users\\inkux\\Desktop>youtube-dl https://music.163.com/#/song?id=33166366 --verbose --proxy \"\"\r\n[debug] System config: []\r\n[debug] User config: ['--proxy', 'socks5://[censored]/']\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['https://music.163.com/#/song?id=33166366', '--verbose', '--proxy', '']\r\n[debug] Encodings: locale cp936, fs mbcs, out cp936, pref cp936\r\n[debug] youtube-dl version 2018.10.29\r\n[debug] Python version 3.4.4 (CPython) - Windows-10-10.0.17134\r\n[debug] exe versions: ffmpeg N-90414-gabf35afb6f, ffprobe N-90414-gabf35afb6f\r\n[debug] Proxy map: {}\r\n[netease:song] 33166366: Downloading song info\r\n[netease:song] 33166366: Checking song URL\r\n[netease:song] 33166366: song URL is invalid, skipping\r\n[netease:song] 33166366: Checking song URL\r\n[netease:song] 33166366: song URL is invalid, skipping\r\n[netease:song] 33166366: Checking song URL\r\n[netease:song] 33166366: song URL is invalid, skipping\r\n[netease:song] 33166366: Checking song URL\r\n[netease:song] 33166366: song URL is invalid, skipping\r\n[netease:song] 33166366: Checking song URL\r\n[netease:song] 33166366: song URL is invalid, skipping\r\n[netease:song] 33166366: Checking song URL\r\n[netease:song] 33166366: song URL is invalid, skipping\r\n[netease:song] 33166366: Checking song URL\r\n[netease:song] 33166366: song URL is invalid, skipping\r\n[netease:song] 33166366: Checking song URL\r\n[netease:song] 33166366: song URL is invalid, skipping\r\nERROR: No video formats found; please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose flag and include its complete output.\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\dst\\AppData\\Roaming\\Build archive\\youtube-dl\\rg3\\tmpadzwnijc\\build\\youtube_dl\\YoutubeDL.py\", line 792, in extract_info\r\n  File \"C:\\Users\\dst\\AppData\\Roaming\\Build archive\\youtube-dl\\rg3\\tmpadzwnijc\\build\\youtube_dl\\extractor\\common.py\", line 508, in extract\r\n  File \"C:\\Users\\dst\\AppData\\Roaming\\Build archive\\youtube-dl\\rg3\\tmpadzwnijc\\build\\youtube_dl\\extractor\\neteasemusic.py\", line 164, in _real_extract\r\n  File \"C:\\Users\\dst\\AppData\\Roaming\\Build archive\\youtube-dl\\rg3\\tmpadzwnijc\\build\\youtube_dl\\extractor\\common.py\", line 1287, in _sort_formats\r\nyoutube_dl.utils.ExtractorError: No video formats found; please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose flag and include its complete output.\r\n```\r\n------\r\nI've noticed from the issue page that netease module had been down for quite a while in 2016, but since I got an instruction to report this and those issues are pretty aged, I decided to report it anyway.\r\n\r\nI was downloading this song which is totally playable in my browser(Google Chrome), and is also downloadable as a mp3 file using netease client (PC, Android), of course using a Chinese IP address.\r\n\r\nAs you can see youtube-dl correctly recognized the ID of the song from its URL but has been unable to obtain any format.\r\n\r\nAnd if this module is never going to be maintained for a period of time, I think it's a good idea to disable the module if it is believed it will never work again, so no one gets a bug report request when they see netease music in your support sites list and then fails to download using yt-dl, given that netease is a pretty popular music site in China.\r\n\r\n------\n",
        "hints_text": "Well there I am. Pretty late but I randomly came across this extractor.\r\n\r\nThere are changes on netease (music.163.com). They changed endpoints and have more than one now. Also their response is different.\r\n\r\nSong (data as in m4a) related api is\r\n`https://music.163.com/weapi/song/enhance/player/url/v1?csrf_token=`\r\nsong details is now\r\n`https://music.163.com/weapi/v3/song/detail?csrf_token=`\r\nand so on. if there is enough interest I can update the extractor.\r\n\n@blackjack4494 I for one would be interested. Tried to use it just now and came across this report.\nHi, I think this is still not solved, because the traceback still remains the same, how can we start fixing this? There is also a geolocation restriction in this case.\n[This API](https://github.com/Binaryify/NeteaseCloudMusicApi) written in Node.js is able to get the real audio file URL with a given ID and quality. For example, https://api.moeblog.vip/163/ is a deployment of this API, and the real URL of the song with ID 29848621 can be got by `https://api.moeblog.vip/163/?type=url&id=29848621&br=128`. It worked.\r\n\r\nThus, examining the [Node.js API](https://github.com/Binaryify/NeteaseCloudMusicApi) will be helpful.\r\n\r\nGeolocation restriction, like paid contents, seems to be unable to bypass, at least by this API.\r\n\r\nI'll come back in a week after I finish my exams and try to fix this issue if no one else is going to do it.\nI've translated relevant parts of the Node.js API to python, and the following script is able to get the real music file URL with a given id (needs [pycrypto](https://pypi.org/project/pycrypto/)):\r\n\r\n```python\r\nimport requests\r\nimport json\r\nfrom hashlib import md5\r\nfrom Crypto.Cipher import AES\r\nimport Crypto\r\nimport time\r\nfrom random import randint\r\n\r\nHEADERS = {\r\n    \"User-Agent\": \"Mozilla/5.0 (Linux; U; Android 9; zh-cn; Redmi Note 8 Build/PKQ1.190616.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/71.0.3578.141 Mobile Safari/537.36 XiaoMi/MiuiBrowser/12.5.22\",\r\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    \"Referer\": \"https://music.163.com\",\r\n}\r\n\r\n\r\nKEY = \"e82ckenh8dichen8\"\r\n\r\n\r\ndef pad(data):\r\n    # https://stackoverflow.com/a/10550004/12425329\r\n    pad = 16 - len(data) % 16\r\n    return data + pad * chr(pad)\r\n\r\n\r\ndef make_data_and_headers(song_id):\r\n    KEY = \"e82ckenh8dichen8\"\r\n    URL = \"/api/song/enhance/player/url\"\r\n    cookie = {\r\n        \"osver\": None,\r\n        \"deviceId\": None,\r\n        \"appver\": \"8.0.0\",\r\n        \"versioncode\": \"140\",\r\n        \"mobilename\": None,\r\n        \"buildver\": \"1623435496\",\r\n        \"resolution\": \"1920x1080\",\r\n        \"__csrf\": \"\",\r\n        \"os\": \"pc\",\r\n        \"channel\": None,\r\n        \"requestId\": f\"{int(time.time()*1000)}_{randint(0, 1000):04}\",\r\n    }\r\n    text = json.dumps(\r\n        {\"ids\": f\"[{song_id}]\", \"br\": 999000, \"header\": cookie},\r\n        separators=(\",\", \":\"),\r\n    )\r\n    message = f\"nobody{URL}use{text}md5forencrypt\"\r\n    m = md5()\r\n    m.update(message.encode(\"latin1\"))\r\n    digest = m.hexdigest()\r\n\r\n    data = f\"{URL}-36cd479b6b5-{text}-36cd479b6b5-{digest}\"\r\n\r\n    data = '/api/song/enhance/player/url-36cd479b6b5-{\"ids\":\"[33894312]\",\"br\":999000,\"header\":{\"appver\":\"8.0.0\",\"versioncode\":\"140\",\"buildver\":\"1623455100\",\"resolution\":\"1920x1080\",\"__csrf\":\"\",\"os\":\"pc\",\"requestId\":\"1623455100782_0489\"}}-36cd479b6b5-a036727d6cb4f68dc27d0e1962f56eb8'\r\n\r\n    data = pad(data)\r\n\r\n    cipher = Crypto.Cipher.AES.new(KEY, AES.MODE_ECB)\r\n    encrypted = cipher.encrypt(data.encode(\"latin1\"))\r\n\r\n    headers = HEADERS\r\n    process_v = lambda v: v if v is not None else \"undefined\"\r\n    headers.update(\r\n        {\"Cookie\": \"; \".join([f\"{k}={process_v(v)}\" for [k, v] in cookie.items()])}\r\n    )\r\n    return (f\"params={encrypted.hex().upper()}\", headers)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    song_id = input(\"song_id? (default to 491233178)\")\r\n    if not song_id:\r\n        song_id = 491233178\r\n    data, headers = make_data_and_headers(491233178)\r\n    # print(data)\r\n    # print(headers)\r\n    r = requests.post(\r\n        \"https://interface3.music.163.com/eapi/song/enhance/player/url\",\r\n        data=data,  # json.dumps(data, separators=(\",\", \":\")),\r\n        headers=HEADERS,\r\n    )\r\n    print(r.json())\r\n```\r\n\r\nThe next challenge is to adapt it into youtube-dl",
        "created_at": "2022-09-14T04:31:39Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_aes.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 31182,
        "instance_id": "ytdl-org__youtube-dl-31182",
        "issue_numbers": [
            "31173"
        ],
        "base_commit": "b0a60ce2032172aeaaf27fe3866ab72768f10cb2",
        "patch": "diff --git a/youtube_dl/jsinterp.py b/youtube_dl/jsinterp.py\nindex 8e119d08a3b..48c27a1c04b 100644\n--- a/youtube_dl/jsinterp.py\n+++ b/youtube_dl/jsinterp.py\n@@ -7,6 +7,7 @@\n import re\n \n from .utils import (\n+    error_to_compat_str,\n     ExtractorError,\n     js_to_json,\n     remove_quotes,\n@@ -130,7 +131,7 @@ def wrapped(a, b):\n _OPERATOR_RE = '|'.join(map(lambda x: re.escape(x[0]), _OPERATORS + _LOG_OPERATORS))\n \n _MATCHING_PARENS = dict(zip(*zip('()', '{}', '[]')))\n-_QUOTES = '\\'\"'\n+_QUOTES = '\\'\"/'\n \n \n def _ternary(cndn, if_true=True, if_false=False):\n@@ -155,6 +156,12 @@ def __init__(self):\n         ExtractorError.__init__(self, 'Invalid continue')\n \n \n+class JS_Throw(ExtractorError):\n+    def __init__(self, e):\n+        self.error = e\n+        ExtractorError.__init__(self, 'Uncaught exception ' + error_to_compat_str(e))\n+\n+\n class LocalNameSpace(ChainMap):\n     def __getitem__(self, key):\n         try:\n@@ -172,6 +179,17 @@ def __setitem__(self, key, value):\n     def __delitem__(self, key):\n         raise NotImplementedError('Deleting is not supported')\n \n+    # except\n+    def pop(self, key, *args):\n+        try:\n+            off = self.__getitem__(key)\n+            super(LocalNameSpace, self).__delitem__(key)\n+            return off\n+        except KeyError:\n+            if len(args) > 0:\n+                return args[0]\n+            raise\n+\n     def __contains__(self, key):\n         try:\n             super(LocalNameSpace, self).__getitem__(key)\n@@ -188,9 +206,29 @@ class JSInterpreter(object):\n \n     undefined = _UNDEFINED\n \n+    RE_FLAGS = {\n+        # special knowledge: Python's re flags are bitmask values, current max 128\n+        # invent new bitmask values well above that for literal parsing\n+        # TODO: new pattern class to execute matches with these flags\n+        'd': 1024,  # Generate indices for substring matches\n+        'g': 2048,  # Global search\n+        'i': re.I,  # Case-insensitive search\n+        'm': re.M,  # Multi-line search\n+        's': re.S,  # Allows . to match newline characters\n+        'u': re.U,  # Treat a pattern as a sequence of unicode code points\n+        'y': 4096,  # Perform a \"sticky\" search that matches starting at the current position in the target string\n+    }\n+\n+    _EXC_NAME = '__youtube_dl_exception__'\n+    _OBJ_NAME = '__youtube_dl_jsinterp_obj'\n+\n+    OP_CHARS = None\n+\n     def __init__(self, code, objects=None):\n         self.code, self._functions = code, {}\n         self._objects = {} if objects is None else objects\n+        if type(self).OP_CHARS is None:\n+            type(self).OP_CHARS = self.OP_CHARS = self.__op_chars()\n \n     class Exception(ExtractorError):\n         def __init__(self, msg, *args, **kwargs):\n@@ -199,32 +237,64 @@ def __init__(self, msg, *args, **kwargs):\n                 msg = '{0} in: {1!r}'.format(msg.rstrip(), expr[:100])\n             super(JSInterpreter.Exception, self).__init__(msg, *args, **kwargs)\n \n+    @classmethod\n+    def __op_chars(cls):\n+        op_chars = set(';,')\n+        for op in cls._all_operators():\n+            for c in op[0]:\n+                op_chars.add(c)\n+        return op_chars\n+\n     def _named_object(self, namespace, obj):\n         self.__named_object_counter += 1\n-        name = '__youtube_dl_jsinterp_obj%d' % (self.__named_object_counter, )\n+        name = '%s%d' % (self._OBJ_NAME, self.__named_object_counter)\n         namespace[name] = obj\n         return name\n \n-    @staticmethod\n-    def _separate(expr, delim=',', max_split=None, skip_delims=None):\n+    @classmethod\n+    def _regex_flags(cls, expr):\n+        flags = 0\n+        if not expr:\n+            return flags, expr\n+        for idx, ch in enumerate(expr):\n+            if ch not in cls.RE_FLAGS:\n+                break\n+            flags |= cls.RE_FLAGS[ch]\n+        return flags, expr[idx:] if idx > 0 else expr\n+\n+    @classmethod\n+    def _separate(cls, expr, delim=',', max_split=None, skip_delims=None):\n         if not expr:\n             return\n         counters = {k: 0 for k in _MATCHING_PARENS.values()}\n-        start, splits, pos, skipping, delim_len = 0, 0, 0, 0, len(delim) - 1\n-        in_quote, escaping = None, False\n+        start, splits, pos, delim_len = 0, 0, 0, len(delim) - 1\n+        in_quote, escaping, skipping = None, False, 0\n+        after_op, in_regex_char_group, skip_re = True, False, 0\n+\n         for idx, char in enumerate(expr):\n+            if skip_re > 0:\n+                skip_re -= 1\n+                continue\n             if not in_quote:\n                 if char in _MATCHING_PARENS:\n                     counters[_MATCHING_PARENS[char]] += 1\n                 elif char in counters:\n                     counters[char] -= 1\n-            if not escaping:\n-                if char in _QUOTES and in_quote in (char, None):\n-                    in_quote = None if in_quote else char\n-                else:\n-                    escaping = in_quote and char == '\\\\'\n-            else:\n-                escaping = False\n+            if not escaping and char in _QUOTES and in_quote in (char, None):\n+                if in_quote or after_op or char != '/':\n+                    in_quote = None if in_quote and not in_regex_char_group else char\n+                    if in_quote is None and char == '/' and delim != '/':\n+                        # regexp flags\n+                        n_idx = idx + 1\n+                        while n_idx < len(expr) and expr[n_idx] in cls.RE_FLAGS:\n+                            n_idx += 1\n+                        skip_re = n_idx - idx - 1\n+                        if skip_re > 0:\n+                            continue\n+            elif in_quote == '/' and char in '[]':\n+                in_regex_char_group = char == '['\n+            escaping = not escaping and in_quote and char == '\\\\'\n+            after_op = not in_quote and char in cls.OP_CHARS or (char == ' ' and after_op)\n \n             if char != delim[pos] or any(counters.values()) or in_quote:\n                 pos = skipping = 0\n@@ -313,16 +383,23 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n             if should_return:\n                 return ret, should_return\n \n-        m = re.match(r'(?P<var>(?:var|const|let)\\s)|return(?:\\s+|$)', stmt)\n+        m = re.match(r'(?P<var>(?:var|const|let)\\s)|return(?:\\s+|(?=[\"\\'])|$)|(?P<throw>throw\\s+)', stmt)\n         if m:\n             expr = stmt[len(m.group(0)):].strip()\n+            if m.group('throw'):\n+                raise JS_Throw(self.interpret_expression(expr, local_vars, allow_recursion))\n             should_return = not m.group('var')\n         if not expr:\n             return None, should_return\n \n         if expr[0] in _QUOTES:\n             inner, outer = self._separate(expr, expr[0], 1)\n-            inner = json.loads(js_to_json(inner + expr[0]))  # , strict=True))\n+            if expr[0] == '/':\n+                flags, _ = self._regex_flags(outer)\n+                inner, outer = inner.replace('\"', r'\\\"'), ''\n+                inner = re.compile(js_to_json(inner + expr[0]), flags=flags)  # , strict=True))\n+            else:\n+                inner = json.loads(js_to_json(inner + expr[0]))  # , strict=True))\n             if not outer:\n                 return inner, should_return\n             expr = self._named_object(local_vars, inner) + outer\n@@ -374,22 +451,37 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n                 for item in self._separate(inner)])\n             expr = name + outer\n \n-        m = re.match(r'(?P<try>try|finally)\\s*|(?:(?P<catch>catch)|(?P<for>for)|(?P<switch>switch))\\s*\\(', expr)\n+        m = re.match(r'''(?x)\n+            (?P<try>try|finally)\\s*|\n+            (?P<catch>catch\\s*(?P<err>\\(\\s*{_NAME_RE}\\s*\\)))|\n+            (?P<switch>switch)\\s*\\(|\n+            (?P<for>for)\\s*\\(|'''.format(**globals()), expr)\n         md = m.groupdict() if m else {}\n         if md.get('try'):\n             if expr[m.end()] == '{':\n                 try_expr, expr = self._separate_at_paren(expr[m.end():], '}')\n             else:\n                 try_expr, expr = expr[m.end() - 1:], ''\n-            ret, should_abort = self.interpret_statement(try_expr, local_vars, allow_recursion)\n-            if should_abort:\n-                return ret, True\n+            try:\n+                ret, should_abort = self.interpret_statement(try_expr, local_vars, allow_recursion)\n+                if should_abort:\n+                    return ret, True\n+            except JS_Throw as e:\n+                local_vars[self._EXC_NAME] = e.error\n+            except Exception as e:\n+                # XXX: This works for now, but makes debugging future issues very hard\n+                local_vars[self._EXC_NAME] = e\n             ret, should_abort = self.interpret_statement(expr, local_vars, allow_recursion)\n             return ret, should_abort or should_return\n \n         elif md.get('catch'):\n-            # We ignore the catch block\n-            _, expr = self._separate_at_paren(expr, '}')\n+            catch_expr, expr = self._separate_at_paren(expr[m.end():], '}')\n+            if self._EXC_NAME in local_vars:\n+                catch_vars = local_vars.new_child({m.group('err'): local_vars.pop(self._EXC_NAME)})\n+                ret, should_abort = self.interpret_statement(catch_expr, catch_vars, allow_recursion)\n+                if should_abort:\n+                    return ret, True\n+\n             ret, should_abort = self.interpret_statement(expr, local_vars, allow_recursion)\n             return ret, should_abort or should_return\n \n@@ -503,7 +595,7 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n                 raise self.Exception('List index %s must be integer' % (idx, ), expr=expr)\n             idx = int(idx)\n             left_val[idx] = self._operator(\n-                m.group('op'), left_val[idx], m.group('expr'), expr, local_vars, allow_recursion)\n+                m.group('op'), self._index(left_val, idx), m.group('expr'), expr, local_vars, allow_recursion)\n             return left_val[idx], should_return\n \n         elif expr.isdigit():\n",
        "test_patch": "diff --git a/test/test_jsinterp.py b/test/test_jsinterp.py\nindex 328941e09cc..faddf00d5a6 100644\n--- a/test/test_jsinterp.py\n+++ b/test/test_jsinterp.py\n@@ -9,6 +9,7 @@\n sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n \n import math\n+import re\n \n from youtube_dl.jsinterp import JSInterpreter\n undefined = JSInterpreter.undefined\n@@ -316,19 +317,39 @@ def test_object(self):\n         function x() { return {}; }\n         ''')\n         self.assertEqual(jsi.call_function('x'), {})\n+\n         jsi = JSInterpreter('''\n         function x() { let a = {m1: 42, m2: 0 }; return [a[\"m1\"], a.m2]; }\n         ''')\n         self.assertEqual(jsi.call_function('x'), [42, 0])\n+\n         jsi = JSInterpreter('''\n         function x() { let a; return a?.qq; }\n         ''')\n         self.assertIs(jsi.call_function('x'), undefined)\n+\n         jsi = JSInterpreter('''\n         function x() { let a = {m1: 42, m2: 0 }; return a?.qq; }\n         ''')\n         self.assertIs(jsi.call_function('x'), undefined)\n \n+    def test_regex(self):\n+        jsi = JSInterpreter('''\n+        function x() { let a=/,,[/,913,/](,)}/; }\n+        ''')\n+        self.assertIs(jsi.call_function('x'), None)\n+\n+        jsi = JSInterpreter('''\n+        function x() { let a=/,,[/,913,/](,)}/; return a; }\n+        ''')\n+        # Pythons disagree on the type of a pattern\n+        self.assertTrue(isinstance(jsi.call_function('x'), type(re.compile(''))))\n+\n+        jsi = JSInterpreter('''\n+        function x() { let a=/,,[/,913,/](,)}/i; return a; }\n+        ''')\n+        self.assertEqual(jsi.call_function('x').flags & re.I, re.I)\n+\n \n if __name__ == '__main__':\n     unittest.main()\ndiff --git a/test/test_youtube_signature.py b/test/test_youtube_signature.py\nindex 4d756dad308..43e22388d0b 100644\n--- a/test/test_youtube_signature.py\n+++ b/test/test_youtube_signature.py\n@@ -106,6 +106,10 @@\n         'https://www.youtube.com/s/player/c81bbb4a/player_ias.vflset/en_US/base.js',\n         'gre3EcLurNY2vqp94', 'Z9DfGxWP115WTg',\n     ),\n+    (\n+        'https://www.youtube.com/s/player/1f7d5369/player_ias.vflset/en_US/base.js',\n+        'batNX7sYqIJdkJ', 'IhOkL_zxbkOZBw',\n+    ),\n ]\n \n \n",
        "problem_statement": "[YouTube] TypeError: '>' not supported between instances of 'int' and 'NoneType' \n## Checklist\r\n\r\n- [x] I'm reporting a broken site support\r\n- [x] I've verified that I'm running youtube-dl version **2021.12.17**\r\n- [x] I've checked that all provided URLs are alive and playable in a browser\r\n- [x] I've checked that all URLs and arguments with special characters are properly quoted or escaped\r\n- [x] I've searched the bugtracker for similar issues including closed ones\r\n\r\n\r\n## Verbose log\r\n\r\n```\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: [\u2026]\r\n[debug] Encodings: locale UTF-8, fs utf-8, out utf-8, pref UTF-8\r\n[debug] youtube-dl version 2021.12.17\r\n[debug] Git HEAD: e52e8b811\r\n[debug] Python version 3.8.10 (CPython) - Linux-5.8.0-44-lowlatency-x86_64-with-glibc2.29\r\n[debug] exe versions: ffmpeg 4.2.7, ffprobe 4.2.7\r\n[debug] Proxy map: {\u2026}\r\n[youtube] t-hR-TZJT2U: Downloading webpage\r\n[youtube] t-hR-TZJT2U: Downloading MPD manifest\r\nWARNING: [youtube] Unable to decode n-parameter: download likely to be throttled (Failed to evaluate 0 > None (caused by TypeError(\"'>' not supported between instances of 'int' and 'NoneType'\")); please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; see  https://yt-dl.org/update  on how to update. Be sure to call youtube-dl with the --verbose flag and include its complete output. Traceback (most recent call last):\r\n  File \"/mnt/\u2026/youtube_dl/jsinterp.py\", line 203, in _operator\r\n    return opfunc(left_val, right_val)\r\nTypeError: '>' not supported between instances of 'int' and 'NoneType'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n\u2026\r\n  File \"/mnt/\u2026/youtube_dl/jsinterp.py\", line 590, in interpret_expression\r\n    ret, should_return = self.interpret_statement(expr, local_vars, allow_recursion)\r\n  File \"/mnt/\u2026/youtube_dl/jsinterp.py\", line 454, in interpret_statement\r\n    return self._operator(op, 0 if left_val is None else left_val,\r\n  File \"/mnt/\u2026/youtube_dl/jsinterp.py\", line 205, in _operator\r\n    raise self.Exception('Failed to evaluate {left_val!r} {op} {right_val!r}'.format(**locals()), expr, cause=e)\r\nyoutube_dl.jsinterp.JSInterpreter.Exception: Failed to evaluate 0 > None (caused by TypeError(\"'>' not supported between instances of 'int' and 'NoneType'\")); please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; see  https://yt-dl.org/update  on how to update. Be sure to call youtube-dl with the --verbose flag and include its complete output.\r\n)\r\n```\r\n\r\n\r\n## Description\r\nDownload seems to work nonetheless.\n",
        "hints_text": "Apparently you just need to reinstall Python 2.7!\r\n\r\nPython 3.5 has this message:\r\n```\r\n...\r\n  File \"/home/df/Documents/src/youtube-dl/youtube_dl/jsinterp.py\", line 205, in _operator\r\n    raise self.Exception('Failed to evaluate {left_val!r} {op} {right_val!r}'.format(**locals()), expr, cause=e)\r\nyoutube_dl.jsinterp.JSInterpreter.Exception: Failed to evaluate 0 > None (caused by TypeError('unorderable types: int() > NoneType()',));  ...\r\n```\r\nHowever today's dev version fixes whatever problem there was:\r\n```shellsession\r\n$ python3.9 -m youtube_dl -F -v 'https://www.youtube.com/watch?v=t-hR-TZJT2U'\r\n[debug] System config: ['--prefer-ffmpeg']\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['-F', '-v', 'https://www.youtube.com/watch?v=t-hR-TZJT2U']\r\n[debug] Encodings: locale UTF-8, fs utf-8, out utf-8, pref UTF-8\r\n[debug] youtube-dl version 2021.12.17\r\n[debug] Git HEAD: e52e8b811\r\n[debug] Python version 3.9.13 (CPython) - Linux-4.4.0-210-generic-i686-with-glibc2.23\r\n[debug] exe versions: avconv 4.3, avprobe 4.3, ffmpeg 4.3, ffprobe 4.3\r\n[debug] Proxy map: {}\r\n[youtube] t-hR-TZJT2U: Downloading webpage\r\n[youtube] t-hR-TZJT2U: Downloading MPD manifest\r\n[debug] [youtube] Decrypted nsig BnLAR5umBf9R48MhQ => y5mzqXT4vmPGow\r\n[debug] [youtube] Decrypted nsig oxC0xXr4o8rSUj1L9 => mfQBGpVcJ9-_fQ\r\n[info] Available formats for t-hR-TZJT2U:\r\nformat code  extension  resolution note\r\n139          m4a        audio only DASH audio   49k , m4a_dash container, mp4a.40.5 (22050Hz), 513.68KiB\r\n140          m4a        audio only tiny  129k , m4a_dash container, mp4a.40.2@129k (44100Hz), 1.33MiB\r\n251          webm       audio only tiny  141k , webm_dash container, opus @141k (48000Hz), 1.45MiB\r\n278          webm       256x144    DASH video   95k , webm_dash container, vp9, 30fps, video only\r\n160          mp4        256x144    DASH video  108k , mp4_dash container, avc1.4d400b, 30fps, video only\r\n242          webm       426x240    DASH video  220k , webm_dash container, vp9, 30fps, video only\r\n133          mp4        426x240    DASH video  242k , mp4_dash container, avc1.4d400c, 30fps, video only\r\n134          mp4        640x360    360p  315k , mp4_dash container, avc1.4d401e@ 315k, 30fps, video only, 3.23MiB\r\n243          webm       640x360    DASH video  405k , webm_dash container, vp9, 30fps, video only\r\n244          webm       854x480    DASH video  752k , webm_dash container, vp9, 30fps, video only\r\n135          mp4        854x480    DASH video 1155k , mp4_dash container, avc1.4d4014, 30fps, video only\r\n136          mp4        1280x720   720p 1092k , mp4_dash container, avc1.64001f@1092k, 30fps, video only, 11.20MiB\r\n247          webm       1280x720   DASH video 1505k , webm_dash container, vp9, 30fps, video only\r\n302          webm       1280x720   DASH video 2646k , webm_dash container, vp9, 60fps, video only\r\n298          mp4        1280x720   DASH video 3465k , mp4_dash container, avc1.4d400d, 60fps, video only\r\n299          mp4        1920x1080  1080p60 3021k , mp4_dash container, avc1.64002a@3021k, 60fps, video only, 30.98MiB\r\n303          webm       1920x1080  DASH video 4410k , webm_dash container, vp9, 60fps, video only\r\n18           mp4        640x360    360p  443k , avc1.42001E, 30fps, mp4a.40.2 (44100Hz)\r\n22           mp4        1280x720   720p 1220k , avc1.64001F, 30fps, mp4a.40.2 (44100Hz) (best)\r\n$\r\n``` \r\nComing in  this version:\r\n* operator `??`\r\n* operator `?.`\r\n* operator `**`\r\n* accurate operator functions ([Douglas Crockford special](https://devclass.com/2022/08/04/retire_javascript_says-json-creator-douglas-crockford/): `undefined ** 0 === 1`)\r\n* `undefined` handling\r\n* object literals `{a: 1, \"b\": expr}`\r\n\nThe problem is with this line 264 of the pretty-printed nsig code:\r\n```\r\n      6 >= c[104] ? (0, c[22]) ((0, c[1]) ((0, c[5]) (c[13], c[44]), c[76], c[12], c[75]), c[2], (0, c[0]) (((0, c[82]) (c[12]), (0, c[98]) (c[72], c[12])), c[106], (0, c[31]) (c[63], c[35]) > (0, c[102]) (c[ - 120 * Math.pow(7, 2) + 5969], c[82]), c[12], c[10]), c[29], c[21])  : (0, c[81]) ((0, c[40]) (c[10], c[11], (0, c[20]) ()), c[53], (0, c[new Date('31 December 1969 13:15:53 -1045') / 1000]) ((0, c[53]) ((0, c[12]) (c[26]), c[35], c[10], c[275 % Math.pow(new Date('1969-12-31T17:00:02.000-07:00') / 1000, 5) + 9]), c[40], c[67], c[74], (0, c[21]) ()), (0, c[53]) ((0, c[35]) (c[42], c[104]), c[35], c[67], c[48]), (0, c[86]) (c[Math.pow(5, 5) + 17176 + - 20291], c[51]), c[49], c[64], c[42]),\r\n```\r\nyt-dl is trying to evaluate this part of the line, and the RHS of the '>' is evaluating to `None`: \r\n```\r\n(0,c[0])(((0,c[82])(c[12]),(0,c[98])(c[72],c[12])),c[106],(0,c[31])(c[63],c[35])>(0,c[102])(c[-120*Math.pow(7,2)+5969],c[82]),c[12],c[10])\r\n```\r\nHere `c[102]` is a number, so something went wrong way back, something that behaves differently in Py2.7 (no error, though I didn't check the download speed), Py3.5, Py 3.8+.\n> Apparently you just need to reinstall Python 2.7!\r\n\r\nI tried it, but the error persists. Maybe Ubuntu mirrors didn't get the update yet.\nSorry, that wasn't a serious suggestion. You'd have to go through more hoops to get Python 2.7 running your yt-dl, anyway.\r\n\r\nPlease wait for the new version.\n> You'd have to go through more hoops to get Python 2.7 running your yt-dl, anyway.\r\n\r\nIndeed, I had to edit the shebang line of my wrapper script. I didn't remember I had upgraded it to use python3 yet. Now the warning seems gone and download speed seems to be back to normal. So thanks for reminding me of that extra step!",
        "created_at": "2022-08-18T19:33:14Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_jsinterp.py\", \"test/test_youtube_signature.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 30582,
        "instance_id": "ytdl-org__youtube-dl-30582",
        "issue_numbers": [
            "30752"
        ],
        "base_commit": "af9e72507ea38e5ab3fa2751ed09ec88021260cb",
        "patch": "diff --git a/youtube_dl/extractor/youtube.py b/youtube_dl/extractor/youtube.py\nindex 63918924df8..7943b94f9d5 100644\n--- a/youtube_dl/extractor/youtube.py\n+++ b/youtube_dl/extractor/youtube.py\n@@ -28,6 +28,7 @@\n     dict_get,\n     float_or_none,\n     int_or_none,\n+    js_to_json,\n     mimetype2ext,\n     parse_codecs,\n     parse_duration,\n@@ -1391,9 +1392,16 @@ def _extract_player_url(self, webpage):\n     # 2. https://code.videolan.org/videolan/vlc/-/blob/4fb284e5af69aa9ac2100ccbdd3b88debec9987f/share/lua/playlist/youtube.lua#L116\n     # 3. https://github.com/ytdl-org/youtube-dl/issues/30097#issuecomment-950157377\n     def _extract_n_function_name(self, jscode):\n-        return self._search_regex(\n-            (r'\\.get\\(\"n\"\\)\\)&&\\(b=(?P<nfunc>[a-zA-Z0-9$]{3})\\([a-zA-Z0-9]\\)',),\n-            jscode, 'Initial JS player n function name', group='nfunc')\n+        target = r'(?P<nfunc>[a-zA-Z0-9$]{3})(?:\\[(?P<idx>\\d+)\\])?'\n+        nfunc_and_idx = self._search_regex(\n+            r'\\.get\\(\"n\"\\)\\)&&\\(b=(%s)\\([a-zA-Z0-9]\\)' % (target, ),\n+            jscode, 'Initial JS player n function name')\n+        nfunc, idx = re.match(target, nfunc_and_idx).group('nfunc', 'idx')\n+        if not idx:\n+            return nfunc\n+        return self._parse_json(self._search_regex(\n+            r'var %s\\s*=\\s*(\\[.+?\\]);' % (nfunc, ), jscode,\n+            'Initial JS player n function list ({nfunc}[{idx}])'.format(**locals())), nfunc, transform_source=js_to_json)[int(idx)]\n \n     def _extract_n_function(self, video_id, player_url):\n         player_id = self._extract_player_info(player_url)\n",
        "test_patch": "diff --git a/test/test_youtube_signature.py b/test/test_youtube_signature.py\nindex c8e85b5005a..fc5e9828e2c 100644\n--- a/test/test_youtube_signature.py\n+++ b/test/test_youtube_signature.py\n@@ -82,6 +82,14 @@\n         'https://www.youtube.com/s/player/f1ca6900/player_ias.vflset/en_US/base.js',\n         'cu3wyu6LQn2hse', 'jvxetvmlI9AN9Q',\n     ),\n+    (\n+        'https://www.youtube.com/s/player/8040e515/player_ias.vflset/en_US/base.js',\n+        'wvOFaY-yjgDuIEg5', 'HkfBFDHmgw4rsw',\n+    ),\n+    (\n+        'https://www.youtube.com/s/player/e06dea74/player_ias.vflset/en_US/base.js',\n+        'AiuodmaDDYw8d3y4bf', 'ankd8eza2T6Qmw',\n+    ),\n ]\n \n \n@@ -110,10 +118,17 @@ def test_youtube_extract_player_info(self):\n class TestSignature(unittest.TestCase):\n     def setUp(self):\n         TEST_DIR = os.path.dirname(os.path.abspath(__file__))\n-        self.TESTDATA_DIR = os.path.join(TEST_DIR, 'testdata')\n+        self.TESTDATA_DIR = os.path.join(TEST_DIR, 'testdata/sigs')\n         if not os.path.exists(self.TESTDATA_DIR):\n             os.mkdir(self.TESTDATA_DIR)\n \n+    def tearDown(self):\n+        try:\n+            for f in os.listdir(self.TESTDATA_DIR):\n+                os.remove(f)\n+        except OSError:\n+            pass\n+\n \n def t_factory(name, sig_func, url_pattern):\n     def make_tfunc(url, sig_input, expected_sig):\n@@ -145,12 +160,7 @@ def signature(jscode, sig_input):\n \n \n def n_sig(jscode, sig_input):\n-    # Pending implementation of _extract_n_function_name() or similar in\n-    # youtube.py, hard-code here\n-    # funcname = YoutubeIE(FakeYDL())._extract_n_function_name(jscode)\n-    import re\n-    funcname = re.search(r'[=(,&|](\\w+)\\(\\w+\\),\\w+\\.set\\(\"n\",', jscode)\n-    funcname = funcname and funcname.group(1)\n+    funcname = YoutubeIE(FakeYDL())._extract_n_function_name(jscode)\n     return JSInterpreter(jscode).call_function(funcname, sig_input)\n \n \n",
        "problem_statement": "Virtually Every Utube video i download d/ls at approx 50kb/s \nbut when i try a mainstream supported utube video i get full speed.  this has been the same after every update since early 2020.     what is going on?  am i doing something incorrect?  d/l full quality better than 480p is a thing of my past.  \n",
        "hints_text": "",
        "created_at": "2022-02-01T14:17:50Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_youtube_signature.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 29698,
        "instance_id": "ytdl-org__youtube-dl-29698",
        "issue_numbers": [
            "29690"
        ],
        "base_commit": "af9e72507ea38e5ab3fa2751ed09ec88021260cb",
        "patch": "diff --git a/youtube_dl/YoutubeDL.py b/youtube_dl/YoutubeDL.py\nindex fe30758ef9c..69736acffa6 100755\n--- a/youtube_dl/YoutubeDL.py\n+++ b/youtube_dl/YoutubeDL.py\n@@ -1529,7 +1529,7 @@ def sanitize_numeric_fields(info):\n                 # see http://bugs.python.org/issue1646728)\n                 try:\n                     upload_date = datetime.datetime.utcfromtimestamp(info_dict[ts_key])\n-                    info_dict[date_key] = upload_date.strftime('%Y%m%d')\n+                    info_dict[date_key] = compat_str(upload_date.strftime('%Y%m%d'))\n                 except (ValueError, OverflowError, OSError):\n                     pass\n \ndiff --git a/youtube_dl/extractor/vimeo.py b/youtube_dl/extractor/vimeo.py\nindex 0b386f450b7..a66912502e8 100644\n--- a/youtube_dl/extractor/vimeo.py\n+++ b/youtube_dl/extractor/vimeo.py\n@@ -271,7 +271,7 @@ class VimeoIE(VimeoBaseInfoExtractor):\n                         )?\n                         vimeo(?:pro)?\\.com/\n                         (?!(?:channels|album|showcase)/[^/?#]+/?(?:$|[?#])|[^/]+/review/|ondemand/)\n-                        (?:.*?/)?\n+                        (?:.*?/)??\n                         (?:\n                             (?:\n                                 play_redirect_hls|\n@@ -517,14 +517,28 @@ class VimeoIE(VimeoBaseInfoExtractor):\n             'url': 'https://vimeo.com/7809605',\n             'only_matching': True,\n         },\n-        {\n-            'url': 'https://vimeo.com/160743502/abd0e13fb4',\n-            'only_matching': True,\n-        },\n         {\n             # requires passing unlisted_hash(a52724358e) to load_download_config request\n             'url': 'https://vimeo.com/392479337/a52724358e',\n             'only_matching': True,\n+        },\n+        {\n+            # similar, but all numeric: ID must be 581039021, not 9603038895\n+            # issue #29690\n+            'url': 'https://vimeo.com/581039021/9603038895',\n+            'info_dict': {\n+                'id': '581039021',\n+                # these have to be provided but we don't care\n+                'ext': 'mp4',\n+                'timestamp': 1627621014,\n+                'title': 're:.+',\n+                'uploader_id': 're:.+',\n+                'uploader': 're:.+',\n+                'upload_date': r're:\\d+',\n+            },\n+            'params': {\n+                'skip_download': True,\n+            },\n         }\n         # https://gettingthingsdone.com/workflowmap/\n         # vimeo embed with check-password page protected by Referer header\n",
        "test_patch": "diff --git a/test/test_YoutubeDL.py b/test/test_YoutubeDL.py\nindex a35effe0e4a..f8c8e619cf9 100644\n--- a/test/test_YoutubeDL.py\n+++ b/test/test_YoutubeDL.py\n@@ -997,6 +997,25 @@ def _real_extract(self, url):\n         self.assertEqual(downloaded['extractor'], 'Video')\n         self.assertEqual(downloaded['extractor_key'], 'Video')\n \n+    def test_default_times(self):\n+        \"\"\"Test addition of missing upload/release/_date from /release_/timestamp\"\"\"\n+        info = {\n+            'id': '1234',\n+            'url': TEST_URL,\n+            'title': 'Title',\n+            'ext': 'mp4',\n+            'timestamp': 1631352900,\n+            'release_timestamp': 1632995931,\n+        }\n+\n+        params = {'simulate': True, }\n+        ydl = FakeYDL(params)\n+        out_info = ydl.process_ie_result(info)\n+        self.assertTrue(isinstance(out_info['upload_date'], compat_str))\n+        self.assertEqual(out_info['upload_date'], '20210911')\n+        self.assertTrue(isinstance(out_info['release_date'], compat_str))\n+        self.assertEqual(out_info['release_date'], '20210930')\n+\n \n if __name__ == '__main__':\n     unittest.main()\n",
        "problem_statement": "[Vimeo] ERROR: Unable to download JSON metadata: HTTP Error 404\nsince the tool asked me to report im putting this here and hope its as intended \r\ni just put in the output with the error \r\ni used the latest version and also updated ffmpeg to check if it has something to do with it\r\n\r\n-------------------\r\n\r\nyoutube-dl -f bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best https://vimeo.com/581039021/9603038895 -o B:\\yt/%(title)s.%(ext)s--verbose --merge-output-format mp4\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['-f', 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best', 'https://vimeo.com/581039021/9603038895', '-o', 'B:\\\\yt/%(title)s.%(ext)s', '--verbose', '--merge-output-format', 'mp4']\r\n[debug] Encodings: locale cp1252, fs mbcs, out cp850, pref cp1252\r\n[debug] youtube-dl version 2021.06.06\r\n[debug] Python version 3.4.4 (CPython) - Windows-7-6.1.7601-SP1\r\n[debug] exe versions: ffmpeg 4.2.2\r\n[debug] Proxy map: {}\r\n[vimeo] 9603038895: Downloading webpage\r\n[vimeo] 9603038895: Downloading JSON metadata\r\n[vimeo] 9603038895: Downloading JSON metadata\r\nERROR: Unable to download JSON metadata: HTTP Error 404: Not Found (caused by HTTPError()); please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose flag and include its complete output.\r\n  File \"C:\\Users\\dst\\AppData\\Roaming\\Build archive\\youtube-dl\\ytdl-org\\tmpkqxnwl31\\build\\youtube_dl\\extractor\\common.py\", line 634, in _request_webpage\r\n  File \"C:\\Users\\dst\\AppData\\Roaming\\Build archive\\youtube-dl\\ytdl-org\\tmpkqxnwl31\\build\\youtube_dl\\YoutubeDL.py\", line 2288, in urlopen\r\n  File \"C:\\Python\\Python34\\lib\\urllib\\request.py\", line 470, in open\r\n  File \"C:\\Python\\Python34\\lib\\urllib\\request.py\", line 580, in http_response\r\n  File \"C:\\Python\\Python34\\lib\\urllib\\request.py\", line 508, in error\r\n  File \"C:\\Python\\Python34\\lib\\urllib\\request.py\", line 442, in _call_chain\r\n  File \"C:\\Python\\Python34\\lib\\urllib\\request.py\", line 588, in http_error_default\r\n\r\n-------------------\r\n\r\nive checked with a older video to see if there is some vimeo related issue but the older url works perfectly -- gonna post the \"**working**\" example now\r\n\r\n------------------\r\n\r\n\r\nyoutube-dl -f bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best https://vimeo.com/580888053/a127b5ccd0 -o B:\\yt/%(title)s.%(ext)s--verbose --merge-output-format mp4\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['-f', 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best', 'https://vimeo.com/580888053/a127b5ccd0', '-o', 'B:\\\\yt/%(title)s.%(ext)s', '--verbose', '--merge-output-format', 'mp4']\r\n[debug] Encodings: locale cp1252, fs mbcs, out cp850, pref cp1252\r\n[debug] youtube-dl version 2021.06.06\r\n[debug] Python version 3.4.4 (CPython) - Windows-7-6.1.7601-SP1\r\n[debug] exe versions: ffmpeg 2021-07-27-git-0068b3d0f0-full_build-www.gyan.dev\r\n[debug] Proxy map: {}\r\n[vimeo] 580888053: Downloading JSON metadata\r\n[vimeo] 580888053: Downloading JSON metadata\r\n[vimeo] 580888053: Downloading JSON metadata\r\n[vimeo] 580888053: Downloading fastly_skyfire m3u8 information\r\n[vimeo] 580888053: Downloading fastly_skyfire m3u8 information\r\n[vimeo] 580888053: Downloading akfire_interconnect_quic m3u8 information\r\n[vimeo] 580888053: Downloading akfire_interconnect_quic m3u8 information\r\n[vimeo] 580888053: Downloading fastly_skyfire MPD information\r\n[vimeo] 580888053: Downloading fastly_skyfire MPD information\r\n[vimeo] 580888053: Downloading akfire_interconnect_quic MPD information\r\n[vimeo] 580888053: Downloading akfire_interconnect_quic MPD information\r\n[debug] Invoking downloader on 'https://skyfire.vimeocdn.com/1627634832-0x16a4d5563ea72c9611c90b1709e96e32fa1843c6/7062d513-389f-4cc6-adb9-a9c2cf1a35bf/sep/video/b72d696c,360af58c,c69af52d,fa60c372,ebaf0f3a/master.mpd?base64_init=1'\r\n[dashsegments] Total fragments: 156\r\n[download] Destination: B:\\yt\\Thursday, July 29, 2021 BMA Mid-Day Video Update.fdash-fastly_skyfire_sep-video-fa60c372.mp4\r\n[download] 100% of 118.54MiB in 00:11\r\n[debug] Invoking downloader on 'https://skyfire.vimeocdn.com/1627634832-0x16a4d5563ea72c9611c90b1709e96e32fa1843c6/7062d513-389f-4cc6-adb9-a9c2cf1a35bf/sep/video/b72d696c,360af58c,c69af52d,fa60c372,ebaf0f3a/master.mpd?base64_init=1'\r\n[dashsegments] Total fragments: 156\r\n[download] Destination: B:\\yt\\Thursday, July 29, 2021 BMA Mid-Day Video Update.fdash-fastly_skyfire_sep-audio-b72d696c.m4a\r\n[download] 100% of 28.62MiB in 00:07\r\n[ffmpeg] Merging formats into \"B:\\yt\\Thursday, July 29, 2021 BMA Mid-Day Video Update.mp4\"\r\n[debug] ffmpeg command line: ffmpeg -y -loglevel \"repeat+info\" -i \"file:B:\\yt\\Thursday, July 29, 2021 BMA Mid-Day Video Update.fdash-fastly_skyfire_sep-video-fa60c372.mp4\" -i \"file:B:\\yt\\Thursday, July 29, 2021 BMA Mid-Day Video Update.fdash-fastly_skyfire_sep-audio-b72d696c.m4a\" -c copy -map \"0:v:0\" -map \"1:a:0\" \"file:B:\\yt\\Thursday, July 29, 2021 BMA Mid-Day Video Update.temp.mp4\"\r\nDeleting original file B:\\yt\\Thursday, July 29, 2021 BMA Mid-Day Video Update.fdash-fastly_skyfire_sep-video-fa60c372.mp4 (pass -k to keep)\r\nDeleting original file B:\\yt\\Thursday, July 29, 2021 BMA Mid-Day Video Update.fdash-fastly_skyfire_sep-audio-b72d696c.m4a (pass -k to keep)\r\n\r\n------------------\r\n\r\nthe working video was uploaded a few hours befor the \"not working\" one\r\nworking: https://vimeo.com/580888053/a127b5ccd0 (upload around 12 hours agoaround 3 PM CST Thursday July 29 2021)\r\nnot working: https://vimeo.com/581039021/9603038895 (upload around 3 hours ago around 11 PM CST Thursday July 29 2021)\r\n\r\nin case more information are required let me know im hoping ive done everything as wanted \r\ndayta\r\n\r\nside note: im using win7 thus using the latest version of phthon that was available and working tryed different ones without any change in result.. the newest version of python does not work on win 7 but that shouldnt be part of the problem itself since the error only occours with this one url out of alot of others which are still working perfectly\n",
        "hints_text": "The problem comes when fetching the video details.\r\n\r\nThe working video is correctly identified as having the 'ID/hash' (`580888053/a127b5ccd0`) pattern and the extractor goes on to fetch the video details using `api.vimeo.com` without loading the original page itself. From the debug log we can see that it is being handled with ID 580888053. The similar URL from the extractor's tests also works.\r\n\r\nThe failing video is identified with ID 9603038895 instead of 581039021 and unsurprisingly this means that the extractor fails to find the video details.\r\n\r\nThe problem occurs when a Vimeo URL ends with '/ID/hash' and both ID and hash are numeric. The pattern match skips over the ID part and assigns the ID from the hash part. One component of the URL pattern needs to be constrained (non-greedy `(?:.*?/)??` instead of `(?:.*?/)?`), and then we get:\r\n```\r\n# youtube-dl -F -v 'https://vimeo.com/581039021/9603038895'\r\n[debug] System config: [u'--restrict-filenames', u'--prefer-ffmpeg', u'-f', u'best[height<=?1080][fps<=?60]', u'-o', u'/media/drive1/Video/%(title)s.%(ext)s']\r\n[debug] User config: [u'-f', u'(best/bestvideo+bestaudio)[height<=?1080][fps<=?60][tbr<=?1900]']\r\n[debug] Custom config: []\r\n[debug] Command-line args: [u'-F', u'-v', u'https://vimeo.com/581039021/9603038895']\r\n[debug] Encodings: locale ASCII, fs ASCII, out ASCII, pref ASCII\r\n[debug] youtube-dl version 2021.06.06.1\r\n[debug] Python version 2.7.1 (CPython) - Linux-2.6.18-7.1-7405b0-smp-with-libc0\r\n[debug] exe versions: ffmpeg 4.1, ffprobe 4.1\r\n[debug] Proxy map: {}\r\n[vimeo] 581039021: Downloading JSON metadata\r\n[vimeo] 581039021: Downloading JSON metadata\r\n[vimeo] 581039021: Downloading JSON metadata\r\n[vimeo] 581039021: Downloading akfire_interconnect_quic m3u8 information\r\n[vimeo] 581039021: Downloading akfire_interconnect_quic m3u8 information\r\n[vimeo] 581039021: Downloading fastly_skyfire m3u8 information\r\n[vimeo] 581039021: Downloading fastly_skyfire m3u8 information\r\n[vimeo] 581039021: Downloading akfire_interconnect_quic MPD information\r\n[vimeo] 581039021: Downloading akfire_interconnect_quic MPD information\r\n[vimeo] 581039021: Downloading fastly_skyfire MPD information\r\n[vimeo] 581039021: Downloading fastly_skyfire MPD information\r\n[info] Available formats for 581039021:\r\nformat code                                                                                        extension  resolution note\r\nhls-fastly_skyfire-1501                                                                            mp4        1920x1080  1501k , avc1.640028, 30.0fps, mp4a.40.2\r\nhls-akfire_interconnect_quic-1501                                                                  mp4        1920x1080  1501k , avc1.640028, 30.0fps, mp4a.40.2\r\nhttp-1080p                                                                                         mp4        1920x1080  30fps\r\nhls-fastly_skyfire-916                                                                             mp4        1280x720    916k , avc1.640020, 30.0fps, mp4a.40.2\r\nhls-akfire_interconnect_quic-916                                                                   mp4        1280x720    916k , avc1.640020, 30.0fps, mp4a.40.2\r\nhttp-720p                                                                                          mp4        1280x720   30fps\r\ndash-fastly_skyfire-video-7248713b                                                                 mp4        960x540    DASH video 1115k , mp4_dash container, avc1.64001F, 30fps, mp4a.40.2 (48000Hz)\r\ndash-akfire_interconnect_quic-video-7248713b                                                       mp4        960x540    DASH video 1115k , mp4_dash container, avc1.64001F, 30fps, mp4a.40.2 (48000Hz)\r\nhls-fastly_skyfire-661                                                                             mp4        960x540     661k , avc1.64001F, 30.0fps, mp4a.40.2\r\nhls-akfire_interconnect_quic-661                                                                   mp4        960x540     661k , avc1.64001F, 30.0fps, mp4a.40.2\r\nhttp-540p                                                                                          mp4        960x540    30fps\r\ndash-fastly_skyfire-video-ded7a2c1                                                                 mp4        640x360    DASH video  440k , mp4_dash container, avc1.64001E, 30fps, mp4a.40.2 (48000Hz)\r\ndash-akfire_interconnect_quic-video-ded7a2c1                                                       mp4        640x360    DASH video  440k , mp4_dash container, avc1.64001E, 30fps, mp4a.40.2 (48000Hz)\r\nhls-fastly_skyfire-337                                                                             mp4        640x360     337k , avc1.64001E, 30.0fps, mp4a.40.2\r\nhls-akfire_interconnect_quic-337                                                                   mp4        640x360     337k , avc1.64001E, 30.0fps, mp4a.40.2\r\nhttp-360p                                                                                          mp4        640x360    30fps\r\nhttp-240p                                                                                          mp4        426x240    30fps\r\nhls-fastly_skyfire_sep-1501+dash-fastly_skyfire_sep-audio-7248713b                                 mp4        1920x1080  avc1.640028, 30.0fps, mp4a.40.2\r\nhls-akfire_interconnect_quic_sep-1501+dash-akfire_interconnect_quic_sep-audio-7248713b             mp4        1920x1080  avc1.640028, 30.0fps, mp4a.40.2\r\ndash-fastly_skyfire_sep-video-36b397cb+dash-fastly_skyfire_sep-audio-ded7a2c1                      mp4        1280x720   avc1.640020, 30fps, mp4a.40.2\r\ndash-akfire_interconnect_quic_sep-video-36b397cb+dash-akfire_interconnect_quic_sep-audio-ded7a2c1  mp4        1280x720   avc1.640020, 30fps, mp4a.40.2\r\nhls-fastly_skyfire_sep-916+dash-fastly_skyfire_sep-audio-06e865e1                                  mp4        1280x720   avc1.640020, 30.0fps, opus \r\nhls-akfire_interconnect_quic_sep-916+dash-akfire_interconnect_quic_sep-audio-06e865e1              mp4        1280x720   avc1.640020, 30.0fps, opus \r\ndash-fastly_skyfire_sep-video-7248713b+dash-fastly_skyfire_sep-audio-8f1b4276                      mp4        960x540    avc1.64001F, 30fps, opus \r\ndash-akfire_interconnect_quic_sep-video-7248713b+dash-akfire_interconnect_quic_sep-audio-8f1b4276  mp4        960x540    avc1.64001F, 30fps, opus \r\nhls-fastly_skyfire_sep-533+hls-fastly_skyfire_sep-audio-medium-audio                               mp4        960x540    avc1.64001F, 30.0fps\r\nhls-akfire_interconnect_quic_sep-533+hls-fastly_skyfire_sep-audio-high-audio                       mp4        960x540    avc1.64001F, 30.0fps\r\nhls-fastly_skyfire_sep-336+hls-akfire_interconnect_quic_sep-audio-medium-audio                     mp4        640x360    avc1.64001E, 30.0fps\r\nhls-akfire_interconnect_quic_sep-336+hls-akfire_interconnect_quic_sep-audio-high-audio             mp4        640x360    avc1.64001E, 30.0fps (best)\r\n#\r\n``` \r\n",
        "created_at": "2021-07-31T12:24:13Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_YoutubeDL.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 28801,
        "instance_id": "ytdl-org__youtube-dl-28801",
        "issue_numbers": [
            "26211"
        ],
        "base_commit": "40bd5c18153afe765caa6726302ee1dd8a9a2ce6",
        "patch": "diff --git a/youtube_dl/utils.py b/youtube_dl/utils.py\nindex 61b94d84c44..c249e71681d 100644\n--- a/youtube_dl/utils.py\n+++ b/youtube_dl/utils.py\n@@ -2182,8 +2182,28 @@ def sanitize_url(url):\n     return url\n \n \n+def extract_basic_auth(url):\n+    parts = compat_urllib_parse.urlsplit(url)\n+    if parts.username is None:\n+        return url, None\n+    url = compat_urllib_parse.urlunsplit(parts._replace(netloc=(\n+        parts.hostname if parts.port is None\n+        else '%s:%d' % (parts.hostname, parts.port))))\n+    auth_payload = base64.b64encode(\n+        ('%s:%s' % (parts.username, parts.password or '')).encode('utf-8'))\n+    return url, 'Basic {0}'.format(auth_payload.decode('ascii'))\n+\n+\n def sanitized_Request(url, *args, **kwargs):\n-    return compat_urllib_request.Request(escape_url(sanitize_url(url)), *args, **kwargs)\n+    url, auth_header = extract_basic_auth(escape_url(sanitize_url(url)))\n+    if auth_header is not None:\n+        headers = args[1] if len(args) > 1 else kwargs.get('headers')\n+        headers = headers or {}\n+        headers['Authorization'] = auth_header\n+        if len(args) <= 1 and kwargs.get('headers') is None:\n+            kwargs['headers'] = headers\n+            kwargs = compat_kwargs(kwargs)\n+    return compat_urllib_request.Request(url, *args, **kwargs)\n \n \n def expand_path(s):\n",
        "test_patch": "diff --git a/test/test_utils.py b/test/test_utils.py\nindex 102420fcb88..90d64b5811e 100644\n--- a/test/test_utils.py\n+++ b/test/test_utils.py\n@@ -81,6 +81,7 @@\n     sanitize_filename,\n     sanitize_path,\n     sanitize_url,\n+    sanitized_Request,\n     shell_quote,\n     smuggle_url,\n     str_or_none,\n@@ -255,6 +256,18 @@ def test_sanitize_url(self):\n         self.assertEqual(sanitize_url('https://foo.bar'), 'https://foo.bar')\n         self.assertEqual(sanitize_url('foo bar'), 'foo bar')\n \n+    def test_sanitized_Request(self):\n+        self.assertFalse(sanitized_Request('http://foo.bar').has_header('Authorization'))\n+        self.assertFalse(sanitized_Request('http://:foo.bar').has_header('Authorization'))\n+        self.assertEqual(sanitized_Request('http://@foo.bar').get_header('Authorization'),\n+                         'Basic Og==')\n+        self.assertEqual(sanitized_Request('http://:pass@foo.bar').get_header('Authorization'),\n+                         'Basic OnBhc3M=')\n+        self.assertEqual(sanitized_Request('http://user:@foo.bar').get_header('Authorization'),\n+                         'Basic dXNlcjo=')\n+        self.assertEqual(sanitized_Request('http://user:pass@foo.bar').get_header('Authorization'),\n+                         'Basic dXNlcjpwYXNz')\n+\n     def test_expand_path(self):\n         def env(var):\n             return '%{0}%'.format(var) if sys.platform == 'win32' else '${0}'.format(var)\n",
        "problem_statement": "error when entering username and password\n<!--\r\n\r\n######################################################################\r\n  WARNING!\r\n  IGNORING THE FOLLOWING TEMPLATE WILL RESULT IN ISSUE CLOSED AS INCOMPLETE\r\n######################################################################\r\n\r\n-->\r\n\r\n\r\n## Checklist\r\n\r\n<!--\r\nCarefully read and work through this check list in order to prevent the most common mistakes and misuse of youtube-dl:\r\n- First of, make sure you are using the latest version of youtube-dl. Run `youtube-dl --version` and ensure your version is 2020.07.28. If it's not, see https://yt-dl.org/update on how to update. Issues with outdated version will be REJECTED.\r\n- Make sure that all provided video/audio/playlist URLs (if any) are alive and playable in a browser.\r\n- Make sure that all URLs and arguments with special characters are properly quoted or escaped as explained in http://yt-dl.org/escape.\r\n- Search the bugtracker for similar issues: http://yt-dl.org/search-issues. DO NOT post duplicates.\r\n- Read bugs section in FAQ: http://yt-dl.org/reporting\r\n- Finally, put x into all relevant boxes (like this [x])\r\n-->\r\n\r\n- [x] I'm reporting a broken site support issue\r\n- [x ] I've verified that I'm running youtube-dl version **2020.07.28**\r\n- [x ] I've checked that all provided URLs are alive and playable in a browser\r\n- [ x] I've checked that all URLs and arguments with special characters are properly quoted or escaped\r\n- [x ] I've searched the bugtracker for similar bug reports including closed ones\r\n- [x ] I've read bugs section in FAQ\r\n\r\n\r\n## Verbose log\r\n\r\n<!--\r\nProvide the complete verbose output of youtube-dl that clearly demonstrates the problem.\r\nAdd the `-v` flag to your command line you run youtube-dl with (`youtube-dl -v <your command line>`), copy the WHOLE output and insert it below. It should look similar to this:\r\n [debug] System config: []\r\n [debug] User config: []\r\n [debug] Command-line args: [u'-v', u'http://www.youtube.com/watch?v=BaW_jenozKcj']\r\n [debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251\r\n [debug] youtube-dl version 2020.07.28\r\n [debug] Python version 2.7.11 - Windows-2003Server-5.2.3790-SP2\r\n [debug] exe versions: ffmpeg N-75573-g1d0487f, ffprobe N-75573-g1d0487f, rtmpdump 2.4\r\n [debug] Proxy map: {}\r\n <more lines>\r\n-->\r\n\r\n```\r\nPASTE VERBOSE LOG HERE\r\n```\r\n[tim@cabra ~]$ youtube-dl --version\r\n2020.07.28\r\n[tim@cabra ~]$ youtube-dl -o '%(title)s.%(ext)s'   'http://mooo.peelwiki.com/dl/BillfromNorthWales/01%20John%20Peel/1978-12-26%20John%20Peel%20BBC%20Radio%201.mp3' --username 'peel' --password 'group' --verbose\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: [u'-o', u'%(title)s.%(ext)s', u'http://mooo.peelwiki.com/dl/BillfromNorthWales/01%20John%20Peel/1978-12-26%20John%20Peel%20BBC%20Radio%201.mp3', u'--username', u'PRIVATE', u'--password', u'PRIVATE', u'--verbose']\r\n[debug] Encodings: locale UTF-8, fs UTF-8, out UTF-8, pref UTF-8\r\n[debug] youtube-dl version 2020.07.28\r\n[debug] Python version 2.7.17 (CPython) - Linux-5.3.11-100.fc29.x86_64-x86_64-with-fedora-29-Twenty_Nine\r\n[debug] exe versions: ffmpeg 4.0.5, ffprobe 4.0.5\r\n[debug] Proxy map: {}\r\n[generic] 1978-12-26 John Peel BBC Radio 1: Requesting header\r\nWARNING: Could not send HEAD request to http://mooo.peelwiki.com/dl/BillfromNorthWales/01%20John%20Peel/1978-12-26%20John%20Peel%20BBC%20Radio%201.mp3: HTTP Error 401: Authorization Required\r\n[generic] 1978-12-26 John Peel BBC Radio 1: Downloading webpage\r\nERROR: Unable to download webpage: HTTP Error 401: Authorization Required (caused by HTTPError()); please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; type  youtube-dl -U  to update. Be sure to call youtube-dl with the --verbose flag and include its complete output.\r\n  File \"/usr/local/bin/youtube-dl/youtube_dl/extractor/common.py\", line 627, in _request_webpage\r\n    return self._downloader.urlopen(url_or_request)\r\n  File \"/usr/local/bin/youtube-dl/youtube_dl/YoutubeDL.py\", line 2238, in urlopen\r\n    return self._opener.open(req, timeout=self._socket_timeout)\r\n  File \"/usr/lib64/python2.7/urllib2.py\", line 435, in open\r\n    response = meth(req, response)\r\n  File \"/usr/lib64/python2.7/urllib2.py\", line 548, in http_response\r\n    'http', request, response, code, msg, hdrs)\r\n  File \"/usr/lib64/python2.7/urllib2.py\", line 473, in error\r\n    return self._call_chain(*args)\r\n  File \"/usr/lib64/python2.7/urllib2.py\", line 407, in _call_chain\r\n    result = func(*args)\r\n  File \"/usr/lib64/python2.7/urllib2.py\", line 556, in http_error_default\r\n    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)\r\n\r\n[tim@cabra ~]$ \r\n\r\n\r\n\r\n\r\n\r\n## Description\r\n\r\n<!--\r\nProvide an explanation of your issue in an arbitrary form. Please make sure the description is worded well enough to be understood, see https://github.com/ytdl-org/youtube-dl#is-the-description-of-the-issue-itself-sufficient. Provide any additional information, suggested solution and as much context and examples as possible.\r\nIf work on your issue requires account credentials please provide them or explain how one can obtain them.\r\n-->\r\n\r\nWRITE DESCRIPTION HERE\r\n\r\n\r\nThis is the first time I have had to enter a username/password combo into youtube-dl. From the browser I enter this url followed by username/password and it opens up a media player within the browser. This is the next level url\r\n\r\nhttps://peel.fandom.com/wiki/1978\r\n\r\nsearch for 26 December 1978 and then head to the bottom of that page for the mooo links.\r\n\r\nI have tried a few different options with the same results - http and https. Username/password in single/double and no quotes with the same response\r\n\r\nRegards\n",
        "hints_text": "`--username` and `--password` only work for specific supported sites and not with the generic extractor.\r\n\r\nYou can download this file by adding the login credentials at the beginning of the URL and using `wget`, `curl`, your browser, etc\r\n\r\n``` bash\r\n$ wget 'http://peel:group@mooo.peelwiki.com/dl/BillfromNorthWales/01 John Peel/1978-12-26 John Peel BBC Radio 1.mp3'\r\n```\r\n\r\n`youtube-dl` also doesn't work with this kind of URL, by the way:\r\n``` bash\r\n$ youtube-dl -v 'http://peel:group@mooo.peelwiki.com/dl/BillfromNorthWales/01 John Peel/1978-12-26 John Peel BBC Radio 1.mp3'\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['-v', 'http://peel:group@mooo.peelwiki.com/dl/BillfromNorthWales/01 John Peel/1978-12-26 John Peel BBC Radio 1.mp3']\r\n[debug] Encodings: locale UTF-8, fs utf-8, out utf-8, pref UTF-8\r\n[debug] youtube-dl version 2020.07.28\r\n[debug] Python version 3.8.5 (CPython) - Linux-5.4.50-1-lts-x86_64-with-glibc2.2.5\r\n[debug] exe versions: ffmpeg 4.2.3, ffprobe 4.2.3, rtmpdump 2.4\r\n[debug] Proxy map: {}\r\n[generic] 1978-12-26 John Peel BBC Radio 1: Requesting header\r\nWARNING: Could not send HEAD request to http://peel:group@mooo.peelwiki.com/dl/BillfromNorthWales/01 John Peel/1978-12-26 John Peel BBC Radio 1.mp3: nonnumeric port: 'group@mooo.peelwiki.com'\r\n[generic] 1978-12-26 John Peel BBC Radio 1: Downloading webpage\r\nERROR: Unable to download webpage: nonnumeric port: 'group@mooo.peelwiki.com' (caused by InvalidURL(\"nonnumeric port: 'group@mooo.peelwiki.com'\")); please report this issue on https://yt-dl.org/bug . Make sure you are using the latest version; see  https://yt-dl.org/update  on how to update. Be sure to call youtube-dl with the --verbose flag and include its complete output.\r\n  File \"/home/mike/.local/lib/python3.8/site-packages/youtube_dl/extractor/common.py\", line 627, in _request_webpage\r\n    return self._downloader.urlopen(url_or_request)\r\n  File \"/home/mike/.local/lib/python3.8/site-packages/youtube_dl/YoutubeDL.py\", line 2238, in urlopen\r\n    return self._opener.open(req, timeout=self._socket_timeout)\r\n  File \"/usr/lib/python3.8/urllib/request.py\", line 525, in open\r\n    response = self._open(req, data)\r\n  File \"/usr/lib/python3.8/urllib/request.py\", line 542, in _open\r\n    result = self._call_chain(self.handle_open, protocol, protocol +\r\n  File \"/usr/lib/python3.8/urllib/request.py\", line 502, in _call_chain\r\n    result = func(*args)\r\n  File \"/home/mike/.local/lib/python3.8/site-packages/youtube_dl/utils.py\", line 2578, in http_open\r\n    return self.do_open(functools.partial(\r\n  File \"/usr/lib/python3.8/urllib/request.py\", line 1319, in do_open\r\n    h = http_class(host, timeout=req.timeout, **http_conn_args)\r\n  File \"/home/mike/.local/lib/python3.8/site-packages/youtube_dl/utils.py\", line 2479, in _create_http_connection\r\n    hc = http_class(*args, **compat_kwargs(kwargs))\r\n  File \"/usr/lib/python3.8/http/client.py\", line 833, in __init__\r\n    (self.host, self.port) = self._get_hostport(host, port)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 876, in _get_hostport\r\n    raise InvalidURL(\"nonnumeric port: '%s'\" % host[i+1:])\r\n```\nthanks for the educated response",
        "created_at": "2021-04-19T12:59:50Z",
        "version": "2021.12",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_utils.py\"]"
    },
    {
        "repo": "ytdl-org/youtube-dl",
        "pull_number": 23199,
        "instance_id": "ytdl-org__youtube-dl-23199",
        "issue_numbers": [
            "23197"
        ],
        "base_commit": "0de9fd24dc8723c78a90cb546e4a05818304521e",
        "patch": "diff --git a/youtube_dl/utils.py b/youtube_dl/utils.py\nindex aed988b884b..0d30075aa1d 100644\n--- a/youtube_dl/utils.py\n+++ b/youtube_dl/utils.py\n@@ -1718,13 +1718,16 @@ def random_user_agent():\n     '%B %d %Y',\n     '%B %dst %Y',\n     '%B %dnd %Y',\n+    '%B %drd %Y',\n     '%B %dth %Y',\n     '%b %d %Y',\n     '%b %dst %Y',\n     '%b %dnd %Y',\n+    '%b %drd %Y',\n     '%b %dth %Y',\n     '%b %dst %Y %I:%M',\n     '%b %dnd %Y %I:%M',\n+    '%b %drd %Y %I:%M',\n     '%b %dth %Y %I:%M',\n     '%Y %m %d',\n     '%Y-%m-%d',\n",
        "test_patch": "diff --git a/test/test_utils.py b/test/test_utils.py\nindex 3920542bb43..0db37d9d88e 100644\n--- a/test/test_utils.py\n+++ b/test/test_utils.py\n@@ -340,6 +340,8 @@ def test_unified_dates(self):\n         self.assertEqual(unified_strdate('July 15th, 2013'), '20130715')\n         self.assertEqual(unified_strdate('September 1st, 2013'), '20130901')\n         self.assertEqual(unified_strdate('Sep 2nd, 2013'), '20130902')\n+        self.assertEqual(unified_strdate('November 3rd, 2019'), '20191103')\n+        self.assertEqual(unified_strdate('October 23rd, 2005'), '20051023')\n \n     def test_unified_timestamps(self):\n         self.assertEqual(unified_timestamp('December 21, 2010'), 1292889600)\n",
        "problem_statement": "unified_strdate returns None on dates with \"3rd\" and \"23rd\"\n<!--\r\n\r\n######################################################################\r\n  WARNING!\r\n  IGNORING THE FOLLOWING TEMPLATE WILL RESULT IN ISSUE CLOSED AS INCOMPLETE\r\n######################################################################\r\n\r\n-->\r\n\r\n\r\n## Checklist\r\n\r\n<!--\r\nCarefully read and work through this check list in order to prevent the most common mistakes and misuse of youtube-dl:\r\n- First of, make sure you are using the latest version of youtube-dl. Run `youtube-dl --version` and ensure your version is 2019.11.22. If it's not, see https://yt-dl.org/update on how to update. Issues with outdated version will be REJECTED.\r\n- Make sure that all provided video/audio/playlist URLs (if any) are alive and playable in a browser.\r\n- Make sure that all URLs and arguments with special characters are properly quoted or escaped as explained in http://yt-dl.org/escape.\r\n- Search the bugtracker for similar issues: http://yt-dl.org/search-issues. DO NOT post duplicates.\r\n- Read bugs section in FAQ: http://yt-dl.org/reporting\r\n- Finally, put x into all relevant boxes (like this [x])\r\n-->\r\n\r\n- [ ] I'm reporting a broken site support issue\r\n- [x] I've verified that I'm running youtube-dl version **2019.11.22**\r\n- [x] I've checked that all provided URLs are alive and playable in a browser\r\n- [x] I've checked that all URLs and arguments with special characters are properly quoted or escaped\r\n- [x] I've searched the bugtracker for similar bug reports including closed ones\r\n- [x] I've read bugs section in FAQ\r\n\r\n\r\n## Verbose log\r\n\r\n<!--\r\nProvide the complete verbose output of youtube-dl that clearly demonstrates the problem.\r\nAdd the `-v` flag to your command line you run youtube-dl with (`youtube-dl -v <your command line>`), copy the WHOLE output and insert it below. It should look similar to this:\r\n [debug] System config: []\r\n [debug] User config: []\r\n [debug] Command-line args: [u'-v', u'http://www.youtube.com/watch?v=BaW_jenozKcj']\r\n [debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251\r\n [debug] youtube-dl version 2019.11.22\r\n [debug] Python version 2.7.11 - Windows-2003Server-5.2.3790-SP2\r\n [debug] exe versions: ffmpeg N-75573-g1d0487f, ffprobe N-75573-g1d0487f, rtmpdump 2.4\r\n [debug] Proxy map: {}\r\n <more lines>\r\n-->\r\n\r\n[debug] System config: []\r\n[debug] User config: []\r\n[debug] Custom config: []\r\n[debug] Command-line args: ['https://www.bitchute.com/video/KDAtOH7nEUGe/', '--no-check-certificate', '--verbose']\r\n[debug] Encodings: locale UTF-8, fs utf-8, out UTF-8, pref UTF-8\r\n[debug] youtube-dl version 2019.11.22\r\n[debug] Git HEAD: 8267f2fa9\r\n[debug] Python version 3.7.4 (CPython) - Linux-5.3.8-gnu-x86_64-with-glibc2.2.5\r\n[debug] exe versions: ffmpeg 4.2.1, ffprobe 4.2.1\r\n[debug] Proxy map: {}\r\n[BitChute] KDAtOH7nEUGe: Downloading webpage\r\n[BitChute] KDAtOH7nEUGe: Checking video URL\r\n\r\n(Custom output snipped. See description for details.)\r\n\r\n\r\n\r\n\r\n## Description\r\n\r\n<!--\r\nProvide an explanation of your issue in an arbitrary form. Please make sure the description is worded well enough to be understood, see https://github.com/ytdl-org/youtube-dl#is-the-description-of-the-issue-itself-sufficient. Provide any additional information, suggested solution and as much context and examples as possible.\r\nIf work on your issue requires account credentials please provide them or explain how one can obtain them.\r\n-->\r\n\r\n\"unified_strdate\" from utils returns None instead of a date if the string sent contains \"3rd\" or \"23rd\".\r\n\r\nI initially discovered this issue when creating pull #23193. Other sites (such as youtube) don't seem to have prefixes such as \"*st\", \"*nd\", \"*rd\", etc, on the day of the month, and thus don't seem to run into this problem when getting dates.\r\n\r\nI hacked together a quick test patch that runs through all possible dates and displays them along with the converted version from unified_strdate. The full output and the test patch are attached. To run it, just apply the patch and tell youtube-dl to download any bitchute video (I used \"https://www.bitchute.com/video/KDAtOH7nEUGe/\" in this example, but any video will work).\r\n\r\n[date_test_patch.txt](https://github.com/ytdl-org/youtube-dl/files/3884233/date_test_patch.txt)\r\n[output.txt](https://github.com/ytdl-org/youtube-dl/files/3884234/output.txt)\r\n\r\nAs you can see from this snippet, all of the 3rd and 23rd days return \"None\" instead of a date. The full output also has \"None\" in days that do not exist (such as February 31st), since this was just a quick hack to check which dates worked and which didn't.\r\n\r\n```\r\nJanuary 1st, 2019:  20190101\r\nJanuary 2nd, 2019:  20190102\r\nJanuary 3rd, 2019:  None\r\nJanuary 4th, 2019:  20190104\r\n...\r\nJanuary 22nd, 2019:  20190122\r\nJanuary 23rd, 2019:  None\r\nJanuary 24th, 2019:  20190124\r\n...\r\nFebruary 2nd, 2019:  20190202\r\nFebruary 3rd, 2019:  None\r\nFebruary 4th, 2019:  20190204\r\n...\r\n```\n",
        "hints_text": "",
        "created_at": "2019-11-25T00:22:11Z",
        "version": "2019.11",
        "PASS_TO_PASS": "[]",
        "FAIL_TO_PASS": "[\"test/test_utils.py\"]"
    }
]