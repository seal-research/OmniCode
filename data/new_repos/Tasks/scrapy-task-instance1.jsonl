s{"repo": "scrapy/scrapy", "pull_number": 5320, "instance_id": "scrapy__scrapy-5320", "issue_numbers": ["5319"], "base_commit": "28eba610e22c0d2a42e830b4e64746edf44598f9", "patch": "diff --git a/scrapy/utils/response.py b/scrapy/utils/response.py\nindex b3ef7b4637f..8b109dced2a 100644\n--- a/scrapy/utils/response.py\n+++ b/scrapy/utils/response.py\n@@ -3,8 +3,9 @@\n scrapy.http.Response objects\n \"\"\"\n import os\n-import webbrowser\n+import re\n import tempfile\n+import webbrowser\n from typing import Any, Callable, Iterable, Optional, Tuple, Union\n from weakref import WeakKeyDictionary\n \n@@ -80,8 +81,9 @@ def open_in_browser(\n     body = response.body\n     if isinstance(response, HtmlResponse):\n         if b'<base' not in body:\n-            repl = f'<head><base href=\"{response.url}\">'\n-            body = body.replace(b'<head>', to_bytes(repl))\n+            repl = fr'\\1<base href=\"{response.url}\">'\n+            body = re.sub(b\"<!--.*?-->\", b\"\", body, flags=re.DOTALL)\n+            body = re.sub(rb\"(<head(?:>|\\s.*?>))\", to_bytes(repl), body)\n         ext = '.html'\n     elif isinstance(response, TextResponse):\n         ext = '.txt'\n", "test_patch": "diff --git a/tests/test_utils_response.py b/tests/test_utils_response.py\nindex d6f4c0bb59e..0a09f610927 100644\n--- a/tests/test_utils_response.py\n+++ b/tests/test_utils_response.py\n@@ -83,3 +83,56 @@ def test_response_status_message(self):\n         self.assertEqual(response_status_message(200), '200 OK')\n         self.assertEqual(response_status_message(404), '404 Not Found')\n         self.assertEqual(response_status_message(573), \"573 Unknown Status\")\n+\n+    def test_inject_base_url(self):\n+        url = \"http://www.example.com\"\n+\n+        def check_base_url(burl):\n+            path = urlparse(burl).path\n+            if not os.path.exists(path):\n+                path = burl.replace('file://', '')\n+            with open(path, \"rb\") as f:\n+                bbody = f.read()\n+            self.assertEqual(bbody.count(b'<base href=\"' + to_bytes(url) + b'\">'), 1)\n+            return True\n+\n+        r1 = HtmlResponse(url, body=b\"\"\"\n+        <html>\n+            <head><title>Dummy</title></head>\n+            <body><p>Hello world.</p></body>\n+        </html>\"\"\")\n+        r2 = HtmlResponse(url, body=b\"\"\"\n+        <html>\n+            <head id=\"foo\"><title>Dummy</title></head>\n+            <body>Hello world.</body>\n+        </html>\"\"\")\n+        r3 = HtmlResponse(url, body=b\"\"\"\n+        <html>\n+            <head><title>Dummy</title></head>\n+            <body>\n+                <header>Hello header</header>\n+                <p>Hello world.</p>\n+            </body>\n+        </html>\"\"\")\n+        r4 = HtmlResponse(url, body=b\"\"\"\n+        <html>\n+            <!-- <head>Dummy comment</head> -->\n+            <head><title>Dummy</title></head>\n+            <body><p>Hello world.</p></body>\n+        </html>\"\"\")\n+        r5 = HtmlResponse(url, body=b\"\"\"\n+        <html>\n+            <!--[if IE]>\n+            <head><title>IE head</title></head>\n+            <![endif]-->\n+            <!--[if !IE]>-->\n+            <head><title>Standard head</title></head>\n+            <!--<![endif]-->\n+            <body><p>Hello world.</p></body>\n+        </html>\"\"\")\n+\n+        assert open_in_browser(r1, _openfunc=check_base_url), \"Inject base url\"\n+        assert open_in_browser(r2, _openfunc=check_base_url), \"Inject base url with argumented head\"\n+        assert open_in_browser(r3, _openfunc=check_base_url), \"Inject unique base url with misleading tag\"\n+        assert open_in_browser(r4, _openfunc=check_base_url), \"Inject unique base url with misleading comment\"\n+        assert open_in_browser(r5, _openfunc=check_base_url), \"Inject unique base url with conditional comment\"\n", "problem_statement": "Open in Browser `<base>` replacement will fail if `<head>` has attributes\n### Description\r\n\r\nWhen using `open_in_browser()` feature, Scrapy will try to add a `<base>` tag to ensure remote resources are loaded, and to make external links to work in our local browser. This feature rely on the following code:\r\n\r\nhttps://github.com/scrapy/scrapy/blob/06f3d12c1208c380f9f1a16cb36ba2dfa3c244c5/scrapy/utils/response.py#L81-L84\r\n\r\nSome website are using attributes on the `<head>` tag, which will prevent the `<base>` tag to be injected, and therefore external resources to be loaded.\r\n\r\n### How to reproduce the issue \r\n\r\nSimply create a basic spider [following Scrapy tutorial](https://docs.scrapy.org/en/latest/intro/tutorial.html) and use the following code:\r\n\r\n```py\r\nimport scrapy\r\nfrom scrapy.utils.response import open_in_browser\r\n\r\nclass ExampleSpider(scrapy.Spider):\r\n    name = 'example'\r\n    allowed_domains = ['example.com']\r\n    start_urls = [\r\n        'https://example.com/head-without-argument.html', \r\n        'https://example.com/head-with-argument.html']\r\n\r\n    def parse(self, response):\r\n        open_in_browser(response)\r\n        pass\r\n```\r\n\r\nFor the scrapped pages itselves, use the simplest code possible (I've not been able to quickly find a public page using arguments on `<head>`, sorry):\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- head-without-argument.html -->\r\n  <head>\r\n    <title>Title</title>\r\n  </head>\r\n  <body>\r\n    <p>Foo</p>\r\n    <img src=\"./assets/image.jpg\">\r\n  </body>\r\n</html>\r\n```\r\n\r\n<!-- -->\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <!-- head-with-argument.html -->\r\n  <head id=\"example\">\r\n    <title>Title</title>\r\n  </head>\r\n  <body>\r\n    <p>Foo</p>\r\n    <img src=\"./assets/image.jpg\">\r\n  </body>\r\n</html>\r\n```\r\n\r\nThen run the spider with `scrapy crawl example` and you'll see that:\r\n1. `head-without-argument.html` output renders resource correctly\r\n2. `head-with-argument.html` output doesn't render resource\r\n\r\n### How to fix the issue\r\n\r\nAt the very least, the literal `replace()` function should be replace by a regex replacement:\r\n```py\r\n if isinstance(response, HtmlResponse): \r\n     if b'<base' not in body: \r\n         repl = f'\\\\1<base href=\"{response.url}\">' \r\n         body = re.sub(b\"(<head.*?>)\", to_bytes(repl), body)\r\n```\r\n\r\n### Environment \r\n```\r\nScrapy       : 2.5.1\r\nlxml         : 4.6.3.0\r\nlibxml2      : 2.9.4\r\ncssselect    : 1.1.0\r\nparsel       : 1.6.0\r\nw3lib        : 1.22.0\r\nTwisted      : 21.7.0\r\nPython       : 3.9.7 (default, Sep  3 2021, 04:31:11) - [Clang 12.0.5 (clang-1205.0.22.9)]\r\npyOpenSSL    : 21.0.0 (OpenSSL 1.1.1l  24 Aug 2021)\r\ncryptography : 35.0.0\r\nPlatform     : macOS-11.6-arm64-arm-64bit\r\n```\n", "hints_text": "", "created_at": "2021-11-15T10:15:57Z"}
