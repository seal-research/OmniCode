{"repo": "sherlock-project/sherlock", "pull_number": 2267, "instance_id": "sherlock-project__sherlock-2267", "issue_numbers": ["2266", "2266"], "base_commit": "47ab466d85d4d3e548bc2feba41648c27b21bd89", "patch": "diff --git a/.github/workflows/regression.yml b/.github/workflows/regression.yml\nindex 1ff20f907..2e5ea941f 100644\n--- a/.github/workflows/regression.yml\n+++ b/.github/workflows/regression.yml\n@@ -49,7 +49,6 @@ jobs:\n           macos-latest,\n         ]\n         python-version: [\n-          '3.8',\n           '3.9',\n           '3.10',\n           '3.11',\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 411845989..069cb9d36 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -40,7 +40,7 @@ repository = \"https://github.com/sherlock-project/sherlock\"\n \"Bug Tracker\" = \"https://github.com/sherlock-project/sherlock/issues\"\n \n [tool.poetry.dependencies]\n-python = \"^3.8\"\n+python = \"^3.9\"\n certifi = \">=2019.6.16\"\n colorama = \"^0.4.1\"\n PySocks = \"^1.7.0\"\n@@ -48,8 +48,7 @@ requests = \"^2.22.0\"\n requests-futures = \"^1.0.0\"\n stem = \"^1.8.0\"\n torrequest = \"^0.1.0\"\n-# pandas can likely be bumped up to ^2.0.0 after fc39 EOL\n-pandas = \">=1.0.0,<3.0.0\"\n+pandas = \"^2.2.1\"\n openpyxl = \"^3.0.10\"\n \n [tool.poetry.extras]\ndiff --git a/sherlock_project/__main__.py b/sherlock_project/__main__.py\nindex 319383174..a252de0fc 100644\n--- a/sherlock_project/__main__.py\n+++ b/sherlock_project/__main__.py\n@@ -14,8 +14,8 @@\n     # Check if the user is using the correct version of Python\n     python_version = sys.version.split()[0]\n \n-    if sys.version_info < (3, 8):\n-        print(f\"Sherlock requires Python 3.8+\\nYou are using Python {python_version}, which is not supported by Sherlock.\")\n+    if sys.version_info < (3, 9):\n+        print(f\"Sherlock requires Python 3.9+\\nYou are using Python {python_version}, which is not supported by Sherlock.\")\n         sys.exit(1)\n \n     from sherlock_project import sherlock\ndiff --git a/tox.ini b/tox.ini\nindex 0c1821536..1e9a47de0 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -41,4 +41,3 @@ python =\n     3.11: py311\n     3.10: py310\n     3.9: py39\n-    3.8: py38\n", "test_patch": "diff --git a/tests/sherlock_interactives.py b/tests/sherlock_interactives.py\nindex 2c9d9d951..be901fbf7 100644\n--- a/tests/sherlock_interactives.py\n+++ b/tests/sherlock_interactives.py\n@@ -20,8 +20,7 @@ def run_cli(args:str = \"\") -> str:\n             raise InteractivesSubprocessError(e.output.decode())\n \n \n-    # -> list[str] is prefered, but will require deprecation of support for Python 3.8\n-    def walk_sherlock_for_files_with(pattern: str) -> list:\n+    def walk_sherlock_for_files_with(pattern: str) -> list[str]:\n         \"\"\"Check all files within the Sherlock package for matching patterns\"\"\"\n         pattern:re.Pattern = re.compile(pattern)\n         matching_files:list[str] = []\n", "problem_statement": "Deprecate support for Python 3.8\n### Description\r\n\r\nSome versions of pandas and numpy are incompatible, and the compatible versions of pandas is not compatible with Python versions below 3.9. Since Python 3.8 is reaching EOL in about a month anyways, support for this version should now be deprecated to allow for more ready dependency resolution and avoidance of this fatal error.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/bin/sherlock\", line 3, in <module>\r\n    from sherlock_project.sherlock import main\r\n  File \"/home/[redacted]/Documents/sherlock/sherlock_project/sherlock.py\", line 21, in <module>\r\n    import pandas as pd\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/__init__.py\", line 22, in <module>\r\n    from pandas.compat import is_numpy_dev as _is_numpy_dev  # pyright: ignore # noqa:F401\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/compat/__init__.py\", line 25, in <module>\r\n    from pandas.compat.numpy import (\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/compat/numpy/__init__.py\", line 4, in <module>\r\n    from pandas.util.version import Version\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/util/__init__.py\", line 2, in <module>\r\n    from pandas.util._decorators import (  # noqa:F401\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/util/_decorators.py\", line 14, in <module>\r\n    from pandas._libs.properties import cache_readonly\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/_libs/__init__.py\", line 13, in <module>\r\n    from pandas._libs.interval import Interval\r\n  File \"pandas/_libs/interval.pyx\", line 1, in init pandas._libs.interval\r\nValueError: numpy.dtype size changed, may indicate binary incompatibility. Expected 96 from C header, got 88 from PyObject\r\n```\nDeprecate support for Python 3.8\n### Description\r\n\r\nSome versions of pandas and numpy are incompatible, and the compatible versions of pandas is not compatible with Python versions below 3.9. Since Python 3.8 is reaching EOL in about a month anyways, support for this version should now be deprecated to allow for more ready dependency resolution and avoidance of this fatal error.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/bin/sherlock\", line 3, in <module>\r\n    from sherlock_project.sherlock import main\r\n  File \"/home/[redacted]/Documents/sherlock/sherlock_project/sherlock.py\", line 21, in <module>\r\n    import pandas as pd\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/__init__.py\", line 22, in <module>\r\n    from pandas.compat import is_numpy_dev as _is_numpy_dev  # pyright: ignore # noqa:F401\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/compat/__init__.py\", line 25, in <module>\r\n    from pandas.compat.numpy import (\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/compat/numpy/__init__.py\", line 4, in <module>\r\n    from pandas.util.version import Version\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/util/__init__.py\", line 2, in <module>\r\n    from pandas.util._decorators import (  # noqa:F401\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/util/_decorators.py\", line 14, in <module>\r\n    from pandas._libs.properties import cache_readonly\r\n  File \"/home/[redacted]/.cache/pypoetry/virtualenvs/sherlock-project-VJORHILj-py3.12/lib64/python3.12/site-packages/pandas/_libs/__init__.py\", line 13, in <module>\r\n    from pandas._libs.interval import Interval\r\n  File \"pandas/_libs/interval.pyx\", line 1, in init pandas._libs.interval\r\nValueError: numpy.dtype size changed, may indicate binary incompatibility. Expected 96 from C header, got 88 from PyObject\r\n```\n", "hints_text": "\n", "created_at": "2024-08-23T05:10:52Z"}
{"repo": "sherlock-project/sherlock", "pull_number": 135, "instance_id": "sherlock-project__sherlock-135", "issue_numbers": ["128"], "base_commit": "fba27cd709d684c0f5a4f644c8db71a3de6b10cb", "patch": "diff --git a/data.json b/data.json\nindex f47095fcc..5b3122cd5 100644\n--- a/data.json\n+++ b/data.json\n@@ -41,7 +41,7 @@\n     \"errorMsg\":\"page not found\"\n   },\n   \"Pinterest\": {\n-    \"url\": \"https://www.pinterest.com/{}\",\n+    \"url\": \"https://www.pinterest.com/{}/\",\n     \"urlMain\": \"https://www.pinterest.com/\",\n     \"errorType\": \"response_url\",\n     \"errorUrl\": \"https://www.pinterest.com/?show_error=true\"\n@@ -415,7 +415,7 @@\n     \"errorType\": \"status_code\"\n   },\n   \"WordPress\": {\n-    \"url\": \"https://{}.wordpress.com\",\n+    \"url\": \"https://{}.wordpress.com/\",\n     \"urlMain\": \"https://wordpress.com\",\n     \"errorType\": \"response_url\",\n     \"errorUrl\": \"wordpress.com/typo/?subdomain=\",\ndiff --git a/sherlock.py b/sherlock.py\nindex e7fef9d71..3cc2850cb 100644\n--- a/sherlock.py\n+++ b/sherlock.py\n@@ -208,13 +208,27 @@ def sherlock(username, site_data, verbose=False, tor=False, unique_tor=False, pr\n                 if net_info[\"errorType\"] == 'status_code':\n                     request_method = session.head\n \n+            if net_info[\"errorType\"] == \"response_url\":\n+                #Site forwards request to a different URL if username not\n+                #found.  Disallow the redirect so we can capture the\n+                #http status from the original URL request.\n+                allow_redirects = False\n+            else:\n+                #Allow whatever redirect that the site wants to do.\n+                #The final result of the request will be what is available.\n+                allow_redirects = True\n+\n             # This future starts running the request in a new thread, doesn't block the main thread\n             if proxy != None:\n                 proxies = {\"http\": proxy, \"https\": proxy}\n-                future = request_method(\n-                    url=url, headers=headers, proxies=proxies)\n+                future = request_method(url=url, headers=headers,\n+                                        proxies=proxies,\n+                                        allow_redirects=allow_redirects\n+                                       )\n             else:\n-                future = request_method(url=url, headers=headers)\n+                future = request_method(url=url, headers=headers,\n+                                        allow_redirects=allow_redirects\n+                                       )\n \n             # Store future in data for access later\n             net_info[\"request_future\"] = future\n@@ -290,9 +304,13 @@ def sherlock(username, site_data, verbose=False, tor=False, unique_tor=False, pr\n                 exists = \"no\"\n \n         elif error_type == \"response_url\":\n-            error = net_info.get(\"errorUrl\")\n-            # Checks if the redirect url is the same as the one defined in data.json\n-            if not error in r.url:\n+            # For this detection method, we have turned off the redirect.\n+            # So, there is no need to check the response URL: it will always\n+            # match the request.  Instead, we will ensure that the response\n+            # code indicates that the request was successful (i.e. no 404, or\n+            # forward to some odd redirect).\n+            if (r.status_code >= 200) and (r.status_code < 300):\n+                #\n                 print_found(social_network, url, response_time, verbose)\n                 write_to_file(url, f)\n                 exists = \"yes\"\n", "test_patch": "diff --git a/tests/all.py b/tests/all.py\nindex 87d3b9b85..3d06281de 100644\n--- a/tests/all.py\n+++ b/tests/all.py\n@@ -23,7 +23,7 @@ def test_detect_true(self):\n         \"\"\"\n \n         self.username_check(['jack'],  ['Twitter'],   exist_check=True)\n-        #self.username_check(['dfox'],  ['devRant'],   exist_check=True)\n+        self.username_check(['dfox'],  ['devRant'],   exist_check=True)\n         self.username_check(['blue'],  ['Pinterest'], exist_check=True)\n         self.username_check(['kevin'], ['Instagram'], exist_check=True)\n         self.username_check(['zuck'],  ['Facebook'],  exist_check=True)\n@@ -92,3 +92,51 @@ def test_detect_false_via_response_url(self):\n                            )\n \n         return\n+\n+\n+class SherlockSiteCoverageTests(SherlockBaseTest):\n+    def test_coverage_false_via_response_url(self):\n+        \"\"\"Test Username Does Not Exist Site Coverage (Via Response URL).\n+\n+        This test checks all sites with the \"response URL\" detection mechanism\n+        to ensure that a Username that does not exist is reported that way.\n+\n+        Keyword Arguments:\n+        self                   -- This object.\n+\n+        Return Value:\n+        N/A.\n+        Will trigger an assert if detection mechanism did not work as expected.\n+        \"\"\"\n+\n+        self.username_check(['noonewouldeverusethis7'],\n+                            [\"Pinterest\", \"iMGSRC.RU\", \"Pastebin\",\n+                             \"WordPress\", \"devRant\", \"ImageShack\", \"MeetMe\"\n+                            ],\n+                            exist_check=False\n+                           )\n+\n+        return\n+\n+    def test_coverage_true_via_response_url(self):\n+        \"\"\"Test Username Does Exist Site Coverage (Via Response URL).\n+\n+        This test checks all sites with the \"response URL\" detection mechanism\n+        to ensure that a Username that does exist is reported that way.\n+\n+        Keyword Arguments:\n+        self                   -- This object.\n+\n+        Return Value:\n+        N/A.\n+        Will trigger an assert if detection mechanism did not work as expected.\n+        \"\"\"\n+\n+        self.username_check(['blue'],\n+                            [\"Pinterest\", \"iMGSRC.RU\", \"Pastebin\",\n+                             \"WordPress\", \"devRant\", \"ImageShack\", \"MeetMe\"\n+                            ],\n+                            exist_check=True\n+                           )\n+\n+        return\n", "problem_statement": "devRant/iMGSRC.RU/ImageShack/MeetMe Not Detecting Users That Exist\nNoticed while running the tests that devRant is not working right.  @TheYahya suggested during the review of #105 that we use the usernames of founders tests (as they would be expected to never delete their accounts).  But, when I tried to find  the \"dfox\" username, it said that it did not exist.  Yet, if I go to https://devrant.com/users/dfox, I can see his profile.\r\n\r\nHere is the example command that demonstrates the problem:\r\n\r\n```\r\npython -u sherlock.py dfox --site devRant --verbose\r\n```\r\nLooks like @sdushantha added this site originally.\n", "hints_text": "This appears to be a problem with the sites that redirect an attempt to view a non-existing username to the main site.  If you try to go to https://devrant.com/users/dfoxxxxxxxxx (a user name that does not exist), then we get a redirect to the https://devrant.com/ root of the site.  Yet, the \"response_url\" checking algorithm is only looking for the configured error URL being included in the response:\r\n\r\n```python\r\n        elif error_type == \"response_url\":\r\n            error = net_info.get(\"errorUrl\")\r\n            # Checks if the redirect url is the same as the one defined in data.json\r\n            if not error in r.url:\r\n                print_found(social_network, url, response_time, verbose)\r\n                write_to_file(url, f)\r\n                exists = \"yes\"\r\n                amount = amount+1\r\n            else:\r\n                print_not_found(social_network, response_time, verbose)\r\n                exists = \"no\"\r\n```\r\nSince \"https://devrant.com/\" is in \"https://devrant.com/users/dfox\", it is marked as an unknown username.\r\n\r\nPinterest (for example) has a response URL of \"https://www.pinterest.com/?show_error=true\". So this does not cause the problem, as there is no overlap between a good username and the error URL.", "created_at": "2019-01-23T02:43:44Z"}
