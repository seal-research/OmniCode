{"repo": "fastapi/fastapi", "pull_number": 1549, "instance_id": "fastapi__fastapi-1549", "issue_numbers": ["737"], "base_commit": "543ef7753aff639ad3aed7c153e42f719e361d38", "patch": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 1a660f5d355fa..15e7790cea9b5 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -478,6 +478,7 @@ async def solve_dependencies(\n                 name=sub_dependant.name,\n                 security_scopes=sub_dependant.security_scopes,\n             )\n+            use_sub_dependant.security_scopes = sub_dependant.security_scopes\n \n         solved_result = await solve_dependencies(\n             request=request,\n", "test_patch": "diff --git a/tests/test_dependency_security_overrides.py b/tests/test_dependency_security_overrides.py\nnew file mode 100644\nindex 0000000000000..b89d82db433fa\n--- /dev/null\n+++ b/tests/test_dependency_security_overrides.py\n@@ -0,0 +1,65 @@\n+from typing import List, Tuple\n+\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import SecurityScopes\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+def get_user(required_scopes: SecurityScopes):\n+    return \"john\", required_scopes.scopes\n+\n+\n+def get_user_override(required_scopes: SecurityScopes):\n+    return \"alice\", required_scopes.scopes\n+\n+\n+def get_data():\n+    return [1, 2, 3]\n+\n+\n+def get_data_override():\n+    return [3, 4, 5]\n+\n+\n+@app.get(\"/user\")\n+def read_user(\n+    user_data: Tuple[str, List[str]] = Security(get_user, scopes=[\"foo\", \"bar\"]),\n+    data: List[int] = Depends(get_data),\n+):\n+    return {\"user\": user_data[0], \"scopes\": user_data[1], \"data\": data}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_normal():\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"john\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [1, 2, 3],\n+    }\n+\n+\n+def test_override_data():\n+    app.dependency_overrides[get_data] = get_data_override\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"john\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [3, 4, 5],\n+    }\n+    app.dependency_overrides = {}\n+\n+\n+def test_override_security():\n+    app.dependency_overrides[get_user] = get_user_override\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"alice\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [1, 2, 3],\n+    }\n+    app.dependency_overrides = {}\n", "problem_statement": "dependency_overrides does not play well with scopes\n**Describe the bug**\r\nWhen working with `Security()` dependencies, the scopes disappear when `app.dependency_overrides` is executed. The callable dealing with the scopes gets an empty list instead of the scopes.\r\n\r\n**To Reproduce**\r\n\r\n```python\r\nfrom fastapi import FastAPI, Header, Security, Depends\r\nfrom fastapi.security import SecurityScopes\r\n\r\nfrom starlette.testclient import TestClient\r\n\r\napp = FastAPI()\r\n\r\ndef get_user(required_scopes: SecurityScopes):\r\n    print(required_scopes.scopes)\r\n\r\n    return \"John Doe\"\r\n\r\ndef data():\r\n    return [1,2,3]\r\n\r\ndef other_data():\r\n    return [3,4,5]\r\n\r\n\r\n@app.get(\"/test\")\r\ndef test(user: str = Security(get_user, scopes=[\"foo\", \"bar\"]), data = Depends(data)):\r\n    return data\r\n\r\nclient = TestClient(app)\r\nresponse = client.get(\"/test\")\r\n\r\napp.dependency_overrides[data] = other_data\r\nresponse = client.get(\"/test\")\r\n\r\n# prints: [\"foo\", \"bar\"] and [] instead of [\"foo\", \"bar\"] and [\"foo\", \"bar\"]\r\n```\r\n\r\n**Expected behavior**\r\nIn the above example I expect `get_user()` to print the same scopes twice. Instead, before the `dependency_overrides` it prints the correct scpoes, but an empty list afterwards.\r\n\r\n**Environment:**\r\n - OS: Linux\r\n - FastAPI Version 0.43.0\r\n- Python 3.7.4\r\n\n", "hints_text": "Hello,\r\n\r\nI was reading your [comment](https://github.com/tiangolo/fastapi/issues/738#issuecomment-558795651) in the other thread. In my case, I am using `dependency_overrides` to mock the connection to database.\r\n\r\n```python\r\nclass TransactionTestCaseMixin:\r\n    db_session: Session\r\n\r\n    @pytest.fixture(autouse=True)\r\n    def receive_db_session(self, dbsession: Session):\r\n        self.db_session = dbsession\r\n\r\n        app.dependency_overrides[get_db] = lambda: self.db_session\r\n```\r\n\r\nThat's causing us an issue using `SecurityScopes` when we are testing our service endpoint where we include a `Dependant` (Security) to manage the permissions of our endpoints.\r\n", "created_at": "2020-06-11T01:14:25Z", "version": "0.55", "FAIL_TO_PASS": ["tests/test_dependency_security_overrides.py"], "PASS_TO_PASS": []} . 